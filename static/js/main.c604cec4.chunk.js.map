{"version":3,"sources":["logo.svg","firebase.js","Contexts/AuthContext.js","WebComponents/PrivateRoute.js","WebComponents/RedirectRoute.js","Webpages/Intro.js","Webpages/Login.js","Webpages/SignUp.js","Webpages/Forgot-Password.js","Webpages/UserProfile.js","resources/velo.jpg","resources/mru.jpg","resources/mrua.jpg","resources/caida.png","resources/dinamica.png","resources/reposo.PNG","resources/segunda.jpg","resources/terceraley.jpg","Webpages/ExerciseList.js","Webpages/TeachersSurveyPage.js","Webpages/StudentsSurveyPage.js","WebComponents/SidebarList.js","WebLayout/Main.js","BabylonScene/index.js","BabylonScene/components/Ground.js","BabylonScene/components/XRGizmoManager.js","FisicARtivo_Components/DataCapture.js","FisicARtivo_Components/InformationCardsManager.js","FisicARtivo_Components/XRQuizDisplay.js","FisicARtivo_Components/XRDinamicsDataDisplay.js","FisicARtivo_Components/XRControlDisplay.js","FisicARtivo_Components/XRDisplayPlane.js","BabylonScene/components/exercise.js","ExcercisePage/exercise_1_1/quizList.js","ExcercisePage/exercise_1_1/resources/help0.png","ExcercisePage/exercise_1_1/resources/img1.PNG","ExcercisePage/exercise_1_1/resources/img2.PNG","ExcercisePage/exercise_1_1/resources/img3.PNG","ExcercisePage/exercise_1_1/resources/img4.PNG","ExcercisePage/exercise_1_1/resources/alert1.png","ExcercisePage/exercise_1_1/resources/help1.png","ExcercisePage/exercise_1_1/resources/cardboard.png","FisicARtivo_Components/InfoCards.js","ExcercisePage/exercise_1_1/index.js","ExcercisePage/exercise_1_2/resources/card1.PNG","ExcercisePage/exercise_1_2/resources/card2.PNG","ExcercisePage/exercise_1_2/resources/card3.PNG","ExcercisePage/exercise_1_2/resources/card4.PNG","ExcercisePage/exercise_1_2/resources/alert2.png","ExcercisePage/exercise_1_2/resources/cardboard.png","ExcercisePage/exercise_1_2/index.js","ExcercisePage/exercise_1_3/resources/card1.PNG","ExcercisePage/exercise_1_3/resources/card2.PNG","ExcercisePage/exercise_1_3/resources/card3.PNG","ExcercisePage/exercise_1_3/resources/card4.PNG","ExcercisePage/exercise_1_3/resources/alert2.png","ExcercisePage/exercise_1_3/resources/card5.PNG","ExcercisePage/exercise_1_3/resources/cardboard.png","ExcercisePage/exercise_1_3/index.js","ExcercisePage/exercise_1_4/resources/card1.PNG","ExcercisePage/exercise_1_4/resources/card2.PNG","ExcercisePage/exercise_1_4/resources/card3.PNG","ExcercisePage/exercise_1_4/resources/card4.PNG","ExcercisePage/exercise_1_4/resources/alert2.png","ExcercisePage/exercise_1_4/resources/cardboard.png","ExcercisePage/exercise_1_4/index.js","ExcercisePage/exercise_2_1/resources/card1.PNG","ExcercisePage/exercise_2_1/resources/card2.PNG","ExcercisePage/exercise_2_1/resources/card3.PNG","ExcercisePage/exercise_2_1/resources/card4.PNG","ExcercisePage/exercise_2_1/resources/card5.PNG","ExcercisePage/exercise_2_1/resources/card6.PNG","ExcercisePage/exercise_2_1/resources/card7.PNG","ExcercisePage/exercise_2_1/resources/alert2.png","ExcercisePage/exercise_2_1/resources/cardboard.png","ExcercisePage/exercise_2_1/index.js","ExcercisePage/exercise_2_2/resources/card1.PNG","ExcercisePage/exercise_2_2/resources/card2.PNG","ExcercisePage/exercise_2_2/resources/card3.PNG","ExcercisePage/exercise_2_2/resources/alert2.png","ExcercisePage/exercise_2_2/resources/cardboard.png","ExcercisePage/exercise_2_2/index.js","ExcercisePage/exercise_2_3/resources/card1.PNG","ExcercisePage/exercise_2_3/resources/card2.PNG","ExcercisePage/exercise_2_3/resources/card3.PNG","ExcercisePage/exercise_2_3/resources/alert2.png","ExcercisePage/exercise_2_3/resources/cardboard.png","ExcercisePage/exercise_2_3/index.js","ExcercisePage/exercise_2_4/resources/card1.PNG","ExcercisePage/exercise_2_4/resources/alert2.png","ExcercisePage/exercise_2_4/index.js","ExcercisePage/test_compatibility/index.js","ExcercisePage/test_comp_0_0/resources/cap1.PNG","ExcercisePage/test_comp_0_0/resources/expresion.PNG","EmotionRecognition_Components/WebCam.js","EmotionRecognition_Components/EmotionsAPI.js","ExcercisePage/test_comp_0_0/index.js","App.js","reportWebVitals.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","fname","lname","birthday","sex","createUserWithEmailAndPassword","then","response","collection","doc","uid","set","login","signInWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","render","props","to","RedirectRoute","Copyright","Typography","variant","color","align","Link","href","useStyles","makeStyles","theme","ul","margin","padding","listStyle","appBar","borderBottom","palette","divider","toolbar","flexWrap","toolbarTitle","flexGrow","link","spacing","heroContent","startButtonContent","cardHeader","backgroundColor","type","grey","cardImage","display","justifyContent","alignItems","marginBottom","footer","borderTop","marginTop","paddingTop","paddingBottom","breakpoints","up","marginAutoContainer","width","height","marginAutoItem","alignItemsAndJustifyContent","steps","title","description","buttonText","buttonVariant","hasButton","buttonURl","Pricing","classes","Fragment","CssBaseline","Container","maxWidth","className","Box","m","src","style","flex","gutterBottom","CardMedia","media","controls","p","textAlign","Button","onClick","window","location","size","Grid","container","map","tier","item","xs","sm","md","Card","CardHeader","subheader","titleTypographyProps","subheaderTypographyProps","action","CardContent","line","CardActions","fullWidth","mt","MyLink","forwardRef","ref","innerRef","Footer","body","common","white","toolbarButtons","marginLeft","marginRight","paper","flexDirection","avatar","secondary","main","form","submit","Login","emailRef","useRef","passwordRef","error","setError","useHistory","e","a","preventDefault","current","AppBar","position","IconButton","Avatar","Alert","severity","onSubmit","TextField","required","id","label","name","autoComplete","autoFocus","inputRef","FormControlLabel","control","Checkbox","disabled","Date","getFullYear","SignUp","confirmPasswordRef","fNameRef","lNameRef","birthdayRef","sexRef","InputLabelProps","shrink","select","MenuItem","justify","MadeWithLove","ForgotPassword","message","setMessage","UpdateProfile","userData","setUserData","history","handleChange","target","get","data","console","log","promises","push","update","Promise","all","catch","finally","onChange","placeholder","RouterLink","FooterText","icon","introSection","background","heroButtons","cardGrid","card","cardMedia","cardContent","cardactionarea","cardFooter","cinematicCards","dificulty","exerciselink","image","image1","image2","image3","image4","dinamicCards","image5","image6","image7","image8","Album","Toolbar","noWrap","paragraph","opacity","bgcolor","CardActionArea","defaultThemeColors","SurveyJS","ThemeColors","SurveyPage","applyTheme","modelSurvey","pedagogic_survey","model","onComplete","add","result","dateObj","month","getUTCMonth","day","getUTCDate","doctag","survey_name","getUTCFullYear","getUTCHours","getUTCMinutes","toString","surveySample","SidebarList","handleClick","setState","state","handleClickLink","url","items","this","list","List","root","subitems","ListItem","button","ListItemText","primary","Collapse","in","timeout","unmountOnExit","disablePadding","sitem","selected","pathname","nested","Divider","absolute","withRouter","withStyles","paddingLeft","selectedItem","zIndex","drawer","hide","flexShrink","drawerPaper","drawerHeader","mixins","content","transition","transitions","create","easing","sharp","duration","leavingScreen","contentShift","easeOut","enteringScreen","linked","textDecoration","Main","MainContents","open","setOpen","edge","menuButton","Drawer","anchor","clsx","BabylonScene","onResizeWindow","engine","resize","forceUpdate","onCanvasLoaded","c","canvas","BABYLON","engineOptions","adaptToDeviceRatio","scene","onSceneMount","addEventListener","removeEventListener","opts","undefined","createPlayGroundGigant","groundMaterial","diffuseTexture","uScale","vScale","specularColor","ground2","CreateBox","depth","visibility","physicsImpostor","BoxImpostor","mass","restitution","material","wallF","checkCollisions","wallB","wallR","wallL","addChild","addXRGizmoManager","gizmoManager","GizmoManager","usePointerToAttachGizmos","clearGizmoOnEmptyPointerEvent","rotationSphereSize","scaleBoxSize","selectMode","mode","positionGizmoEnabled","rotationGizmoEnabled","scaleGizmoEnabled","boundingBoxGizmoEnabled","gizmos","boundingBoxGizmo","setEnabledScaling","globalTimer","Timer","exerciseData","setExerciseData","exercise","getExerciseData","checkUserExerciseData","exercise_id","exists","updateUserExerciseData","checkCompletedQuizes","quizlist","Object","entries","quizes","key","isCompleted","length","isExerciseComplete","stop","generalTime","getTimeValues","getQuizByID","addQuizTimebyID","time","addQuizErrorByID","errors","addTotalError","totalErrors","InfoCardsManager","displayPlane","CreatePlane","nonXREditable","XRPickable","local_pos","rotation","y","Math","PI","GUI","CreateForMesh","scaleTo","mainstructure_grid","addColumnDefinition","addRowDefinition","addControl","cards_container","cards_container_index","getCurrentCard","button_previous","CreateImageOnlyButton","fontSize","paddingBottomInPixels","paddingTopInPixels","paddingLeftInPixels","paddingRightInPixels","onPointerUpObservable","tem_index","prev_card","removeControl","info_image_container","onload","logicManager","LoadStuff","Start","prevImage","button_next","nextImage","observables_list","temp_loable_element","temp_disposable_stuff","temp_observables","temp_GUI","Load_Models","meshes","ClearAll","Load_Logic","forEach","onBeforeRenderObservable","remove","Array","isArray","dispose","element","AddDisposableStuff","AddObservables","observable","AddTemporalGUI","Reset","ReloadModels","ReloadLogic","LogicManager","addCard","cardnumber","isLimitList","sublimitcheck","openKeys","frame","animationOpen","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CONSTANT","setKeys","easingFunction","setEasingMode","EASINGMODE_EASEOUT","setEasingFunction","beginDirectAnimation","close","keys","animationClose","EASINGMODE_EASEINOUT","addObserver","params","removeObserver","number","clearObservers","clearItems","XRQuizDisplay","windowMesh","sideOrientation","DOUBLESIDE","window_texture","win_rectangle","thickness","win_grid","win_text_name","fontFamily","text","textHorizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","ajust_pos","getBoundingInfo","boundingBox","maximum","change_axis","parent","container_texture","idealHeight","main_grid","question","answers","correctanswer","finalanswer","dataText","textWrapping","textVerticalAlignment","VERTICAL_ALIGNMENT_TOP","paddingRight","buttonsGrid","createAnswerbutton","answer","CreateSimpleButton","cornerRadius","setAnswer","verticalAlignment","answer0","onPointerClickObservable","answer1","answer2","answer3","controlGrid","leftarrow","rightarrow","finalanswerButton","addResultPlane","messageString","ImgDir","container_result","scaleX","grid","headerText","fontStyle","HORIZONTAL_ALIGNMENT_CENTER","dataobserver","show","correctPanel","incorrectPanel","allcompletedPanel","addcompletedPanel","finalAnswerResult","checkFinalAnswer","timer_error_grid","question_number","time_number","error_number","loadquiz","quiz","extradata","textBlock","setIscompleted","bool","getIsCorrect","setCorrectObs","obs","setIncorrectObs","XRDinamicsDataDisplay","horizontalAlignment","globalHeight","tick","drawdatatext","deltaTime","addFormulaImage","setViewData","clearViewData","XRControlDisplay","HORIZONTAL_ALIGNMENT_RIGHT","panel","controlPanel","button2","splice","clear","groups","i","removeGroup","XRDisplayPlane","alpha","x","z","degrees","idealWidth","useSmallestIdeal","questionInput","answersInput","correctanswerInput","extraDataInput","logic","models","quiz1","Exercise","quiz2","quiz3","ImageInfoCard","Base_image","ExercisePage","GetMainContent","imagebox","babylonbuttons","quiz_1","quiz_2","quiz_3","DataCapture","start","my","displayLoadingUI","QuizTimer","camera_initialPos","camera_initialTarget","camera","setTarget","attachControl","speed","angularSensibility","inertia","intensity","skybox","skyboxMaterial","backFaceCulling","reflectionTexture","coordinatesMode","SKYBOX_MODE","diffuseColor","disableLighting","enablePhysics","getPhysicsEngine","collisionsEnabled","applyGravity","ellipsoid","ground","Ground","xr","createDefaultXRExperienceAsync","disableDefaultUI","uiOptions","sessionMode","referenceSpaceType","inputOptions","doNotLoadControllerMeshes","fm","baseExperience","featuresManager","enableFeature","Name","onStateChangedObservable","ENTERING_XR","isVisible","NOT_IN_XR","XRmode","pickedMesh","attachedMesh","pressed","onPointerObservable","addOnce","pointerinfo","POINTERMOVE","pointerInfo","pickInfo","POINTERDOWN","constantlyUpdateMeshUnderPointer","attachToMesh","POINTERUP","onBeforePhysicsObservable","_physicsBody","setLinearVelocity","setAngularVelocity","registerBeforeRender","help_card","help0","info_card1","img4","info_card2","img1","info_card3","img2","info_card4","img3","alert_card","alert1","exercise_card","help1","addLogic","section_infodisplay","disposable_ghosts","disposable_clones","disposable_lines","disposable_panels","loaded_onBeforeRenderObservables","defaultmeshes","rotatewithgrades","mesh","grades","rotationQuaternion","RotationAxis","attachToCollider","modelMeshes","rootMesh","collider","BABYLON_Impostor_Type","boundingMinMax","getHierarchyBoundingVectors","bounds","max","subtract","min","geometricCenter","scale","scaling","copyFrom","setParent","createModel","ImportMeshAsync","carmodel","carmesh","scaleInPlace","carcollider","car","impulseDirection","obj_Distance","Zero","obj_Time","obj_Velocity","display_Distance","display_Time","prepare","getMeshByName","activate","limitTime","transformForce","vec","mymatrix","toRotationMatrix","TransformNormal","ghosting","ghost_clone","clone","getChildMeshes","child","setAbsolutePosition","ghost_sphere","CreateSphere","segments","diameter","applyLine","past_ghost","actual_ghost","CreateLines","getAbsolutePosition","applyDataPanel","miniplane","billboardMode","BILLBOARDMODE_ALL","advancedTexture","button1","dataToshow","RefreshDataInMilisecs","refreshRate","refreshsteps","round","actualstep","temporalObs","toFixed","disposeAll","disposeghosts","test","setScaleToInPixels","switchmode","card1Logic","exercise_quizdisplay","exercise_datadisplay","exercise_control","quizesList","exercise_list","loaded_meshes","loaded_exercise_index","resource_manager","currentQuiz","reset","OnscreenTimer","isRunning","isCompleted_Question_number","Check_Errors_number","Check_Timer_number","pause","formatTime","minutes","seconds","manageStuff","addExercise","LoadQuiz","ClearStuff","quiz1_models","quiz2_models","quiz3_models","exercise1Logic","PinPointMeasure","pick1","sphere1","buttonpress","expandmeasurement","pick2","sphere2","distance","Distance","distx","abs","disty","distz","distxz","sqrt","distances","measureObs","measurement1","disposeMeasure","disposeMeasurement","createMeasure","disposable","calculateMeasurement","display_Velocity","calculateDistance","tiempo","floor","velocidad","displayFValue","controlSlider","addSlider","addGroup","heightInPixels","execute_obs","exercise2Logic","calculateVelocity","desplazamiento","exercise3Logic","calculateTime","QuizList","addModels","card4Logic","InfoDisplay","loader","onFinish","runRenderLoop","document","getFps","executeWhenReady","hideLoadingUI","getElementById","input","xrCamera","enterXRAsync","IN_XR","exitXRAsync","switchFullscreen","load","card1","card2","card3","card4","alert2","info_card5","cardboard","card2Logic","disposable_stuff","bigball","SphereImpostor","busmodel","busmesh","buscollider","cannontube","CoT","ghostLine","past_sphere","actual_sphere","ghostData","miniplame","CalculateDistance","Calculatevelocidad","CalculateTime","calculate_velocity","edit_distance","edit_time","bus","info","calculate_time","edit_velocity","card4_exercises","createNewBall","info_card6","card2_demo","obj_Accel","currentTime","multiplier","accelObs","CalculateFinalVel","CalculateAccel","card5_exercises","to_clone_model","disposable_ghost_points","load_model","ApplyDataPanel","ControlWithLimitTime","demo_section","load_models","applemodel","applemesh","apple_collider","animation","onEnd","frameRate","ySlide","ANIMATIONTYPE_VECTOR3","keyFrames","EASINGMODE_EASEIN","animations","animevent","test_data","animevent1","animevent2","animevent3","addEvent","beginAnimation","setMass","do_test_animation","do_test_animation_down","ball","disposable_items","max_time","max_height","direction_CoT","CalculateMaxheightTime","CalculateMaxheight","fireball","VScale","emissiveColor","friction","force","dir","RefreshGhosting","ghoststeps","isMoving","done_max_height","done_up_points","done_down_points","fasttick","initialVel","initialPos","check_initial_velocity","getLinearVelocity","check_initial_position","check_up_points","vel_to_sections","pos_to_sections","tempObs","ballvel","vel_to_section","ghost_vel_pos","check_down_points","check_max_height_point","temporalObsFast","demo_section2","cannonmodel","cannonmesh","materialWood","FromHexString","cannoncolider","setTimeout","card5","card6","info_card7","card7","sun","transformContainer","light0","diffuse","planet","planetMaterial","moon","translate","WORLD","detail","pieDiv","divArray","radius","ratio","offset","newPath","cos","sin","lines","CreateDashedLines","points","dashNb","lines2","arrowForce","arrowStart","arrowDirection","myShape","arrowRadius","n","deltaAngle","arrowHeadLength","arrowHeadMaxSize","arrowBodyLength","normalize","arrowBodyEnd","arrowHeadEnd","myPath","index","arrow","ExtrudeShapeCustom","shape","path","updatable","scaleFunction","arrowLengthbyScale","instance","transformscale","multiplyByFloats","headArrow","arrow_earth","arrow_sun","info_GUI","meshParent","dataString","plane","lookAt","solarsistem","logicbox_","logicBox_GUI","panelforGravityControl","VERTICAL_ALIGNMENT_BOTTOM","VERTICAL_ALIGNMENT_CENTER","button3","logicbox1","box","obj_force1","obj_mass","gravity_force","obj_totalforce","getAccel","displayMass","setAccel","displayNewtons","slider_control","SliderMass","changeForce1","displayMValue","objmass","button1_status","objaccel","sliderplane","advancedTextureSlider","header","slider","minimum","onValueChangedObservable","setGravity","gravity_demo","exercise_card_exercises","rootNode","stickman","firstarrow","fisrtArrowStart","firstArrowDirection","secondArrowStart","secondArrowDirection","impulseMagnitude","contactLocalRefPoint","obj_accel","onDisplay_accel","createStickManWithBox2","stickmanmesh","stickmancollider","materialRed","Red","tope","createAll","displayAcceleration","ExecuteButton","applyImpulse","datarotation","middlepoint","scalingDeterminant","impulsewTransform","editForce","button_panel","createStickManWithBox","logicbox2","loadBlueCarModel","createWoodBox","createMetalBox","materialMetal","obj_force2","getTotalForce","onDisplay_force","onDisplay_mass","secondarrow","changeForce2","forceGroup","logicbox3","thirdArrowStart","thirdArrowDirection","obj_force3","thirdarrow","changeForce3","logicbox4","quiz_4","quiz_5","box2","firstarrow2","secondarrow2","setAccel2","obj_force1_2","obj_force2_2","obj_mass_2","obj_totalforce_2","obj_accel_2","onDisplay_accel_2","create2Boxes","materialfloor","quiz1box","quiz2box","quiz3box","quiz4box","tube","CreateTube","rotateGroup","quiz1logic","largebox","ground_mat","mmat","gotdata","colide","against","onCollide","point","rectangle","registerOnPhysicsCollide","card1logic","quiz3test","wall","materialwall","loadRedCardModel","cararrow","copy_e","JSON","parse","stringify","arrowForceParentless","unregisterOnPhysicsCollide","basestart","addInPlace","test2","test3","exercisesLogic","IsSessionSupportedAsync","arAvailable","normalGUI","CreateFullscreenUI","intro_info","text_bad","text_good","noXRPanel","xr_info","text1","XRPanel","sessionManager","onXRSessionInit","onXRSessionEnded","createScene","WebCam","componentDidMount","startCamera","constraints","video","exact","facingMode","audio","navigator","mediaDevices","getUserMedia","stream","videoEle","srcObject","takeCapture","videoWidth","videoHeight","ctx","canvasEle","getContext","drawImage","imageDataURL","toDataURL","landmarkPicture","imageURL","stopCamera","getTracks","track","backToCam","createRef","imageEle","autoPlay","MODEL_URL","Image","isloaded","getImage","isLoaded","faceapi","tinyFaceDetector","loadFromUri","getFullFaceDescription","withFaceLandmarks","withFaceExpressions","DoProcess","picture","setEmotionData","emotiondata","tag","tempData","addtag","TakeEmotionByTime","tagname","expressions","TakeEmotion","webcam","EmotionsAPI","expresion1","drawerImage","App","Intro","ForgotPasword","ExerciseList","UserProfile","SurveyPage_Teacher","SurveyPage_Student","exer_1_1","exer_1_2","exer_1_3","exer_1_4","exer_2_1","exer_2_2","exer_2_3","exer_2_4","test_comp_0_0","compatibility_test","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.c604cec4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/auth'\r\nimport 'firebase/firebase-firestore'\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD_e5N5EKFYSlN0Ey58xNXoSf8TGHdn8QA\",\r\n    authDomain: \"fisicartivo-beta.firebaseapp.com\",\r\n    projectId: \"fisicartivo-beta\",\r\n    storageBucket: \"fisicartivo-beta.appspot.com\",\r\n    messagingSenderId: \"113809138833\",\r\n    appId: \"1:113809138833:web:59b87864705f796f8a4b30\"\r\n};\r\n\r\n//firestore.settings({ experimentalForceLongPolling: true });\r\n\r\nconst app = firebase.initializeApp(firebaseConfig);\r\n\r\nexport const auth = app.auth();\r\n\r\nexport const firestore = app.firestore();\r\n\r\n\r\n\r\nexport default app;\r\n\r\n\r\n\r\n","import React, {useContext, useState, useEffect} from 'react'\r\nimport {auth, firestore} from '../firebase'\r\nimport firebase from '../firebase'\r\n\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth(){\r\n    return useContext(AuthContext);\r\n}\r\n\r\n\r\nexport  function AuthProvider({children}){\r\n    const [currentUser, setCurrentUser] = useState();     \r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    \r\n\r\n    function signup(email, password, fname,lname,birthday,sex) {\r\n\r\n       var baseauth=auth.createUserWithEmailAndPassword(email, password).then(response =>{\r\n\r\n        firestore.collection('users').doc(response.user.uid).set({\r\n            email: response.user.email,\r\n            uid : response.user.uid,\r\n            fname:fname,\r\n            lname:lname,\r\n            birthday:birthday,\r\n            sex:sex\r\n        })\r\n\r\n        /*firebase.database().ref('/users/' + response.user.uid).set({\r\n            email: response.user.email,\r\n            uid : response.user.uid,\r\n            username: {fname:fname,lname:lname},\r\n            birthday:birthday,\r\n            sex:sex\r\n        });*/\r\n\r\n       })        \r\n       \r\n        return baseauth\r\n    }\r\n\r\n    function login(email, password){\r\n        return auth.signInWithEmailAndPassword(email, password);\r\n    }\r\n\r\n    function logout(){\r\n        return auth.signOut();\r\n    }\r\n\r\n    function resetPassword(email){\r\n        \r\n        return auth.sendPasswordResetEmail(email);\r\n    }\r\n\r\n    function updateEmail(email){\r\n        return currentUser.updateEmail(email);\r\n    }\r\n\r\n    function updatePassword(password){\r\n        return currentUser.updatePassword(password);\r\n    }\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n       \r\n        \r\n    const unsuscribe = auth.onAuthStateChanged(user =>{      \r\n\r\n        setCurrentUser(user);\r\n    \r\n        setLoading(false);\r\n\r\n        })\r\n        return unsuscribe;\r\n    },[])\r\n\r\n\r\n    const value ={\r\n        currentUser,              \r\n        signup,\r\n        login,\r\n        logout,\r\n        resetPassword,\r\n        updateEmail,\r\n        updatePassword\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value= {value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    )\r\n\r\n}","import React from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport { useAuth } from \"../Contexts/AuthContext\"\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  const { currentUser } = useAuth()\n\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />\n      }}\n    ></Route>\n  )\n}\n","import React from \"react\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport { useAuth } from \"../Contexts/AuthContext\"\n\nexport default function RedirectRoute({ component: Component, ...rest }) {\n  const { currentUser } = useAuth()\n\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        return currentUser ? <Redirect to=\"/excercises\" /> : <Component {...props} />  \n      }}\n    ></Route>\n  )\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport StarIcon from '@material-ui/icons/StarBorder';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\n\nimport { withRouter } from 'react-router-dom'\nimport PropTypes from 'prop-types';\n\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Proyecto FisicARtivo'}\n      <br />\n      <Link color=\"inherit\" href=\"https://www.culiacan.tecnm.mx/\">\n        Tecnológico Nacional De México Campus Culicán\n      </Link>\n      <br />\n      {'\\n'}\n      <Link color=\"inherit\" href=\"https://conacyt.mx/\">\n        CONACYT 2021\n      </Link>\n\n    </Typography>\n  );\n}\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  '@global': {\n    ul: {\n      margin: 0,\n      padding: 0,\n      listStyle: 'none',\n    },\n  },\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbar: {\n    flexWrap: 'wrap',\n  },\n  toolbarTitle: {\n    flexGrow: 1,\n  },\n  link: {\n    margin: theme.spacing(1, 1.5),\n  },\n  heroContent: {\n    padding: theme.spacing(8, 0, 6),\n  },\n  startButtonContent: {\n    margin: theme.spacing(1)\n  },\n  cardHeader: {\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\n  },\n  cardImage: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'baseline',\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    borderTop: `1px solid ${theme.palette.divider}`,\n    marginTop: theme.spacing(8),\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3),\n    [theme.breakpoints.up('sm')]: {\n      paddingTop: theme.spacing(6),\n      paddingBottom: theme.spacing(6),\n    },\n  },\n  marginAutoContainer: {\n    width: 500,\n    height: 80,\n    display: 'flex',\n  },\n  marginAutoItem: {\n    margin: theme.spacing(1),\n  },\n  alignItemsAndJustifyContent: {\n    width: 500,\n    height: 80,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n}));\n\nconst steps = [\n  {\n    title: 'Paso 1',\n\n    description: ['Selecciona uno de los diversos ejercicios para aprender fisica'],\n    buttonText: 'Sign up for free',\n    buttonVariant: 'outlined',\n  },\n  {\n    title: 'Paso 2',\n\n    description: [\n      'Activa el modo AR de tu dispositivo móvil Android',\n      '(Solo es compatible usando navegador Chrome y Android 8 en adelante)',\n\n    ],\n    buttonText: 'Lista de compatibilidad',\n    buttonVariant: 'contained',\n    hasButton: true,\n    buttonURl: 'https://developers.google.com/ar/discover/supported-devices#google_play_devices'\n  },\n  {\n    title: 'Paso 3',\n\n    description: [\n      'Interactua con los objetos virtuales en tu alrededor y responde las preguntas!',\n    ],\n    buttonText: 'Contact us',\n    buttonVariant: 'outlined',\n  },\n];\nconst footers = [\n  {\n    title: 'Company',\n    description: ['Team', 'History', 'Contact us', 'Locations'],\n  },\n  {\n    title: 'Features',\n    description: ['Cool stuff', 'Random feature', 'Team feature', 'Developer stuff', 'Another one'],\n  },\n  {\n    title: 'Resources',\n    description: ['Resource', 'Resource name', 'Another resource', 'Final resource'],\n  },\n  {\n    title: 'Legal',\n    description: ['Privacy policy', 'Terms of use'],\n  },\n];\n\n\n\nexport default function Pricing() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n\n      {/* Hero unit */}\n\n      <Container maxWidth=\"sm\" component=\"main\" className={classes.heroContent}>\n\n\n        <Box m={1} align='center' maxWidth='xs'>\n\n          <img src={\"/images/logopage.png\"} style={{ width: '59%', height: '50%', flex: 1, display: 'flex' }} />\n\n        </Box>\n\n\n\n        <Box m={2}>\n          <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n            FisicARtivo\n          </Typography>\n          <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" component=\"p\">\n            ¡Aprende física en Realidad Aumentada!\n          </Typography>\n\n\n\n        </Box>\n\n\n        <Box>\n          <CardMedia\n            component='video'\n            className={classes.media}\n            src={\"/videos/intro.mp4\"}\n            controls\n          />\n        </Box>\n\n\n\n        <Container align='center' maxWidth='xs'>\n\n\n        </Container>\n\n\n\n        {/*start button unit */}\n\n\n\n        <Box p={2} textAlign='center' maxWidth=\"sm\" component=\"div\" >\n\n          <Button onClick={() => (window.location = \"/login\")} className={classes.marginAutoItem} size='medium' variant=\"contained\" color=\"primary\">\n            <Typography variant=\"h4\">Inicia aquí</Typography>\n          </Button>\n\n        </Box>\n\n\n\n      </Container>\n      {/* End hero unit */}\n      <Container maxWidth=\"md\" component=\"main\">\n        <Grid container spacing={5} alignItems=\"flex-start\">\n          {steps.map((tier) => (\n            // Enterprise card is full width at sm breakpoint\n            <Grid item key={tier.title} xs={12} sm={tier.title === 'Enterprise' ? 12 : 6} md={4}>\n              <Card>\n                <CardHeader\n                  title={tier.title}\n                  subheader={tier.subheader}\n                  titleTypographyProps={{ align: 'center' }}\n                  subheaderTypographyProps={{ align: 'center' }}\n                  action={tier.title === 'Pro' ? <StarIcon /> : null}\n                  className={classes.cardHeader}\n                />\n                <CardContent>\n                  <div className={classes.cardImage}>\n\n                  </div>\n                  <ul>\n                    {tier.description.map((line) => (\n                      <Typography component=\"li\" variant=\"subtitle1\" align=\"center\" key={line}>\n                        {line}\n                      </Typography>\n                    ))}\n                  </ul>\n                </CardContent>\n                <CardActions>\n                  {tier.hasButton == true ? <Button href={tier.buttonURl} fullWidth variant={tier.buttonVariant} color=\"primary\">\n                    {tier.buttonText}\n                  </Button>\n                    : null}\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n      {/* Footer */}\n      <Container maxWidth=\"md\" component=\"footer\" className={classes.footer}>\n        <Typography variant='h6'>Proyecto presentado por: </Typography>\n        <Typography><strong>Investigador principal: </strong></Typography>\n        <Typography>M.C. Brandon Antonio Cárdenas Sainz </Typography>\n        <Typography><strong>Investigadores asociados: </strong></Typography>\n        <Typography>Dr. Ramón Zatarain Cabada </Typography>\n        <Typography>Dra. Lucía Barrón Estrada </Typography>\n\n\n        <Box mt={5}>\n          <Copyright />\n        </Box>\n      </Container>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n\n/*<Container maxWidth=\"md\" component=\"footer\" className={classes.footer}>\n<Grid container spacing={4} justify=\"space-evenly\">\n{footers.map((footer) => (\n  <Grid item xs={6} sm={3} key={footer.title}>\n    <Typography variant=\"h6\" color=\"textPrimary\" gutterBottom>\n      {footer.title}\n    </Typography>\n    <ul>\n      {footer.description.map((item) => (\n        <li key={item}>\n          <Link href=\"#\" variant=\"subtitle1\" color=\"textSecondary\">\n            {item}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </Grid>\n))}\n</Grid>\n<Box mt={5}>\n<Copyright />\n</Box>\n</Container>*/","//https://github.com/mui-org/material-ui/tree/master/docs/src/pages/getting-started/page-layout-examples\nimport React, {useRef,useState} from 'react';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { Link as RouterLink} from 'react-router-dom';\nimport {useHistory } from \"react-router-dom\"\nimport {Redirect} from 'react-router-dom'\n\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport Alert from '@material-ui/lab/Alert';\n\nimport {useAuth} from '../Contexts/AuthContext'\n\nconst MyLink = React.forwardRef((props, ref) => <RouterLink innerRef={ref} {...props} />);\n\n\nfunction Footer() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Proyecto FisicARctivo'}\n      <br />\n      <Link color=\"inherit\" href=\"https://www.culiacan.tecnm.mx/\">\n        Tecnológico Nacional De Mexico Campus Culicán\n      </Link> \n      <br />\n      {'\\n'}\n      <Link color=\"inherit\" href=\"https://conacyt.mx/\">\n        CONACYT 2021\n      </Link>      \n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  toolbarButtons: {\n    marginLeft: \"auto\",\n    marginRight: 5\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login() {\n  const classes = useStyles();\n\n  const emailRef = useRef();\n  const passwordRef = useRef();\n\n  const {login} = useAuth();\n  const [error, setError] = useState('');\n  const [loading,setLoading] = useState(false);\n  const history = useHistory();\n\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n  \n    try{\n      setError('')\n      setLoading(true)\n      \n      await login(emailRef.current.value,passwordRef.current.value)\n      //history.push(\"/excercises\")\n    }catch{\n      setError('Falla al intentar ingresar a la pagina')\n    }\n\n    setLoading(false)\n  }\n\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">        \n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n      >        \n          <IconButton \n          className={classes.toolbarButtons} \n          color=\"inherit\" \n          aria-label=\"Back to home\" \n          onClick={()=>(window.location=\"/\")}>\n          <HomeIcon />\n          </IconButton>\n      </AppBar>\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Ingresar a FisicARtivo\n        </Typography>\n        {error && <Alert severity=\"error\">{error}</Alert>}\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Correo electronico\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            inputRef={emailRef}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Contraseña\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            inputRef={passwordRef}\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Recuerdame\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            disabled={loading}\n            \n          >\n            Ingresar\n          </Button>\n         \n          <Grid container>\n            <Grid item xs>\n              <Link to=\"/forgot-password\"  component={MyLink} variant=\"body2\">\n                Olvide mi contraseña\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link to=\"/signUp\" component={MyLink} variant=\"body2\">\n                {\"No tienes una cuenta? Registrate\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Footer />\n      </Box>\n    </Container>\n  );\n}","import React, {useRef,useState} from 'react';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Link as RouterLink, withRouter } from 'react-router-dom';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\n\nimport Alert from '@material-ui/lab/Alert';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport {useAuth} from '../Contexts/AuthContext'\n\n\nconst MyLink = React.forwardRef((props, ref) => <RouterLink innerRef={ref} {...props} />);\n\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  toolbarButtons: {\n    marginLeft: \"auto\",\n    marginRight: 5\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n\n  \n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const confirmPasswordRef = useRef();\n  const fNameRef = useRef();\n  const lNameRef = useRef();\n  const birthdayRef = useRef();\n  const sexRef = useRef();\n\n  const [sex, setSex] = useState('');\n\n  const handleSexChange = (event) => {\n    setSex(event.target.value);\n  };\n\n\n  const {signup} = useAuth();\n  const [error, setError] = useState('');\n  const [loading,setLoading] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if(passwordRef.current.value !== confirmPasswordRef.current.value){\n      return setError('Las contraseñas no coinciden')\n    }\n\n    try{\n      setError('')\n      setLoading(true)\n      \n      await signup(emailRef.current.value, passwordRef.current.value, fNameRef.current.value,lNameRef.current.value,birthdayRef.current.value,sexRef.current.value)\n    }catch{\n      setError('Falla al crear la cuenta')\n    }\n\n    setLoading(false)\n  }\n\n\n  \n\n  return (\n  \n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n      >        \n          <IconButton \n          className={classes.toolbarButtons} \n          color=\"inherit\" \n          aria-label=\"Back to home\" \n          onClick={()=>(window.location=\"/\")}>\n          <HomeIcon />\n          </IconButton>\n      </AppBar>\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Registrate\n        </Typography>\n        \n        {error && <Alert severity=\"error\">{error}</Alert>}\n        <form onSubmit={handleSubmit} className={classes.form} >\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"firstName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"Nombre\"\n                autoFocus\n               inputRef={fNameRef}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Apellidos\"\n                name=\"lastName\"\n                autoComplete=\"lname\"\n               inputRef={lNameRef}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"date\"\n                label=\"fecha de nacimiento (DD/MM/AAAA)\"\n                type=\"date\"\n                name=\"date\" \n                InputLabelProps={{\n                  shrink: true,\n                }}              \n                inputRef={birthdayRef}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                id=\"Sex\"\n                select\n                required\n                fullWidth\n                label=\"Sexo\"\n                //value={sex}\n                //onChange={handleSexChange}               \n                variant=\"outlined\"\n                inputRef={sexRef}\n              >\n                <MenuItem value={\"Masculino\"}>Masculino</MenuItem>\n                <MenuItem value={\"Femenino\"}>Femenino</MenuItem> \n              </TextField>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Correo electronico\"\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                inputRef={emailRef}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Contraseña\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                inputRef={passwordRef}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"confirmpassword\"\n                label=\"Comfirma contraseña\"\n                type=\"password\"\n                id=\"confirmpassword\"\n                inputRef={confirmPasswordRef}\n                \n              />\n            </Grid>\n          </Grid>\n          <Button\n            disabled={loading}\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Registrate\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link to=\"/login\" component={MyLink} variant=\"body2\">\n              Ya tienes una cuenta? Accede.\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n   \n  );\n}\n","import React, {useRef,useState} from 'react';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { Link as RouterLink} from 'react-router-dom';\r\nimport {useHistory } from \"react-router-dom\"\r\n\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport {useAuth} from '../Contexts/AuthContext'\r\n\r\nconst MyLink = React.forwardRef((props, ref) => <RouterLink innerRef={ref} {...props} />);\r\n\r\n\r\nfunction MadeWithLove() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'InterArctivo '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        CONACYT 2021\r\n      </Link>      \r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  '@global': {\r\n    body: {\r\n      backgroundColor: theme.palette.common.white,\r\n    },\r\n  },\r\n  toolbarButtons: {\r\n    marginLeft: \"auto\",\r\n    marginRight: 5\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function ForgotPassword() {\r\n  const classes = useStyles();\r\n\r\n  const emailRef = useRef();\r\n \r\n\r\n  const {resetPassword} = useAuth();\r\n  const [error, setError] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [loading,setLoading] = useState(false);\r\n  \r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n  \r\n    try{\r\n      setError('')\r\n      setLoading(true)\r\n      \r\n      await resetPassword(emailRef.current.value)\r\n      setMessage(\"La solicitud se realizó exitosamente. Checa el inbox de tu correo.\")\r\n    }catch{\r\n      setError('Falla al intentar resetear la contraseña')\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">        \r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n      >        \r\n          <IconButton \r\n          className={classes.toolbarButtons} \r\n          color=\"inherit\" \r\n          aria-label=\"Back to home\" \r\n          onClick={()=>(window.location=\"/\")}>\r\n          <HomeIcon />\r\n          </IconButton>\r\n      </AppBar>\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n         Resetear contraseña\r\n        </Typography>\r\n        {error && <Alert severity=\"error\">{error}</Alert>}\r\n        {message && <Alert severity=\"success\">{message}</Alert>}\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Correo electronico\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailRef}\r\n          />         \r\n      \r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            disabled={loading}\r\n            \r\n          >\r\n            enviar correo\r\n          </Button>\r\n\r\n          <Grid container>\r\n            <Grid item xs>\r\n             \r\n            </Grid>\r\n            <Grid item>\r\n              <Link to=\"/signUp\" component={MyLink} variant=\"body2\">\r\n                {\"No tienes una cuenta? Registrate\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <MadeWithLove />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}","import React, {useRef,useState,useEffect} from 'react';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { Link as RouterLink, withRouter } from 'react-router-dom';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport {useAuth} from '../Contexts/AuthContext'\r\nimport {useHistory } from \"react-router-dom\"\r\nimport {firestore} from '../firebase'\r\n\r\n\r\nconst MyLink = React.forwardRef((props, ref) => <RouterLink innerRef={ref} {...props} />);\r\n\r\n\r\n\r\nfunction Copyright() {\r\n  return (\r\n    \r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'Division de estudios de '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        posgrado\r\n      </Link>\r\n      {' e investigacion.'}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function UpdateProfile() {\r\n  const classes = useStyles();\r\n\r\n  \r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const confirmPasswordRef = useRef();\r\n  const fNameRef = useRef();\r\n  const lNameRef = useRef();\r\n  const birthdayRef = useRef();\r\n  const sexRef = useRef();\r\n\r\n  const {currentUser,updatePassword, updateEmail} = useAuth();\r\n  const [error, setError] = useState('');\r\n  const [loading,setLoading] = useState(false);\r\n  const [userData,setUserData] = useState({email:'',fname:'',lname:'',sex:'',birthday:''});\r\n  const history = useHistory();\r\n\r\n  const handleChange = (e) => {\r\n    setUserData({\r\n      ...userData,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n    \r\n\r\n   function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if(passwordRef.current.value !== confirmPasswordRef.current.value){\r\n      return setError('Las contraseñas no coinciden')\r\n    }\r\n\r\n    const promises=[]\r\n    setLoading(true)\r\n    setError('')\r\n\r\n    if (emailRef.current.value !== currentUser.email){\r\n        promises.push(updateEmail(emailRef.current.value))\r\n        promises.push(firestore.collection('users').doc(currentUser.uid).update({email:emailRef.current.value}))\r\n\r\n\r\n    }\r\n    if(passwordRef.current.value){\r\n        promises.push(updatePassword(passwordRef.current.value))\r\n    }\r\n\r\n    promises.push(firestore.collection('users').doc(currentUser.uid).update({\r\n      fname: fNameRef.current.value,\r\n      lname:lNameRef.current.value,\r\n      sex:sexRef.current.value,\r\n      birthday:birthdayRef.current.value,\r\n    }))\r\n\r\n    Promise.all(promises).then(()=>{\r\n        history.push('/excercises')        \r\n    }).catch(()=>{\r\n        setError(\"la actualizacion del perfil de usuario ha fallado\")\r\n    }).finally(()=>{\r\n        setLoading(false)\r\n    })\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n   // setTimeout(() => {    \r\n      if(currentUser){\r\n        firestore.collection('users').doc(currentUser.uid).get().then(response =>{\r\n         setUserData(response.data())\r\n        },(error =>{\r\n          console.log(error.message)\r\n        }))\r\n      }\r\n\r\n    //}, 1000);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  \r\n\r\n  return (\r\n  \r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n         Editar Cuenta\r\n        </Typography>\r\n        \r\n        {error && <Alert severity=\"error\">{error}</Alert>}\r\n        <form onSubmit={handleSubmit} className={classes.form} >\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"fname\"\r\n                variant=\"outlined\"\r\n                //required\r\n                fullWidth\r\n                id=\"fname\"\r\n                label=\"fname\"\r\n                autoFocus\r\n               inputRef={fNameRef}\r\n               value={userData.fname}\r\n               onChange={handleChange}\r\n               disabled={true}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                //required\r\n                fullWidth\r\n                id=\"lname\"\r\n                label=\"Apellidos\"\r\n                name=\"lname\"\r\n                autoComplete=\"lname\"\r\n                inputRef={lNameRef}\r\n                value={userData.lname}\r\n                onChange={handleChange}\r\n                disabled={true}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Correo electronico\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                inputRef={emailRef}\r\n                value={userData.email}\r\n                onChange={handleChange}\r\n                disabled={false}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"date\"\r\n                label=\"fecha de nacimiento (DD/MM/AAAA)\"\r\n                type=\"date\"\r\n                name=\"birthday\" \r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}              \r\n                inputRef={birthdayRef}\r\n                value={userData.birthday}\r\n                onChange={handleChange}\r\n                disabled={true}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"Sex\"\r\n                select\r\n                required\r\n                fullWidth\r\n                label=\"Sexo\"\r\n                name=\"sex\"            \r\n                variant=\"outlined\"\r\n                inputRef={sexRef}\r\n                value={userData.sex}\r\n                onChange={handleChange}\r\n                disabled={true}\r\n              >\r\n                <MenuItem value={\"Masculino\"}>Masculino</MenuItem>\r\n                <MenuItem value={\"Femenino\"}>Femenino</MenuItem> \r\n              </TextField>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"               \r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Contraseña\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                inputRef={passwordRef}\r\n                placeholder=\"Dejar en blanco para mantener contraseña.\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"              \r\n                fullWidth\r\n                name=\"confirmpassword\"\r\n                label=\"Comfirma contraseña\"\r\n                type=\"password\"\r\n                id=\"confirmpassword\"\r\n                inputRef={confirmPasswordRef}\r\n                placeholder=\"Dejar en blanco para mantener contraseña.\"\r\n                \r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            disabled={loading}\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Aplicar cambios\r\n          </Button>\r\n\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"            \r\n            component={RouterLink} to={\"/excercises\"}\r\n          >\r\n           Cancelar\r\n          </Button>\r\n       \r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n   \r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/velo.afd31f21.jpg\";","export default __webpack_public_path__ + \"static/media/mru.890686f6.jpg\";","export default __webpack_public_path__ + \"static/media/mrua.b37e10af.jpg\";","export default __webpack_public_path__ + \"static/media/caida.dbb4d406.png\";","export default __webpack_public_path__ + \"static/media/dinamica.36e78a47.png\";","export default __webpack_public_path__ + \"static/media/reposo.469fc369.PNG\";","export default __webpack_public_path__ + \"static/media/segunda.a87aecb9.jpg\";","export default __webpack_public_path__ + \"static/media/terceraley.e4aa0f6d.jpg\";","import React, { useState, useEffect } from \"react\"\nimport { firestore } from '../firebase'\n\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\n\nimport BallotIcon from '@material-ui/icons/Ballot';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport { Box } from '@material-ui/core';\n\nimport image1 from \"../resources/velo.jpg\";\nimport image2 from \"../resources/mru.jpg\";\nimport image3 from \"../resources/mrua.jpg\";\nimport image4 from \"../resources/caida.png\";\nimport image5 from \"../resources/dinamica.png\";\nimport image6 from \"../resources/reposo.PNG\";\nimport image7 from \"../resources/segunda.jpg\";\nimport image8 from \"../resources/terceraley.jpg\";\n\nimport Alert from '@material-ui/lab/Alert';\n\nimport { useAuth } from '../Contexts/AuthContext'\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom'\n\n\nconst MyLink = React.forwardRef((props, ref) => <RouterLink innerRef={ref} {...props} />);\n\n\n\nfunction FooterText() {\n\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        División de estudios de posgrado\n      </Link>\n      {' e investigacion '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  toolbarButtons: {\n    marginLeft: \"auto\",\n    marginRight: -12\n  },\n  introSection: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(3, 0, 0),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    //height: '45%',\n    paddingBottom: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  cardactionarea: {\n    height: '100%'\n    //paddingTop:\n  },\n  cardFooter: {\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\n    textAlign: 'center',\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  marginAutoContainer: {\n    width: 500,\n    height: 80,\n    display: 'flex',\n  },\n  marginAutoItem: {\n    margin: theme.spacing(1),\n  },\n  alignItemsAndJustifyContent: {\n    width: 500,\n    height: 80,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n}));\n\n/*<div className={classes.heroButtons}>\n<Grid container spacing={2} justify=\"center\">\n  <Grid item>\n    <Button variant=\"contained\" color=\"primary\">\n      Main call to action\n    </Button>\n  </Grid>\n  <Grid item>\n    <Button variant=\"outlined\" color=\"primary\">\n      Secondary action\n    </Button>\n  </Grid>\n</Grid>\n</div>*/\n\n\nconst cinematicCards = [\n  {\n    title: 'Tema 1-1',\n\n    description: ['Concepto de velocidad'],\n    dificulty: 'Baja',\n    exerciselink: \"/1_1\",\n    buttonVariant: 'outlined',\n    image: image1\n  },\n  {\n    title: 'Tema 1-2',\n\n    description: [\n      ' Movimiento rectilíneo uniforme',\n    ],\n    dificulty: 'Media',\n    exerciselink: \"/1_2\",\n    buttonVariant: 'contained',\n    hasButton: true,\n    image: image2\n  },\n  {\n    title: 'Tema 1-3',\n\n    description: [\n      'Movimiento rectilíneo uniforme variado.',\n    ],\n    dificulty: 'media',\n    exerciselink: \"/1_3\",\n    buttonVariant: 'outlined',\n    image: image3\n\n  },\n  {\n    title: 'Tema 1-4',\n\n    description: [\n      'Movimiento vertical de caída libre',\n    ],\n    dificulty: 'media',\n    exerciselink: \"/1_4\",\n    buttonVariant: 'outlined',\n    image: image4\n\n  },\n\n\n];\n\nconst dinamicCards = [\n\n  {\n    title: 'Tema 2-1',\n\n    description: [\n      'Introducción a la dinámica',\n    ],\n    dificulty: 'media',\n    exerciselink: \"/2_1\",\n    buttonVariant: 'outlined',\n    image: image5\n\n  },\n  {\n    title: 'Tema 2-2',\n\n    description: [\n      'Primera ley de Newton (Ley de inercia)',\n    ],\n    dificulty: 'baja',\n    exerciselink: \"/2_2\",\n    buttonVariant: 'outlined',\n    image: image6\n\n  },\n  {\n    title: 'Tema 2-3',\n\n    description: [\n      'Segunda ley de Newton (principio fundamental).',\n    ],\n    dificulty: 'Alta',\n    exerciselink: \"/2_3\",\n    buttonVariant: 'outlined',\n    image: image7\n\n  },\n  {\n    title: 'Tema 2-4',\n\n    description: [\n      'Tercera ley de Newton (principio de acción y reacción).',\n    ],\n    dificulty: 'baja',\n    exerciselink: \"/2_4\",\n    buttonVariant: 'outlined',\n    image: image8\n\n  },\n\n\n\n\n];\n\n\n\n\nexport default function Album() {\n  const classes = useStyles();\n\n  const [error, setError] = useState(\"\");\n  const { currentUser, logout } = useAuth();\n  const [userData, setUserData] = useState({ email: '', fname: '', lname: '', sex: '', birthday: '' });\n  const history = useHistory();\n\n  useEffect(() => {\n    // setTimeout(() => {    \n    if (currentUser) {\n      firestore.collection('users').doc(currentUser.uid).get().then(response => {\n        setUserData(response.data())\n      }, (error => {\n        console.log(error.message)\n      }))\n    }\n\n    //}, 1000);\n    // eslint-disable-next-line\n  }, []);\n\n\n  async function handleLogout() {\n    setError(\"\");\n\n    try {\n      await logout();\n      //history.push(\"/login\")\n    } catch {\n      setError(\"Ocurrio una falla al intentar salir\")\n\n    }\n\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <BallotIcon className={classes.icon} />\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\n            Area de ejercicios\n          </Typography>\n\n\n\n          <IconButton\n            className={classes.toolbarButtons}\n            color=\"inherit\"\n            aria-label=\"Back to home\"\n            component={RouterLink} to={\"/userprofile\"}\n          >\n            <AccountBoxIcon />\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              Perfil\n            </Typography>\n\n          </IconButton>\n\n\n          <IconButton\n            className={classes.toolbarButtons}\n            color=\"inherit\"\n            aria-label=\"Back to home\"\n            onClick={handleLogout}>\n            <ExitToAppIcon />\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              Salir\n            </Typography>\n\n          </IconButton>\n\n\n\n\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* intro unit */}\n        <div className={classes.introSection}>\n          <Container maxWidth=\"sm\">\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Ejercicios de fisica en AR\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n\n              Hola <strong>{userData.fname}</strong>, bienvenid@ a FisicARtivo!  {'\\n'} Selecciona una variedad de subtemas para aprender fundamentos y propiedades básicas de física.\n              Recuerda que puedes activar el modo de realidad aumentada (AR) para mejorar tu experiencia.\n            </Typography>\n\n          </Container>\n        </div>\n\n\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n\n          <Box component=\"span\" display=\"block\" p={1} m={1} opacity={0.5} bgcolor=\"#D8D8D8\">\n\n            <Typography variant=\"h4\" style={{ paddingBottom: '20px' }} color=\"textPrimary\" align=\"center\">Temas de cinemática</Typography>\n\n            {/* End hero unit */}\n            <Grid container spacing={4}>\n              {cinematicCards.map(card => (\n                <Grid item key={card.title} xs={6} sm={6} md={3}>\n                  <CardActionArea onClick={() => (window.location = card.exerciselink)} className={classes.cardactionarea}>\n\n                    <Card className={classes.card}>\n\n                      <CardMedia\n                        className={classes.cardMedia}\n                        image={card.image}\n                        title=\"Image title\"\n                      />\n                      <CardContent className={classes.cardContent}>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          {card.title}\n                        </Typography>\n                        <Typography align=\"center\">\n                          {card.description}\n                        </Typography>\n                      </CardContent>\n\n                      {/*<Box className={classes.cardFooter}>\n                        <Typography variant=\"h6\" >\n                          Dificultad:  {card.dificulty}\n                        </Typography>\n                        </Box>*/}\n\n                    </Card>\n                  </CardActionArea>\n                </Grid>\n              ))}\n            </Grid>\n\n          </Box>\n\n        </Container>\n\n\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n\n          <Box component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"#D8D8D8\">\n\n            <Typography variant=\"h4\" style={{ paddingBottom: '20px' }} color=\"textPrimary\" align=\"center\">Temas de dinámica</Typography>\n\n            {/* End hero unit */}\n            <Grid container spacing={4}>\n              {dinamicCards.map(card => (\n                <Grid item key={card.title} xs={6} sm={6} md={3}>\n                  <CardActionArea onClick={() => (window.location = card.exerciselink)} className={classes.cardactionarea}>\n\n                    <Card className={classes.card}>\n\n                      <CardMedia\n                        className={classes.cardMedia}\n                        image={card.image}\n                        title=\"Image title\"\n                      />\n                      <CardContent className={classes.cardContent}>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          {card.title}\n                        </Typography>\n                        <Typography align=\"center\">\n                          {card.description}\n                        </Typography>\n                      </CardContent>\n\n                      {/*<Box className={classes.cardFooter}>\n                        <Typography variant=\"h6\" >\n                          Dificultad:  {card.dificulty}\n                        </Typography>\n                        </Box>*/}\n\n                    </Card>\n                  </CardActionArea>\n                </Grid>\n              ))}\n            </Grid>\n\n          </Box>\n\n        </Container>\n\n\n        <div className={classes.introSection}>\n          <Container maxWidth=\"sm\">\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              Tambien te invitamos a que nos ofrezcas sugerencias y observaciones de tu experiencia. Nos ayudaria mucho.\n            </Typography>\n\n            <Box textAlign='center' maxWidth=\"sm\" component=\"main\" >\n\n              {/* <Button onClick={() => (window.location = \"/survey-teacher\")} className={classes.marginAutoItem} size='medium' variant=\"contained\" color=\"primary\">\n                <Typography variant=\"h6\">Encuesta para maestros</Typography>\n              </Button> */}\n\n              <Button onClick={() => (window.location = \"/survey-student\")} className={classes.marginAutoItem} size='medium' variant=\"contained\" color=\"primary\">\n                <Typography variant=\"h6\">Encuesta para estudiantes</Typography>\n              </Button>\n\n            </Box>\n\n\n          </Container>\n        </div>\n\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Proyecto FisicARtivo\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Instituto Nacional De Mexico Campus Culiacan.\n        </Typography>\n        <FooterText />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport BallotIcon from '@material-ui/icons/Ballot';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport { Box } from '@material-ui/core';\r\n\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport * as SurveyJS from \"survey-react\";\r\nimport \"survey-react/survey.css\";\r\n\r\nimport { useAuth } from '../Contexts/AuthContext'\r\nimport { firestore } from '../firebase'\r\n\r\nimport pedagogic_survey from './viability_survey.json'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  toolbarButtons: {\r\n    marginLeft: \"auto\",\r\n    marginRight: -12\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    //height: '45%',\r\n    paddingBottom: '56.25%', // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  cardactionarea: {\r\n    height: '100%'\r\n    //paddingTop:\r\n  },\r\n  cardFooter: {\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n    textAlign: 'center',\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\n\r\nvar surveyJSON = {\r\n  title: \"Tell us, what technologies do you use?\", pages: [\r\n    {\r\n      name: \"page1\", questions: [\r\n        { type: \"radiogroup\", choices: [\"Yes\", \"No\"], isRequired: true, name: \"frameworkUsing\", title: \"Do you use any front-end framework like Bootstrap?\" },\r\n        { type: \"checkbox\", choices: [\"Bootstrap\", \"Foundation\"], hasOther: true, isRequired: true, name: \"framework\", title: \"What front-end framework do you use?\", visibleIf: \"{frameworkUsing} = 'Yes'\" }\r\n      ]\r\n    },\r\n    {\r\n      name: \"page2\", questions: [\r\n        { type: \"radiogroup\", choices: [\"Yes\", \"No\"], isRequired: true, name: \"mvvmUsing\", title: \"Do you use any MVVM framework?\" },\r\n        { type: \"checkbox\", choices: [\"AngularJS\", \"KnockoutJS\", \"React\"], hasOther: true, isRequired: true, name: \"mvvm\", title: \"What MVVM framework do you use?\", visibleIf: \"{mvvmUsing} = 'Yes'\" }]\r\n    },\r\n    {\r\n      name: \"page3\", questions: [\r\n        { type: \"comment\", name: \"about\", title: \"Please tell us about your main requirements for Survey library\" }]\r\n    }\r\n  ]\r\n\r\n}\r\n\r\nvar atest = {\r\n  \"pages\": [\r\n    {\r\n      \"name\": \"page1\",\r\n      \"elements\": [\r\n        {\r\n          \"type\": \"rating\",\r\n          \"name\": \"question7\"\r\n        },\r\n        {\r\n          \"type\": \"checkbox\",\r\n          \"name\": \"question1\",\r\n          \"choices\": [\r\n            \"item1\",\r\n            \"item2\",\r\n            \"item3\"\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"text\",\r\n          \"name\": \"question2\"\r\n        },\r\n        {\r\n          \"type\": \"panel\",\r\n          \"name\": \"panel1\",\r\n          \"elements\": [\r\n            {\r\n              \"type\": \"expression\",\r\n              \"name\": \"question6\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"matrixdynamic\",\r\n          \"name\": \"question5\",\r\n          \"columns\": [\r\n            {\r\n              \"name\": \"Column 1\"\r\n            },\r\n            {\r\n              \"name\": \"Column 2\"\r\n            },\r\n            {\r\n              \"name\": \"Column 3\"\r\n            }\r\n          ],\r\n          \"choices\": [\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"matrixdropdown\",\r\n          \"name\": \"question4\",\r\n          \"columns\": [\r\n            {\r\n              \"name\": \"Column 1\"\r\n            },\r\n            {\r\n              \"name\": \"Column 2\"\r\n            },\r\n            {\r\n              \"name\": \"Column 3\"\r\n            }\r\n          ],\r\n          \"choices\": [\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n          ],\r\n          \"rows\": [\r\n            \"Row 1\",\r\n            \"Row 2\"\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"matrix\",\r\n          \"name\": \"question3\",\r\n          \"columns\": [\r\n            \"Column 1\",\r\n            \"Column 2\",\r\n            \"Column 3\"\r\n          ],\r\n          \"rows\": [\r\n            \"Row 1\",\r\n            \"Row 2\"\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"page2\",\r\n      \"elements\": [\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question8\"\r\n        }\r\n      ],\r\n      \"visibleIf\": \"{question1} = ['item2']\"\r\n    }\r\n  ]\r\n}\r\n\r\nvar surveySample = {\r\n  \"completedHtml\": \"<h3>Gracias por darnos tu comentarios.</h3> <h4>Tus opiniones e ideas nos ayudaran a mejorar, Gracias!</h4>\",\r\n  \"completedHtmlOnCondition\": [\r\n    {\r\n      \"expression\": \"{experience_score} > 8\",\r\n      \"html\": \"<h3>Gracias por darnos tu comentarios.</h3> <h4>Nos alegra que te haya gustado tu experiencia en FisicaArtivo!</h4>\"\r\n    },\r\n    {\r\n      \"expression\": \"{experience_score} < 7\",\r\n      \"html\": \"<h3>Gracias por darnos tu comentarios.</h3> <h4> Nos esforzaremos en mejorar tu experiencia y cumplir con tus expectativas!</h4><br/>\"\r\n    }\r\n  ],\r\n  \"pages\": [\r\n    {\r\n      \"name\": \"page1\",\r\n      \"elements\": [\r\n        {\r\n          \"type\": \"rating\",\r\n          \"name\": \"experience_score\",\r\n          \"title\": \"En la escala del y al 10 como calificas tu experiencia en FisicaARtivo?\",\r\n          \"isRequired\": true,\r\n          \"rateMin\": 0,\r\n          \"rateMax\": 10,\r\n          \"minRateDescription\": \"(No me gustó)\",\r\n          \"maxRateDescription\": \"(Me gustó mucho)\"\r\n        },\r\n        {\r\n          \"type\": \"checkbox\",\r\n          \"name\": \"experience_features\",\r\n          \"visible\": false,\r\n          \"visibleIf\": \"{experience_score} >= 9\",\r\n          \"title\": \"Que caracteristicas consideras como las mas importantes en tu experiencia?\",\r\n          \"isRequired\": true,\r\n          \"validators\": [\r\n            {\r\n              \"type\": \"answercount\",\r\n              \"text\": \"Por favor selecciona 2 caracteristicas maximo\",\r\n              \"maxCount\": 2\r\n            }\r\n          ],\r\n          \"choices\": [\r\n            \"Facilidad de uso\",\r\n            \"Estabilidad\",\r\n            \"Material de aprendizaje\",\r\n            \"Capacidades de interaccion\"\r\n          ],\r\n          \"hasOther\": true,\r\n          \"otherText\": \"Otra:\",\r\n          \"colCount\": 2\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"experience_reason\",\r\n          \"visible\": false,\r\n          \"isRequired\": true,\r\n          \"visibleIf\": \"{experience_score} > 6  and {experience_score} < 9\",\r\n          \"title\": \"Cual es la razon de tu calificacion?\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"experience_sugestions\",\r\n          \"visible\": false,\r\n          \"visibleIf\": \"{experience_score} notempty\",\r\n          \"title\": \"Nos puedes dar algun comentario o sugerencia sobre tu experiencia?\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"showQuestionNumbers\": \"off\"\r\n}\r\n\r\nvar surveyforteachers_pedagogic = {\r\n  \"title\": \"Evaluación pedagógica de actividades (dirigida a maestros)\",\r\n  \"description\": \"Por favor, denos su opicion acerca de los siguientes puntos\",\r\n  \"pages\": [\r\n    {\r\n      \"name\": \"page1\",\r\n      \"elements\": [\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_1\",\r\n          \"title\": \"1. En que curso(s) es factible usar las herramientas:\",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\",\r\n          \"placeHolder\": \"Escribe aqui los cursos adecuados para usar esta herramienta\"\r\n        },\r\n        {\r\n          \"type\": \"radiogroup\",\r\n          \"name\": \"question_2\",\r\n          \"title\": \"2. ¿Qué edades tienen los estudiantes en esos cursos? \",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\",\r\n          \"choices\": [\r\n            {\r\n              \"value\": \"14_años\",\r\n              \"text\": \"14 años\"\r\n            },\r\n            {\r\n              \"value\": \"15_años\",\r\n              \"text\": \"15 años\"\r\n            },\r\n            {\r\n              \"value\": \"16_años\",\r\n              \"text\": \"16 años\"\r\n            }\r\n          ],\r\n          \"hasOther\": true,\r\n          \"otherPlaceHolder\": \"Escribe aqui\",\r\n          \"otherText\": \"Otra edad (escriba)\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_3\",\r\n          \"title\": \"3. ¿que conocimientos previos tienen los estudiantes de estos cursos?\",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\",\r\n          \"placeHolder\": \"Describir temas y conocimientos previos necesarios para realizar dicho(s) curso(s)\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_4\",\r\n          \"title\": \"4. ¿Que nivel de motivación tienen estos estudiantes al realizar estos cursos en clase? \",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\",\r\n          \"placeHolder\": \"Describir nivel de aburrimiento, entusiasmo e interes del alumnado.\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_5\",\r\n          \"title\": \"5. ¿Qué tipo de problemas ha detectado en la enseñanza de enlaces en este curso?\",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\",\r\n          \"placeHolder\": \"Por ejemplo, qué temas les resulta más difícil de entender a estos estudiantes, por qué cree que se produce el problema. \"\r\n        },\r\n        {\r\n          \"type\": \"radiogroup\",\r\n          \"name\": \"question_6\",\r\n          \"title\": \"6. ¿Cree que las herramientas mostradas ayudarían a resolver esos problemas? \",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\",\r\n          \"choices\": [\r\n            {\r\n              \"value\": \"case_yes\",\r\n              \"text\": \"Si\"\r\n            },\r\n            {\r\n              \"value\": \"case_no\",\r\n              \"text\": \"No\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_6_case_yes\",\r\n          \"visible\": false,\r\n          \"visibleIf\": \"{question_6} = 'case_yes'\",\r\n          \"title\": \"¿Qué contenidos y/o habilidades cree que las herramientas pueden ayudar a adquirir y/o mejorar?\",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_6_case_no\",\r\n          \"visible\": false,\r\n          \"visibleIf\": \"{question_6} = 'case_no'\",\r\n          \"title\": \"¿Qué problemas detecta?, ¿Puede sugerir cambios que permitiesen mejorar las actividades mostradas?\",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_7\",\r\n          \"title\": \"7. Cómo integraría una o varias de estas actividades en sus cursos (dentro o fuera del aula de clase / como actividades ordinarias o extraordinarias en su curso).\",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_8\",\r\n          \"title\": \"8. ¿Cuánto tiempo le dedicaría a este tipo de actividad? \\n \\n\",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_9\",\r\n          \"title\": \"9. ¿Cuántas repeticiones de cada actividad cree que sería necesario que sus alumnos hicieran? \",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\"\r\n        },\r\n        {\r\n          \"type\": \"radiogroup\",\r\n          \"name\": \"question_10\",\r\n          \"title\": \"10. ¿Le parece conveniente que luego de la actividad utilizando la tecnología de RA los estudiantes utilizaran un periodo de reflexión para comentar lo que aprendieron?\",\r\n          \"isRequired\": true,\r\n          \"requiredErrorText\": \"Esta pregunta es obligatoria\",\r\n          \"choices\": [\r\n            {\r\n              \"value\": \"case_yes\",\r\n              \"text\": \"Si\"\r\n            },\r\n            {\r\n              \"value\": \"case_no\",\r\n              \"text\": \"No\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"matrix\",\r\n          \"name\": \"question_11\",\r\n          \"title\": \"11. Evaluación de usabilidad de la aplicación:\",\r\n          \"description\": \"Respecto a la usabilidad, responda los siguientes puntos.\",\r\n          \"columns\": [\r\n            {\r\n              \"value\": \"likert_1\",\r\n              \"text\": \"Totalmente en desacuerdo\"\r\n            },\r\n            {\r\n              \"value\": \"likert_2\",\r\n              \"text\": \"Algo en desacuerdo\"\r\n            },\r\n            {\r\n              \"value\": \"likert_3\",\r\n              \"text\": \"Ni en acuerdo ni en desacuerdo\"\r\n            },\r\n            {\r\n              \"value\": \"likert_4\",\r\n              \"text\": \"Algo de acuerdo\"\r\n            },\r\n            {\r\n              \"value\": \"likert_5\",\r\n              \"text\": \"Totalmente de acuerdo\"\r\n            }\r\n          ],\r\n          \"rows\": [\r\n            {\r\n              \"value\": \"Row_1\",\r\n              \"text\": \"Es fácil de usar\"\r\n            },\r\n            {\r\n              \"value\": \"Row_2\",\r\n              \"text\": \"Le resultó atractiva\"\r\n            },\r\n            {\r\n              \"value\": \"Row_3\",\r\n              \"text\": \"Le parecio útil\"\r\n            },\r\n            {\r\n              \"value\": \"Row_4\",\r\n              \"text\": \"Le gustaría usarlo en cursos\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"question_12\",\r\n          \"title\": \"¿Algún comentario o sugerencia que desee agregar?\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"showQuestionNumbers\": \"off\"\r\n}\r\n\r\n\r\n\r\n\r\nvar defaultThemeColors = SurveyJS\r\n  .StylesManager\r\n  .ThemeColors[\"default\"];\r\ndefaultThemeColors[\"$main-color\"] = \"#5475ec\";\r\ndefaultThemeColors[\"$main-hover-color\"] = \"#2c5bdd\";\r\ndefaultThemeColors[\"$text-color\"] = \"#4a4a4a\";\r\ndefaultThemeColors[\"$header-color\"] = \"#5475ec\";\r\n\r\ndefaultThemeColors[\"$header-background-color\"] = \"#4a4a4a\";\r\ndefaultThemeColors[\"$body-container-background-color\"] = \"#f8f8f8\";\r\n\r\n\r\n\r\nexport default function SurveyPage() {\r\n\r\n  const classes = useStyles();\r\n\r\n  const { currentUser } = useAuth();\r\n\r\n  SurveyJS.StylesManager.applyTheme(\"default\");\r\n\r\n  //var modelSurvey = new SurveyJS.Model(surveySample);\r\n  var modelSurvey = new SurveyJS.Model(pedagogic_survey);\r\n  var survey_name = \"survey_pedagogico_maestros\"\r\n\r\n  function checkUserSurveyData() {\r\n\r\n    if (currentUser) {\r\n      firestore.collection('users').doc(currentUser.uid).collection('surveys').doc('survey_1').get().then(response => {\r\n\r\n\r\n        if (response.exists) {\r\n\r\n\r\n        }\r\n\r\n\r\n      }, (error => {\r\n        console.log(error.message)\r\n      }))\r\n    }\r\n  }\r\n\r\n\r\n  function sendDataToServer() {\r\n    modelSurvey.onComplete.add(result => {\r\n      if (currentUser) {\r\n\r\n        var dateObj = new Date();\r\n        var month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n        var day = dateObj.getUTCDate();\r\n        var year = dateObj.getUTCFullYear();\r\n        var hours = dateObj.getUTCHours();\r\n        var minutes = dateObj.getUTCMinutes();\r\n\r\n        var doctag = (survey_name + \"-\" + year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes).toString();\r\n        firestore.collection('users').doc(currentUser.uid).collection('surveys').doc(doctag).set(result.data);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <BallotIcon className={classes.icon} />\r\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n            Encuesta de experiencia\r\n          </Typography>\r\n\r\n\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container className={classes.heroContent} >\r\n        <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\"> Por favor ayudanos respondiendo esta corta encuesta.</Typography>\r\n        <SurveyJS.Survey model={modelSurvey} onComplete={sendDataToServer} />\r\n      </Container>\r\n    </React.Fragment>\r\n\r\n  );\r\n}","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport BallotIcon from '@material-ui/icons/Ballot';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport { Box } from '@material-ui/core';\r\n\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport * as SurveyJS from \"survey-react\";\r\nimport \"survey-react/survey.css\";\r\n\r\nimport { useAuth } from '../Contexts/AuthContext'\r\nimport { firestore } from '../firebase'\r\n\r\n\r\nimport motivational_survey from './motivational_survey.json'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  toolbarButtons: {\r\n    marginLeft: \"auto\",\r\n    marginRight: -12\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    //height: '45%',\r\n    paddingBottom: '56.25%', // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  cardactionarea: {\r\n    height: '100%'\r\n    //paddingTop:\r\n  },\r\n  cardFooter: {\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\r\n    textAlign: 'center',\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\n\r\nvar surveySample = {\r\n  \"completedHtml\": \"<h3>Gracias por darnos tu comentarios.</h3> <h4>Tus opiniones e ideas nos ayudaran a mejorar, Gracias!</h4>\",\r\n  \"completedHtmlOnCondition\": [\r\n    {\r\n      \"expression\": \"{experience_score} > 8\",\r\n      \"html\": \"<h3>Gracias por darnos tu comentarios.</h3> <h4>Nos alegra que te haya gustado tu experiencia en FisicaArtivo!</h4>\"\r\n    },\r\n    {\r\n      \"expression\": \"{experience_score} < 7\",\r\n      \"html\": \"<h3>Gracias por darnos tu comentarios.</h3> <h4> Nos esforzaremos en mejorar tu experiencia y cumplir con tus expectativas!</h4><br/>\"\r\n    }\r\n  ],\r\n  \"pages\": [\r\n    {\r\n      \"name\": \"page1\",\r\n      \"elements\": [\r\n        {\r\n          \"type\": \"rating\",\r\n          \"name\": \"experience_score\",\r\n          \"title\": \"En la escala del y al 10 como calificas tu experiencia en FisicaARtivo?\",\r\n          \"isRequired\": true,\r\n          \"rateMin\": 0,\r\n          \"rateMax\": 10,\r\n          \"minRateDescription\": \"(No me gustó)\",\r\n          \"maxRateDescription\": \"(Me gustó mucho)\"\r\n        },\r\n        {\r\n          \"type\": \"checkbox\",\r\n          \"name\": \"experience_features\",\r\n          \"visible\": false,\r\n          \"visibleIf\": \"{experience_score} >= 9\",\r\n          \"title\": \"Que caracteristicas consideras como las mas importantes en tu experiencia?\",\r\n          \"isRequired\": true,\r\n          \"validators\": [\r\n            {\r\n              \"type\": \"answercount\",\r\n              \"text\": \"Por favor selecciona 2 caracteristicas maximo\",\r\n              \"maxCount\": 2\r\n            }\r\n          ],\r\n          \"choices\": [\r\n            \"Facilidad de uso\",\r\n            \"Estabilidad\",\r\n            \"Material de aprendizaje\",\r\n            \"Capacidades de interaccion\"\r\n          ],\r\n          \"hasOther\": true,\r\n          \"otherText\": \"Otra:\",\r\n          \"colCount\": 2\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"experience_reason\",\r\n          \"visible\": false,\r\n          \"isRequired\": true,\r\n          \"visibleIf\": \"{experience_score} > 6  and {experience_score} < 9\",\r\n          \"title\": \"Cual es la razon de tu calificacion?\"\r\n        },\r\n        {\r\n          \"type\": \"comment\",\r\n          \"name\": \"experience_sugestions\",\r\n          \"visible\": false,\r\n          \"visibleIf\": \"{experience_score} notempty\",\r\n          \"title\": \"Nos puedes dar algun comentario o sugerencia sobre tu experiencia?\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"showQuestionNumbers\": \"off\"\r\n}\r\n\r\n\r\n\r\nvar defaultThemeColors = SurveyJS\r\n  .StylesManager\r\n  .ThemeColors[\"default\"];\r\ndefaultThemeColors[\"$main-color\"] = \"#5475ec\";\r\ndefaultThemeColors[\"$main-hover-color\"] = \"#2c5bdd\";\r\ndefaultThemeColors[\"$text-color\"] = \"#4a4a4a\";\r\ndefaultThemeColors[\"$header-color\"] = \"#5475ec\";\r\n\r\ndefaultThemeColors[\"$header-background-color\"] = \"#4a4a4a\";\r\ndefaultThemeColors[\"$body-container-background-color\"] = \"#f8f8f8\";\r\n\r\n\r\n\r\nexport default function SurveyPage() {\r\n\r\n  const classes = useStyles();\r\n\r\n  const { currentUser } = useAuth();\r\n\r\n  SurveyJS.StylesManager.applyTheme(\"default\");\r\n\r\n  var modelSurvey = new SurveyJS.Model(surveySample);\r\n  //var modelSurvey = new SurveyJS.Model(motivational_survey);\r\n  var survey_name = \"survey_retro_students\"\r\n\r\n  function checkUserSurveyData() {\r\n\r\n    if (currentUser) {\r\n      firestore.collection('users').doc(currentUser.uid).collection('surveys').doc('survey_1').get().then(response => {\r\n\r\n\r\n        if (response.exists) {\r\n\r\n\r\n        }\r\n\r\n\r\n      }, (error => {\r\n        console.log(error.message)\r\n      }))\r\n    }\r\n  }\r\n\r\n\r\n  function sendDataToServer() {\r\n    modelSurvey.onComplete.add(result => {\r\n      if (currentUser) {\r\n\r\n        var dateObj = new Date();\r\n        var month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n        var day = dateObj.getUTCDate();\r\n        var year = dateObj.getUTCFullYear();\r\n        var hours = dateObj.getUTCHours();\r\n        var minutes = dateObj.getUTCMinutes();\r\n\r\n        var doctag = (survey_name + \"-\" + year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes).toString();\r\n        firestore.collection('users').doc(currentUser.uid).collection('surveys').doc(doctag).set(result.data);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <BallotIcon className={classes.icon} />\r\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n            Encuesta de experiencia\r\n          </Typography>\r\n\r\n\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container className={classes.heroContent} >\r\n        <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\"> Por favor ayudanos respondiendo esta corta encuesta.</Typography>\r\n        <SurveyJS.Survey model={modelSurvey} onComplete={sendDataToServer} />\r\n      </Container>\r\n    </React.Fragment>\r\n\r\n  );\r\n}","//From https://medium.com/@ali.atwa/getting-started-with-material-ui-for-react-59c82d9ffd93\nimport React from 'react';\nimport { withRouter } from 'react-router-dom'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    background: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n  selectedItem: {\n    background: \"blue\"\n  }\n});\nfunction getItems() {\n  var json = {\n    \"list\": [{\n      \"id\": 0,\n      \"title\": \"Templates\",\n      \"items\": [\n        {     \n          \"id\": 1,    \n        \"name\": \"Menu principal\",\n        \"url\": 'excercises'\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Temas Cinematica\",\n            \"subitems\": [{\n              \"id\": 3,\n              \"name\": \"Tema 1-1\",\n              \"url\": '1_1'\n            },\n            {\n              \"id\": 4,\n              \"name\": \"Tema 1-2\",\n              \"url\": '1_2'\n            },\n          {\n            \"id\": 5,\n            \"name\": \"Tema 1-3\",\n            \"url\": '1_3'\n          },{\n            \"id\": 6,\n            \"name\": \"Tema 1-4\",\n            \"url\": '1_4'\n          }]\n      },\n      {\n        \"id\": 7,\n        \"name\": \"Temas de Dinamica\",\n            \"subitems\": [{\n              \"id\": 8,\n              \"name\": \"Tema 2-1\",\n              \"url\": '2_1'\n            },\n            {\n              \"id\": 9,\n              \"name\": \"Tema 2-2\",\n              \"url\": '2_2'\n            },\n          {\n            \"id\": 10,\n            \"name\": \"Tema 2-3\",\n            \"url\": '2_3'\n          },{\n            \"id\": 11,\n            \"name\": \"Tema 2-4\",\n            \"url\": '2_4'\n          }]\n      }\n      ]\n    }\n    ]\n  };\n  return json;\n}\n//const [selectedIndex, setSelectedIndex] = React.useState(1);\n\nclass SidebarList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      2: true,\n      7: true\n    };\n  }  \n  \n  handleClick = (e) => {\n    this.setState({ [e]: !this.state[e] });\n  };\n  handleClickLink = (url) => {\n    //this.props.history.push(url);\n    window.location = url\n  }\n  render() {\n    const items = getItems();\n    const { classes } = this.props\n    return (\n      <div>\n        {items.list.map((list) => {\n          return (\n            <List className={classes.root} key={list.id}>\n              {list.items.map((item) => {\n                return (\n                  <div key={item.id}>\n                    {item.subitems != null ? (\n                      <div key={item.id}>\n                        <ListItem button key={item.id} onClick={() => this.handleClick(item.id)} >\n                          <ListItemText primary={item.name} />\n                          {this.state[item.id] ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse key={list.items.id} component=\"li\" in={this.state[item.id]} timeout=\"auto\" unmountOnExit>\n                          <List disablePadding>\n                            {item.subitems.map((sitem) => {\n                              return (\n                                <ListItem \n                                selected={sitem.url===this.props.location.pathname ? true : false}\n                                button key={sitem.id} className={classes.nested} onClick={() => this.handleClickLink(sitem.url)}>\n                                  <ListItemText key={sitem.id} primary={sitem.name} />\n                                </ListItem>\n                              )\n                            })}\n                          </List>\n                        </Collapse> </div>\n                    ) : (\n                        <ListItem \n                          button onClick={() => this.handleClickLink(item.url)} key={item.id}>   \n                          <ListItemText primary={item.name}  />  \n                        </ListItem>)}\n                  </div>\n\n                )\n              })}\n              <Divider key={list.id} absolute />\n            </List>\n          )\n        })}\n      </div>\n    );\n  }\n}\nSidebarList.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\nexport default withRouter(withStyles(styles)(SidebarList));","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport HomeIcon from '@material-ui/icons/Home';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport SidebarList from '../WebComponents/SidebarList';\n\nconst drawerWidth = 200;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  toolbarButtons: {\n    marginLeft: \"auto\",\n    marginRight: -12\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  linked: {\n    textDecoration: 'none',\n    color: 'white',\n  },\n  toolbar: theme.mixins.toolbar,\n}));\n\nexport default function Main(props) {    \n  const MainContents = props.data;\n  const classes = useStyles();\n  const [open=false, setOpen] = React.useState();\n  \n  function handleDrawerOpen() {    \n    setOpen(true);\n  }\n  function handleDrawerClose() {    \n    setOpen(false);\n  }\n  return (    \n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={classes.appBar}>\n      <Toolbar>\n      <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Open drawer\"\n            onClick={open===true ? ()=>handleDrawerClose() : ()=>handleDrawerOpen()}\n          >\n            <MenuIcon />\n          </IconButton>\n        \n          <Typography variant=\"h6\" noWrap>\n              FisicARtivo        \n          </Typography>\n          <IconButton \n          className={classes.toolbarButtons} \n          color=\"inherit\" \n          aria-label=\"Back to home\" \n          onClick={()=>(window.location=\"/excercises\")}>\n          <HomeIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.toolbar} />\n        <SidebarList />\n        \n      </Drawer>\n      <main\n        className={clsx(classes.content)}\n      >\n        <div className={classes.drawerHeader} />\n                  \n          {MainContents()}            \n        \n      </main>\n    </div>\n  );\n}\n","import * as BABYLON from 'babylonjs';\nimport React, { Component } from 'react';\n\nexport type SceneEventArgs = {\n  engine: BABYLON.Engine,\n  scene: BABYLON.Scene,\n  canvas: HTMLCanvasElement\n};\n\nexport type SceneProps = {\n  engineOptions?: BABYLON.EngineOptions,\n  adaptToDeviceRatio?: boolean,\n  onSceneMount?: (args: SceneEventArgs) => void,\n  width?: number,\n  height?: number,\n  maxHeight?: number,\n  minHeight?: number\n};\n\nexport default class BabylonScene extends Component<SceneProps & React.HTMLAttributes<HTMLCanvasElement>, {}> {\n\n  // private scene: BABYLON.Scene;\n  // private engine: BABYLON.Engine;\n  // private canvas: HTMLCanvasElement;\n\n  onResizeWindow = () => {\n    if (this.engine) {\n      this.engine.resize();\n      this.forceUpdate()\n    }\n  }\n\n  componentDidMount () {\n    this.engine = new BABYLON.Engine(\n        this.canvas,\n        true,\n        this.props.engineOptions,\n        this.props.adaptToDeviceRatio\n    );\n\n    let scene = new BABYLON.Scene(this.engine);\n    this.scene = scene;\n\n    if (typeof this.props.onSceneMount === 'function') {\n      this.props.onSceneMount({\n        scene,\n        engine: this.engine,\n        canvas: this.canvas\n      });\n    } else {\n      console.error('onSceneMount function not available');\n    }\n\n    // Resize the babylon engine when the window is resized\n    window.addEventListener('resize', this.onResizeWindow);\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.onResizeWindow);\n  }\n\n  onCanvasLoaded = (c : HTMLCanvasElement) => {\n    if (c !== null) {\n      this.canvas = c;\n    }\n  }\n\n  render () {\n    // 'rest' can contain additional properties that you can flow through to canvas:\n    // (id, className, etc.)\n    const { width, height, ...rest } = this.props;\n\n    const opts: any = {};\n\n    if (width !== undefined && height !== undefined) {\n      opts.width = width;\n      opts.height = height;\n    } else {\n    //  opts.width = window.innerWidth;\n    //  opts.height = window.innerHeight;\n    }\n\n    return (\n      <canvas style={{width:'100%',height:'100%',flex:1,display:'flex'}}\n      \n        {...opts}\n        ref={this.onCanvasLoaded}\n      />\n    )\n  }\n}","\r\nimport * as BABYLON from 'babylonjs';\r\n\r\nexport function createPlayGround(scene) {\r\n\r\n    var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { height: 10, width: 10, subdivisions: 4 }, scene);\r\n    ground.visibility = 0.1;\r\n    //ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n    //ground.XRPickable =true;\r\n    var ground2 = BABYLON.MeshBuilder.CreateBox(\"ground2\", { height: -0.33, width: 10, depth: 10 }, scene);\r\n    ground2.position.set(0, 0, 0)\r\n    ground2.visibility = 1;\r\n    ground2.physicsImpostor = new BABYLON.PhysicsImpostor(ground2, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallF = BABYLON.MeshBuilder.CreateBox(\"frontwall\", { height: 5, width: 10, depth: 0.33 }, scene);\r\n    wallF.position.set(0, 2.5, 5)\r\n    wallF.visibility = 0.1;\r\n    wallF.physicsImpostor = new BABYLON.PhysicsImpostor(wallF, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallB = BABYLON.MeshBuilder.CreateBox(\"backwall\", { height: 5, width: 10, depth: 0.33 }, scene);\r\n    wallB.position.set(0, 2.5, -5)\r\n    wallB.visibility = 0.1;\r\n    wallB.physicsImpostor = new BABYLON.PhysicsImpostor(wallB, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallR = BABYLON.MeshBuilder.CreateBox(\"rightwall\", { height: 5, width: 0.33, depth: 10 }, scene);\r\n    wallR.position.set(5, 2.5, 0)\r\n    wallR.visibility = 0.1;\r\n    wallR.physicsImpostor = new BABYLON.PhysicsImpostor(wallR, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallL = BABYLON.MeshBuilder.CreateBox(\"leftwall\", { height: 5, width: 0.33, depth: 10 }, scene);\r\n    wallL.position.set(-5, 2.5, 0)\r\n    wallL.visibility = 0.1;\r\n    wallL.physicsImpostor = new BABYLON.PhysicsImpostor(wallL, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n    ground.addChild(ground2);\r\n    ground.addChild(wallF);\r\n    ground.addChild(wallB);\r\n    ground.addChild(wallR);\r\n    ground.addChild(wallL);\r\n\r\n    return ground2;\r\n\r\n}\r\n\r\nexport function createPlayGroundLarge(scene) {\r\n\r\n    var groundheight = 20;\r\n    var groundwidth = 10;\r\n\r\n\r\n    var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { height: groundheight, width: 10, subdivisions: 4 }, scene);\r\n    ground.visibility = 0.1;\r\n    //ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n    //ground.XRPickable =true;\r\n    var ground2 = BABYLON.MeshBuilder.CreateBox(\"ground2\", { height: -0.33, width: 20, depth: groundheight }, scene);\r\n    ground2.position.set(0, 0, 0)\r\n    ground2.visibility = 1;\r\n    ground2.physicsImpostor = new BABYLON.PhysicsImpostor(ground2, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallF = BABYLON.MeshBuilder.CreateBox(\"frontwall\", { height: 5, width: 10, depth: 0.33 }, scene);\r\n    wallF.position.set(0, 2.5, groundheight / 2)\r\n    wallF.visibility = 0.1;\r\n    wallF.physicsImpostor = new BABYLON.PhysicsImpostor(wallF, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallB = BABYLON.MeshBuilder.CreateBox(\"backwall\", { height: 5, width: 10, depth: 0.33 }, scene);\r\n    wallB.position.set(0, 2.5, -groundheight / 2)\r\n    wallB.visibility = 0.1;\r\n    wallB.physicsImpostor = new BABYLON.PhysicsImpostor(wallB, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallR = BABYLON.MeshBuilder.CreateBox(\"rightwall\", { height: 5, width: 0.33, depth: groundheight }, scene);\r\n    wallR.position.set(5, 2.5, 0)\r\n    wallR.visibility = 0.1;\r\n    wallR.physicsImpostor = new BABYLON.PhysicsImpostor(wallR, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n\r\n    // Add and manipulate meshes in the scene\r\n    /*var wallL = BABYLON.MeshBuilder.CreateBox(\"leftwall\",{height: 5, width: 0.33, depth: groundheight}, scene);\r\n    wallL.position.set(-5,2.5,0)\r\n    wallL.visibility=0.1;\r\n    wallL.physicsImpostor = new BABYLON.PhysicsImpostor(wallL, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });*/\r\n\r\n    ground.addChild(ground2);\r\n    ground.addChild(wallF);\r\n    ground.addChild(wallB);\r\n    ground.addChild(wallR);\r\n    //ground.addChild(wallL);\r\n\r\n    return ground2;\r\n\r\n}\r\n\r\nexport function createPlayGroundGigant(scene) {\r\n\r\n\r\n    var groundMaterial = new BABYLON.StandardMaterial(\"ground1\", scene);\r\n    groundMaterial.diffuseTexture = new BABYLON.Texture(\"textures/grass.jpg\", scene);\r\n    groundMaterial.diffuseTexture.uScale = 15;\r\n    groundMaterial.diffuseTexture.vScale = 15;\r\n    groundMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n\r\n    //    var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {height: 100, width: 100, subdivisions: 4}, scene);\r\n    //   ground.position.set(0,0,0)   \r\n    //ground.visibility=0.5;\r\n    //ground.position.y =+0.33;\r\n    //    ground.material = groundMaterial;\r\n    //ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n    //ground.XRPickable =true;\r\n\r\n\r\n    var ground2 = BABYLON.MeshBuilder.CreateBox(\"ground2\", { height: 3, width: 100, depth: 100 }, scene);\r\n    ground2.position.set(0, -1.5, 0)\r\n    ground2.visibility = 1;\r\n    ground2.physicsImpostor = new BABYLON.PhysicsImpostor(ground2, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n    ground2.material = groundMaterial;\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallF = BABYLON.MeshBuilder.CreateBox(\"frontwall\", { height: 50, width: 100, depth: 0.33 }, scene);\r\n    wallF.position.set(0, 25, 50)\r\n    wallF.visibility = 0.1;\r\n    wallF.physicsImpostor = new BABYLON.PhysicsImpostor(wallF, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n    wallF.checkCollisions = true;\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallB = BABYLON.MeshBuilder.CreateBox(\"backwall\", { height: 50, width: 100, depth: 0.33 }, scene);\r\n    wallB.position.set(0, 25, -50)\r\n    wallB.visibility = 0.1;\r\n    wallB.physicsImpostor = new BABYLON.PhysicsImpostor(wallB, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n    wallB.checkCollisions = true;\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallR = BABYLON.MeshBuilder.CreateBox(\"rightwall\", { height: 50, width: 0.33, depth: 100 }, scene);\r\n    wallR.position.set(50, 25, 0)\r\n    wallR.visibility = 0.1;\r\n    wallR.physicsImpostor = new BABYLON.PhysicsImpostor(wallR, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n    wallR.checkCollisions = true;\r\n\r\n    // Add and manipulate meshes in the scene\r\n    var wallL = BABYLON.MeshBuilder.CreateBox(\"leftwall\", { height: 50, width: 0.33, depth: 100 }, scene);\r\n    wallL.position.set(-50, 25, 0)\r\n    wallL.visibility = 0.1;\r\n    wallL.physicsImpostor = new BABYLON.PhysicsImpostor(wallL, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: 0.5 });\r\n    wallL.checkCollisions = true;\r\n\r\n    //ground.addChild(ground2);\r\n    ground2.addChild(wallF);\r\n    ground2.addChild(wallB);\r\n    ground2.addChild(wallR);\r\n    ground2.addChild(wallL);\r\n\r\n    return ground2;\r\n\r\n}\r\n","\r\n\r\n\r\n\r\nexport  function addXRGizmoManager(BABYLON,scene){\r\n    if(BABYLON==null || scene==null){\r\n        console.log(\"Gizmo manager needs BABYLON import and a scene\")\r\n        return null;\r\n    }\r\n\r\n    var gizmoManager = new BABYLON.GizmoManager(scene);\r\n    //gizmoManager.boundingBoxGizmoEnabled = true;\r\n    //gizmoManager.boundingBoxDragBehavior = null;\r\n    gizmoManager.usePointerToAttachGizmos = false;\r\n    gizmoManager.clearGizmoOnEmptyPointerEvent = true;\r\n    gizmoManager.rotationSphereSize = 0.04;\r\n    gizmoManager.scaleBoxSize = 0.08;\r\n    \r\n\r\n        function selectMode(mode){\r\n            gizmoManager.positionGizmoEnabled = false;\r\n            gizmoManager.rotationGizmoEnabled = false;\r\n            gizmoManager.scaleGizmoEnabled = false;\r\n            gizmoManager.boundingBoxGizmoEnabled = false;\r\n\r\n            switch(mode){\r\n                case 0:\r\n                    gizmoManager.boundingBoxGizmoEnabled= true;\r\n                    gizmoManager.gizmos.boundingBoxGizmo.setEnabledScaling(false);\r\n                    \r\n                    break;\r\n                case 1:\r\n                    gizmoManager.positionGizmoEnabled = true;\r\n                    break;\r\n                case 2:\r\n                    gizmoManager.rotationGizmoEnabled = true;\r\n                    break;\r\n                case 3:\r\n                    gizmoManager.scaleGizmoEnabled = true;\r\n                    break;\r\n                \r\n            }\r\n\r\n        }\r\n        gizmoManager.selectMode=selectMode;\r\n\r\n    return gizmoManager;\r\n} ","\r\nimport { firestore } from '../firebase'\r\nimport { Timer } from \"easytimer.js\";\r\n\r\nexport const globalTimer = new Timer();\r\n\r\nexport const exerciseTimer = new Timer();\r\n\r\nvar currentUser = {};\r\n\r\nvar exerciseData = {};\r\n\r\nvar LoadedUserData = {};\r\n\r\n\r\nexport function setCurrentUser(user) {\r\n    currentUser = user;\r\n}\r\n\r\nexport function setExerciseData(exercise) {\r\n    exerciseData = exercise;\r\n}\r\n\r\nexport function getExerciseData() {\r\n    return exerciseData;\r\n}\r\n\r\n\r\nexport function checkUserExerciseData(exercise_id) {\r\n\r\n    if (currentUser) {\r\n        firestore.collection('users').doc(currentUser.uid).collection('exercises').doc(exercise_id).get().then(response => {\r\n\r\n         \r\n            if (response.exists) {\r\n\r\n                LoadedUserData = response.data();\r\n\r\n                //exerciseData=LoadedUserData\r\n                setExerciseData(LoadedUserData);\r\n                \r\n                \r\n\r\n            }\r\n\r\n\r\n        }, (error => {\r\n            console.log(error.message)\r\n        }))\r\n    }\r\n\r\n}\r\n\r\nexport function updateUserExerciseData(exercise_id) {\r\n    isExerciseComplete();\r\n    addTotalTime();\r\n    firestore.collection('users').doc(currentUser.uid).collection('exercises').doc(exercise_id).set(exerciseData);\r\n\r\n}\r\n\r\nexport function getQuizByID(id) {\r\n\r\n    for (let [key] of Object.entries(exerciseData.quizes)) {\r\n\r\n        if (exerciseData.quizes[key].id == id) {\r\n\r\n            return exerciseData.quizes[key];\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function addQuiz(loaded_exercise_index) {\r\n    var quiz = {\r\n        id: 'quiz_' + loaded_exercise_index,\r\n        time: '00:00',\r\n        errors: 0,\r\n        isCompleted: false\r\n    }\r\n    var test = Object.keys(exerciseData.quizes)\r\n    //Object.defineProperty()\r\n    //exerciseData.quizes\r\n    exerciseData.quizes.push(quiz);\r\n\r\n}\r\n\r\nexport function addQuizTimebyID(id, time) {\r\n\r\n    var isCompleted = getQuizByID(id).isCompleted;\r\n    if (!isCompleted) {\r\n        getQuizByID(id).time = time;\r\n    }\r\n\r\n}\r\n\r\nexport function addTotalTime() {\r\n\r\n    if (!exerciseData.isCompleted) {\r\n        exerciseData.generalTime = globalTimer.getTimeValues().toString();\r\n\r\n    } else {\r\n        globalTimer.stop();\r\n    }\r\n\r\n}\r\n\r\nexport function addQuizErrorByID(id) {\r\n\r\n    var isCompleted = getQuizByID(id).isCompleted;\r\n    if (!isCompleted) {\r\n        getQuizByID(id).errors += 1;\r\n    }\r\n\r\n}\r\n\r\nexport function addTotalError(id) {\r\n\r\n    var isCompleted = getQuizByID(id).isCompleted;\r\n    if (!isCompleted) {\r\n        exerciseData.totalErrors += 1\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function isExerciseComplete() {\r\n\r\n    var checkCompletedQuizes = 0\r\n    var quizlist = Object.entries(exerciseData.quizes)\r\n\r\n    for (let [key] of quizlist) {\r\n\r\n        if (exerciseData.quizes[key].isCompleted == true) {\r\n            checkCompletedQuizes++\r\n\r\n        }\r\n\r\n    }\r\n    if (checkCompletedQuizes == quizlist.length) {\r\n        exerciseData.isCompleted = true;\r\n    }\r\n    else {\r\n        exerciseData.isCompleted = false;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function getEmotionData(emotiondata, ejercicio) {\r\n\r\n\r\n    if (currentUser && emotiondata != undefined) {\r\n\r\n        var tempData = JSON.parse(JSON.stringify(emotiondata));\r\n\r\n        var dateObj = new Date();\r\n        var month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n        var day = dateObj.getUTCDate();\r\n        var year = dateObj.getUTCFullYear();\r\n        var hours = dateObj.getUTCHours();\r\n        var minutes = dateObj.getUTCMinutes();\r\n\r\n        var tag = (\"quiz_\" + ejercicio + \"-\" + year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes).toString();\r\n        firestore.collection('users').doc(currentUser.uid).collection('emotion_capture').doc(tag).set(tempData);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","import * as BABYLON from 'babylonjs'\r\nimport * as GUI from 'babylonjs-gui';\r\n\r\n\r\nexport default function InfoCardsManager(scene, size) {\r\n\r\n\r\n    var displayPlane = new BABYLON.MeshBuilder.CreatePlane(\"displayPlaneinfo\", {\r\n        width: size * (1.9),\r\n        height: size * (0.9)\r\n    }, scene);\r\n\r\n    displayPlane.nonXREditable = true;\r\n    displayPlane.XRPickable = true;\r\n    //displayPlane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL       \r\n\r\n\r\n    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n    var local_pos = new BABYLON.Vector3(1, 1, 0);\r\n    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n    displayPlane.position = local_pos; //position sphere relative to world\r\n    displayPlane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n    var container = new GUI.AdvancedDynamicTexture.CreateForMesh(displayPlane);\r\n    container.scaleTo(1600, 900)\r\n\r\n    //container.useSmallestIdeal = true\r\n    //container.idealWidth = 1600;\r\n    //container.idealHeight = 900;\r\n\r\n\r\n    var mainstructure_grid = new GUI.Grid(\"mainStructure\");\r\n    mainstructure_grid.addColumnDefinition(0.1);\r\n    mainstructure_grid.addColumnDefinition(0.8);\r\n    mainstructure_grid.addColumnDefinition(0.1);\r\n    mainstructure_grid.addRowDefinition(1);\r\n\r\n    container.addControl(mainstructure_grid);\r\n\r\n    var cards_container = [];\r\n    var cards_container_index = 0\r\n\r\n\r\n    function addCard(card) {\r\n\r\n        cards_container.push(card);\r\n\r\n    }\r\n\r\n    function Start(cardnumber) {\r\n\r\n        if (cards_container.length > 0) {\r\n\r\n            cards_container_index = cardnumber;\r\n            mainstructure_grid.addControl(cards_container[cardnumber].info_image_container, 0, 1);\r\n\r\n            var onload = getCurrentCard();\r\n            logicManager.LoadStuff(onload);\r\n            logicManager.Start();\r\n\r\n        }\r\n    }\r\n\r\n    function getCurrentCard() {\r\n\r\n        return cards_container[cards_container_index];\r\n    }\r\n\r\n    function isLimitList() {\r\n        console.log(cards_container_index)\r\n        console.log(cards_container.length)\r\n\r\n        var limitcheck = cards_container_index + 1\r\n        var sublimitcheck = cards_container_index - 1\r\n\r\n        if (limitcheck > cards_container.length) {\r\n\r\n            return true;\r\n\r\n        }\r\n        else if (sublimitcheck < 0) {\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function prevImage() {\r\n\r\n        if (cards_container.length > 0) {\r\n\r\n            var tem_index = cards_container_index;\r\n            var prev_card = cards_container[cards_container_index]\r\n            cards_container_index--\r\n\r\n            if (cards_container_index <= 0) {\r\n\r\n                cards_container_index = 0\r\n            }\r\n\r\n            if (tem_index != cards_container_index) {\r\n\r\n                var card = cards_container[cards_container_index]\r\n\r\n                //info_image_container.source = card.src;\r\n                mainstructure_grid.removeControl(prev_card.info_image_container)\r\n                mainstructure_grid.addControl(card.info_image_container, 0, 1)\r\n\r\n\r\n                var onload = getCurrentCard();\r\n                logicManager.LoadStuff(onload);\r\n                logicManager.Start();\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    function nextImage() {\r\n\r\n        if (cards_container.length > 0) {\r\n\r\n            var tem_index = cards_container_index;\r\n            var prev_card = cards_container[cards_container_index]\r\n            cards_container_index++\r\n\r\n            if (cards_container_index >= cards_container.length) {\r\n                cards_container_index = cards_container.length - 1\r\n            }\r\n\r\n\r\n            if (tem_index != cards_container_index) {\r\n                var card = cards_container[cards_container_index]\r\n                //info_image_container.source = card.src;\r\n                mainstructure_grid.removeControl(prev_card.info_image_container)\r\n                mainstructure_grid.addControl(card.info_image_container, 0, 1)\r\n\r\n                var onload = getCurrentCard();\r\n                logicManager.LoadStuff(onload);\r\n                logicManager.Start();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //addGrid.addControl(image1.info_image_container, 0, 1);\r\n\r\n    var button_previous = GUI.Button.CreateImageOnlyButton(\"but_prev\", \"images/left.png\");\r\n    //button.width = 0.5;\r\n    button_previous.height = .8;\r\n    button_previous.color = \"white\";\r\n    button_previous.fontSize = 20;\r\n    button_previous.background = \"#1388AF\";\r\n    button_previous.image.paddingBottomInPixels = 100\r\n    button_previous.image.paddingTopInPixels = 100\r\n    button_previous.image.paddingLeftInPixels = 10\r\n    button_previous.image.paddingRightInPixels = 10\r\n    //button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    //button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;               \r\n    //button.top = \"-10px\";\r\n\r\n    //button.onPointerClickObservable.add(ExecuteButton);\r\n    //panel.addControl(button_previous);\r\n    mainstructure_grid.addControl(button_previous, 0, 0);\r\n\r\n    button_previous.onPointerUpObservable.add(() => {\r\n        prevImage();\r\n    })\r\n\r\n\r\n\r\n    var button_next = GUI.Button.CreateImageOnlyButton(\"but_pos\", \"images/right.png\");\r\n    //button.width = 0.5;\r\n    button_next.height = .8;\r\n    button_next.color = \"white\";\r\n    button_next.fontSize = 20;\r\n    button_next.background = \"#1388AF\";\r\n    button_next.image.paddingBottomInPixels = 100\r\n    button_next.image.paddingTopInPixels = 100\r\n    button_next.image.paddingLeftInPixels = 10\r\n    button_next.image.paddingRightInPixels = 10\r\n    //button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    //button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;               \r\n    //button.top = \"-10px\";\r\n\r\n    //button.onPointerClickObservable.add(ExecuteButton);\r\n    //panel.addControl(button_next);\r\n    mainstructure_grid.addControl(button_next, 0, 2);\r\n\r\n    button_next.onPointerUpObservable.add(() => {\r\n        nextImage();\r\n    })\r\n\r\n\r\n    function open() {\r\n\r\n\r\n        var openKeys = [];\r\n        openKeys.push({\r\n            frame: 0,\r\n            value: 0 //BABYLON.Vector2.Zero()\r\n        });\r\n        openKeys.push({\r\n            frame: 10,\r\n            value: 1 // new BABYLON.Vector2(1, 1)\r\n        });\r\n\r\n        var animationOpen = new BABYLON.Animation(\r\n            'scaleAnimationOpen',\r\n            'scaleX',\r\n            30,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationOpen.setKeys(openKeys);\r\n\r\n        let easingFunction = new BABYLON.BounceEase(1, 4);\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n        animationOpen.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationOpen);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1);\r\n        //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n        scene.beginDirectAnimation(container, [animationOpen], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    function close() {\r\n\r\n\r\n        var keys = [];\r\n        keys.push({\r\n            frame: 0,\r\n            value: 1\r\n        });\r\n        keys.push({\r\n            frame: 10,\r\n            value: 0\r\n        });\r\n\r\n\r\n        var animationClose = new BABYLON.Animation(\r\n            'scaleAnimation',\r\n            'scaleX',\r\n            10,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationClose.setKeys(keys);\r\n\r\n        let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n        animationClose.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationClose);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n        //menuPlane.dispose();\r\n        //});\r\n\r\n        scene.beginDirectAnimation(container, [animationClose], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    var observables_list = [];\r\n\r\n    function addObserver(params) {\r\n\r\n        observables_list.push(params);\r\n\r\n    }\r\n\r\n    function removeObserver(number) {\r\n        // button.onPointerUpObservable.remove(observables_list[number])\r\n        // observables_list.splice(number,1);\r\n    }\r\n\r\n    function clearObservers() {\r\n        //  button.onPointerUpObservable.clear();\r\n        //  observables_list=[]\r\n    }\r\n\r\n    function clearItems() {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    function LogicManager(scene) {\r\n\r\n        var temp_loable_element = {}\r\n        var temp_disposable_stuff = []\r\n        var temp_observables = []\r\n        var temp_GUI = []\r\n\r\n        function LoadStuff(element) {\r\n\r\n            temp_loable_element = element;\r\n        }\r\n\r\n        function AddDisposableStuff(element) {\r\n            temp_disposable_stuff.push(element)\r\n        }\r\n\r\n        function AddObservables(observable) {\r\n            temp_observables.push(observable)\r\n        }\r\n\r\n        function AddTemporalGUI(item) {\r\n            temp_GUI.push(item)\r\n        }\r\n\r\n\r\n        function Start() {\r\n\r\n            if (temp_loable_element.Load_Models) {\r\n\r\n                temp_loable_element.Load_Models().then(function (meshes) {\r\n                   \r\n                    ClearAll();\r\n                    temp_disposable_stuff = meshes;\r\n\r\n                    if (temp_loable_element.Load_Logic) {\r\n\r\n                        temp_loable_element.Load_Logic();\r\n\r\n                    }\r\n\r\n                });\r\n\r\n            } else if (temp_loable_element.Load_Logic) {\r\n\r\n                temp_loable_element.Load_Logic();\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        function ClearAll() {\r\n\r\n\r\n            if (temp_observables.length > 0) {\r\n               \r\n                temp_observables.forEach(value => {\r\n\r\n                    scene.onBeforeRenderObservable.remove(value);\r\n                });\r\n\r\n                temp_observables = [];\r\n\r\n            }\r\n\r\n            if (temp_disposable_stuff.length > 0) {\r\n               \r\n                temp_disposable_stuff.forEach(value => {\r\n\r\n                    if (Array.isArray(value)) {\r\n                        value.forEach(value => { if (value.dispose) { value.dispose() } });\r\n                    } else { if (value.dispose) { value.dispose() } }\r\n                });\r\n\r\n                temp_disposable_stuff = [];\r\n\r\n\r\n            }\r\n\r\n            if (temp_GUI.length > 0) {\r\n                \r\n                temp_GUI.forEach(value => {\r\n\r\n                    if (Array.isArray(value)) {\r\n                        value.forEach(value => { if (value.dispose) { value.dispose() } });\r\n                    } else { if (value.dispose) { value.dispose() } }\r\n                });\r\n\r\n                temp_GUI = [];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function Reset() {\r\n\r\n            Start();\r\n\r\n        }\r\n\r\n        function ReloadModels() {\r\n\r\n            if (temp_disposable_stuff.length > 0) {\r\n\r\n                temp_disposable_stuff.forEach(value => {\r\n\r\n                    if (Array.isArray(value)) {\r\n                        value.forEach(value => { if (value.dispose) { value.dispose() } });\r\n                    } else { if (value.dispose) { value.dispose() } }\r\n                });\r\n                temp_disposable_stuff = [];\r\n\r\n            }\r\n\r\n            if (temp_loable_element.Load_Models) {\r\n\r\n                temp_loable_element.Load_Models().then(function (meshes) {\r\n\r\n                    temp_disposable_stuff = meshes;\r\n\r\n\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function ReloadLogic() {\r\n\r\n\r\n            if (temp_observables.length > 0) {\r\n\r\n                temp_observables.forEach(value => {\r\n\r\n                    scene.onBeforeRenderObservable.remove(value);\r\n                });\r\n\r\n            }\r\n\r\n            if (temp_GUI.length > 0) {\r\n\r\n                temp_GUI.forEach(value => {\r\n\r\n                    if (Array.isArray(value)) {\r\n                        value.forEach(value => { if (value.dispose) { value.dispose() } });\r\n                    } else { if (value.dispose) { value.dispose() } }\r\n                });\r\n\r\n                temp_GUI = [];\r\n\r\n            }\r\n\r\n            if (temp_loable_element.Load_Logic) {\r\n\r\n                temp_loable_element.Load_Logic();\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        var loader = {\r\n            LoadStuff,\r\n            AddDisposableStuff,\r\n            AddObservables,\r\n            AddTemporalGUI,\r\n            Start,\r\n            ClearAll,\r\n            Reset,\r\n            ReloadModels,\r\n            ReloadLogic\r\n        }\r\n\r\n        return loader;\r\n\r\n    }\r\n\r\n    var logicManager = LogicManager(scene);\r\n\r\n\r\n\r\n    return {\r\n        displayPlane,\r\n        container,\r\n        button_previous,\r\n        button_next,\r\n        logicManager,\r\n        addCard,\r\n        Start,\r\n        getCurrentCard,\r\n        isLimitList,\r\n        open,\r\n        close,\r\n        addObserver,\r\n        removeObserver,\r\n        clearObservers,\r\n        clearItems\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import * as BABYLON from 'babylonjs'\r\nimport * as GUI from 'babylonjs-gui';\r\n\r\n\r\n\r\nexport default function XRQuizDisplay(scene, size, XRPickable) {\r\n\r\n    // WINDOW PLANE FOR CONTROL AND POSITION\r\n\r\n    var windowMesh = new BABYLON.MeshBuilder.CreatePlane(\"windown_plane\", {\r\n        width: size * (1.6),\r\n        height: size * (0.15),\r\n        sideOrientation: BABYLON.Mesh.DOUBLESIDE\r\n    }, scene);\r\n\r\n    windowMesh.XRPickable = XRPickable;\r\n    windowMesh.nonXREditable = true;\r\n\r\n    var window_texture = new GUI.AdvancedDynamicTexture.CreateForMesh(windowMesh);\r\n    window_texture.scaleTo(800,100)\r\n\r\n    var win_rectangle = new GUI.Rectangle(\"container\")\r\n    win_rectangle.width = 1;\r\n    win_rectangle.height = 1;\r\n    \r\n    //container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    //container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n   \r\n    //container.cornerRadius = 20;\r\n    //container.color = \"Orange\";\r\n    win_rectangle.thickness = 0;\r\n    win_rectangle.background = '#00000066';\r\n    \r\n    //container.paddingTopInPixels = 15;\r\n    //container.paddingLeftInPixels = 15;\r\n    //container.zIndex=-1;\r\n\r\n    \r\n    var win_grid = new GUI.Grid(\"win_grid\")\r\n    win_grid.addRowDefinition(1);\r\n    win_grid.addColumnDefinition(.7)\r\n    win_grid.addColumnDefinition(.15)\r\n    win_grid.addColumnDefinition(.15)\r\n\r\n    win_grid.paddingLeftInPixels=5;\r\n    \r\n\r\n    const win_text_name = new GUI.TextBlock(\"win_text_name\");\r\n    win_text_name.fontFamily = \"Helvetica\";\r\n    //win_text_name.textWrapping = true;\r\n    //win_text_name.resizeToFit=true;\r\n    win_text_name.text = \"Sección de preguntas\"\r\n    win_text_name.color = \"white\";\r\n    win_text_name.fontSize = 40;\r\n    \r\n    win_text_name.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT\r\n   \r\n\r\n    win_grid.addControl(win_text_name,0,0);\r\n\r\n\r\n    win_rectangle.addControl(win_grid);\r\n    \r\n\r\n    window_texture.addControl(win_rectangle);\r\n\r\n    //panel of data content\r\n\r\n    var displayPlane = new BABYLON.MeshBuilder.CreatePlane(\"displayPlaneinfo\", {\r\n        width: size * (1.6),\r\n        height: size * (0.9)\r\n    }, scene);\r\n\r\n   \r\n    //displayPlane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL       \r\n    \r\n\r\n    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n    \r\n    var local_pos = new BABYLON.Vector3(-0.7, .5, 0);\r\n    windowMesh.position = local_pos\r\n    windowMesh.rotation.y = (90 * (Math.PI / 180))\r\n    \r\n    \r\n    var ajust_pos=displayPlane.getBoundingInfo().boundingBox.maximum.y +windowMesh.getBoundingInfo().boundingBox.maximum.y\r\n    var change_axis = new BABYLON.Vector3(0, -ajust_pos, 0);\r\n    \r\n    displayPlane.parent = windowMesh;\r\n    displayPlane.position = change_axis;\r\n\r\n    var container_texture = new GUI.AdvancedDynamicTexture.CreateForMesh(displayPlane);\r\n    container_texture.scaleTo(800, 450)\r\n    //container_texture.idealWidth = 800;\r\n    container_texture.idealHeight = 620;\r\n    //container_texture.useSmallestIdeal = true\r\n\r\n    var main_grid = new GUI.Grid(\"main_grid\")\r\n    main_grid.addRowDefinition(15, true);\r\n    main_grid.addRowDefinition(170, true);\r\n    main_grid.addRowDefinition(230, true);\r\n    main_grid.addRowDefinition(100, true);\r\n    main_grid.addRowDefinition(105, true);\r\n    main_grid.addColumnDefinition(1);\r\n\r\n\r\n\r\n    let question = \"sin pregunta cargada... \";\r\n    let answers = [];\r\n    let correctanswer = \" \";\r\n    let finalanswer = [];\r\n    let extradata = [\"vacio\"];\r\n\r\n    var itemsarray = []\r\n\r\n\r\n    //CONFIG SIZE\r\n\r\n\r\n\r\n    var container = new GUI.Rectangle(\"container\")\r\n    //container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    //container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    container.width = 1;\r\n    container.height = 1;\r\n    //container.cornerRadius = 20;\r\n    //container.color = \"Orange\";\r\n    container.thickness = 0;\r\n    container.background = \"green\";\r\n    //container.paddingTopInPixels = 15;\r\n    //container.paddingLeftInPixels = 15;\r\n\r\n\r\n    container_texture.addControl(container);\r\n\r\n    container.addControl(main_grid);\r\n\r\n\r\n\r\n    var dataText = new GUI.TextBlock(\"dataText\", \"pues no hay pregunta todavia...\");\r\n    dataText.textWrapping = true;\r\n    //dataText.background = 'Red';\r\n    dataText.text = question;\r\n    dataText.color = \"black\";\r\n    dataText.fontSize = 35;\r\n    dataText.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    dataText.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    //dataText.width = textWidth + 'px';\r\n    //dataText.height = textHeight + 'px';\r\n    dataText.paddingLeft = \"25px\"\r\n    dataText.paddingRight = \"25px\"\r\n    //dataText.paddingTop = (textHeight * 0.1) + 'px';\r\n\r\n    main_grid.addControl(dataText, 1, 0);\r\n\r\n\r\n    var buttonsGrid = new GUI.Grid(\"buttonsGrid\");\r\n\r\n\r\n    //buttonsGrid.height = buttonsHeight + 'px';\r\n    buttonsGrid.paddingLeft = 25 + 'px';\r\n    buttonsGrid.paddingRight = 25 + 'px';\r\n    buttonsGrid.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n\r\n    buttonsGrid.addRowDefinition(0.45);\r\n    buttonsGrid.addRowDefinition(0.10);\r\n    buttonsGrid.addRowDefinition(0.45);\r\n    buttonsGrid.addColumnDefinition(0.45);\r\n    buttonsGrid.addColumnDefinition(0.10);\r\n    buttonsGrid.addColumnDefinition(0.45);\r\n\r\n\r\n    function createAnswerbutton(answer) {\r\n        var button = new GUI.Button.CreateSimpleButton(\"button_\" + answer, answer);\r\n        //button.color = \"white\";\r\n        button.fontSize = 45;\r\n        button.fontFamily = \"Arial\";\r\n        //button.width = 0.4;\r\n        //button.height = 250 + 'px';\r\n        button.cornerRadius = 5;\r\n        //buttonStart.paddingLeft = (dimensions.x * 0.62) + 'px'; // skip ~1/2\r\n        button.background = \"#6c757d\";\r\n\r\n        return button;\r\n    }\r\n\r\n\r\n\r\n\r\n    function setAnswer(answer) {\r\n        // console.log(\"la respuesta elegida es: \"+answer)\r\n\r\n        finalanswer = answer;\r\n\r\n        //  console.log(\"la respuesta final es: \"+finalanswer)\r\n    }\r\n\r\n\r\n    var answer0 = createAnswerbutton(answers[0]);\r\n\r\n    answer0.onPointerClickObservable.add(function (state) {\r\n\r\n        if (state) {\r\n\r\n            setAnswer(answers[0]);\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    var answer1 = createAnswerbutton(answers[1]);\r\n\r\n    answer1.onPointerClickObservable.add(function (state) {\r\n\r\n        if (state) {\r\n\r\n            setAnswer(answers[1]);\r\n        }\r\n    });\r\n\r\n\r\n    var answer2 = createAnswerbutton(answers[2])\r\n\r\n\r\n    answer2.onPointerClickObservable.add(function (state) {\r\n\r\n        if (state) {\r\n\r\n            setAnswer(answers[2]);\r\n        }\r\n    });\r\n\r\n    var answer3 = createAnswerbutton(answers[3])\r\n\r\n\r\n    answer3.onPointerClickObservable.add(function (state) {\r\n\r\n        if (state) {\r\n\r\n            setAnswer(answers[3]);\r\n        }\r\n    });\r\n\r\n    answer0.onPointerUpObservable.add(function () {\r\n\r\n        answer0.background = \"#c91a1a\"\r\n        answer1.background = \"#6c757d\";\r\n        answer2.background = \"#6c757d\";\r\n        answer3.background = \"#6c757d\";\r\n    })\r\n\r\n    answer1.onPointerUpObservable.add(function () {\r\n\r\n        answer1.background = \"#c91a1a\"\r\n        answer0.background = \"#6c757d\";\r\n        answer2.background = \"#6c757d\";\r\n        answer3.background = \"#6c757d\";\r\n    })\r\n\r\n    answer2.onPointerUpObservable.add(function () {\r\n\r\n        answer2.background = \"#c91a1a\"\r\n        answer0.background = \"#6c757d\";\r\n        answer1.background = \"#6c757d\";\r\n        answer3.background = \"#6c757d\";\r\n    })\r\n\r\n    answer3.onPointerUpObservable.add(function () {\r\n\r\n        answer3.background = \"#c91a1a\"\r\n        answer1.background = \"#6c757d\";\r\n        answer2.background = \"#6c757d\";\r\n        answer0.background = \"#6c757d\";\r\n    })\r\n\r\n\r\n\r\n\r\n    buttonsGrid.addControl(answer0, 0, 0);\r\n    buttonsGrid.addControl(answer1, 2, 0);\r\n    buttonsGrid.addControl(answer2, 0, 2);\r\n    buttonsGrid.addControl(answer3, 2, 2);\r\n\r\n    main_grid.addControl(buttonsGrid, 2, 0);\r\n\r\n\r\n    var controlGrid = new GUI.Grid(\"controlGrid\");\r\n\r\n    controlGrid.addRowDefinition(1);\r\n    controlGrid.addColumnDefinition(0.2);\r\n    controlGrid.addColumnDefinition(0.4);\r\n    controlGrid.addColumnDefinition(0.2);\r\n\r\n\r\n    controlGrid.height = 1;\r\n    controlGrid.paddingTop = 15 + 'px';\r\n    controlGrid.paddingLeft = 25 + 'px';\r\n    controlGrid.paddingRight = 25 + 'px'\r\n    controlGrid.paddingBottom = 25 + 'px'\r\n    //controlGrid.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n\r\n\r\n    var leftarrow = GUI.Button.CreateSimpleButton(\"leftarrow\", \"Anterior\");\r\n    leftarrow.paddingRightInPixels = 10;\r\n    leftarrow.fontSize = 35;\r\n\r\n    leftarrow.onPointerClickObservable.add(function (){\r\n        answer1.background = \"#6c757d\"\r\n        answer0.background = \"#6c757d\";\r\n        answer2.background = \"#6c757d\";\r\n        answer3.background = \"#6c757d\";\r\n    });\r\n\r\n\r\n\r\n    var rightarrow = GUI.Button.CreateSimpleButton(\"rightarrow\", \"Siguiente\");\r\n    rightarrow.paddingLeftInPixels = 10;\r\n    rightarrow.fontSize = 35;\r\n\r\n    rightarrow.onPointerClickObservable.add(function (){\r\n        answer1.background = \"#6c757d\"\r\n        answer0.background = \"#6c757d\";\r\n        answer2.background = \"#6c757d\";\r\n        answer3.background = \"#6c757d\";\r\n    });\r\n\r\n\r\n\r\n    var finalanswerButton = GUI.Button.CreateSimpleButton(\"final_answer\", \"Responder\");\r\n    finalanswerButton.fontSize = 35;\r\n    //finalanswerButton.height=30+\"px\";\r\n    function addResultPlane(scene, messageString, ImgDir) {\r\n\r\n\r\n        var container_result = new GUI.Rectangle(\"container_result\");\r\n\r\n        container_result.width = 1;\r\n        container_result.height = 0.99;\r\n        //container.cornerRadius = 20;\r\n        //container.color = \"Orange\";\r\n        container_result.thickness = 0;\r\n        container_result.background = \"green\";\r\n        container_result.scaleX = 0;\r\n\r\n\r\n        container.addControl(container_result)\r\n\r\n\r\n        var grid = new GUI.Grid();\r\n        grid.background = \"white\";\r\n\r\n        grid.addRowDefinition(0.20);\r\n        grid.addRowDefinition(0.50);\r\n        grid.addRowDefinition(0.20);\r\n        grid.addRowDefinition(0.10);\r\n\r\n        container_result.addControl(grid);\r\n\r\n        var button = new GUI.Button.CreateSimpleButton(\"button_\" + \"Aceptar\", \"Aceptar\");\r\n        button.color = \"white\";\r\n        button.fontSize = 35;\r\n        button.fontFamily = \"Arial\";\r\n        button.width = 0.5;\r\n        button.height = (75) + 'px';\r\n        button.cornerRadius = 10;\r\n        //buttonStart.paddingLeft = (dimensions.x * 0.62) + 'px'; // skip ~1/2\r\n        button.background = \"#6c757d\";\r\n        button.onPointerClickObservable.add(() => {\r\n\r\n            /*if (finalanswer == correctanswer) {\r\n\r\n               loaded_exercise_index++;\r\n\r\n               if (loaded_exercise_index > quizesList.length - 1) {\r\n                   loaded_exercise_index = 0;\r\n               }\r\n               if (quizesList[loaded_exercise_index]) {\r\n                   resource_manager.Start(loaded_exercise_index)\r\n\r\n               }\r\n\r\n           }\r\n           */\r\n\r\n\r\n            close();\r\n\r\n\r\n        });\r\n\r\n        var headerText = new GUI.TextBlock();\r\n        headerText.text = messageString;\r\n        headerText.color = \"black\";\r\n        headerText.fontSize = 45;\r\n        headerText.fontStyle = 'bold';\r\n        headerText.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n\r\n        //headerText.width = textWidth + 'px';\r\n        headerText.height = 80 + 'px';\r\n        //headerText.paddingLeft = (dimensions.x * 0.02) + 'px';\r\n        headerText.paddingTop = 25 + 'px';\r\n\r\n        var image = new GUI.Image(\"but\", ImgDir);\r\n        image.width = \"200px\";\r\n        image.height = \"200px\";\r\n\r\n        grid.addControl(button, 2, 0);\r\n        grid.addControl(headerText, 0, 0);\r\n        grid.addControl(image, 1, 0);\r\n\r\n        var dataobserver = {};\r\n\r\n        function open() {\r\n\r\n            dataobserver = scene.onBeforeRenderObservable.add(() => {\r\n\r\n                //ViewDataRefresh();\r\n            });\r\n\r\n\r\n            var openKeys = [];\r\n            openKeys.push({\r\n                frame: 0,\r\n                value: 0 //BABYLON.Vector2.Zero()\r\n            });\r\n            openKeys.push({\r\n                frame: 10,\r\n                value: 1 // new BABYLON.Vector2(1, 1)\r\n            });\r\n\r\n            var animationOpen = new BABYLON.Animation(\r\n                'scaleAnimationOpen',\r\n                'scaleX',\r\n                30,\r\n                BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n                BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n            );\r\n            animationOpen.setKeys(openKeys);\r\n\r\n            let easingFunction = new BABYLON.BounceEase(1, 4);\r\n            easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n            animationOpen.setEasingFunction(easingFunction);\r\n\r\n            //container.animations.push(animationOpen);\r\n\r\n            //scene.beginAnimation(container, 0, 100, false, 1);\r\n            //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n            scene.beginDirectAnimation(container_result, [animationOpen], 0, 100, false, 1);\r\n\r\n        }\r\n\r\n        function close() {\r\n\r\n            scene.onBeforeRenderObservable.remove(dataobserver)\r\n\r\n\r\n            var keys = [];\r\n            keys.push({\r\n                frame: 0,\r\n                value: 1\r\n            });\r\n            keys.push({\r\n                frame: 10,\r\n                value: 0\r\n            });\r\n\r\n\r\n            var animationClose = new BABYLON.Animation(\r\n                'scaleAnimation',\r\n                'scaleX',\r\n                10,\r\n                BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n                BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n            );\r\n            animationClose.setKeys(keys);\r\n\r\n            let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n            easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n            animationClose.setEasingFunction(easingFunction);\r\n\r\n            //container.animations.push(animationClose);\r\n\r\n            //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n            //menuPlane.dispose();\r\n            //});\r\n\r\n            scene.beginDirectAnimation(container_result, [animationClose], 0, 100, false, 1);\r\n\r\n        }\r\n\r\n\r\n        var display = {}\r\n\r\n        //display.displayPlane = displayPlane;\r\n        display.headerText = headerText;\r\n        //display.dataText = dataText;  \r\n        display.show = open;\r\n        display.hide = close;\r\n\r\n        return display;\r\n\r\n\r\n    }\r\n\r\n    function addcompletedPanel(scene, messageString, ImgDir) {\r\n\r\n\r\n        var container_result = new GUI.Rectangle(\"container_result\");\r\n\r\n        container_result.width = 1;\r\n        container_result.height = 0.99;\r\n        //container.cornerRadius = 20;\r\n        //container.color = \"Orange\";\r\n        container_result.thickness = 0;\r\n        container_result.background = \"green\";\r\n        container_result.scaleX = 0;\r\n\r\n\r\n        container.addControl(container_result)\r\n\r\n\r\n        var grid = new GUI.Grid();\r\n        grid.background = \"white\";\r\n\r\n        grid.addRowDefinition(0.20);\r\n        grid.addRowDefinition(0.50);\r\n        grid.addRowDefinition(0.20);\r\n        grid.addRowDefinition(0.10);\r\n\r\n        container_result.addControl(grid);\r\n\r\n        var button = new GUI.Button.CreateSimpleButton(\"button_\" + \"Aceptar\", \"Aceptar\");\r\n        button.color = \"white\";\r\n        button.fontSize = 35;\r\n        button.fontFamily = \"Arial\";\r\n        button.width = 0.5;\r\n        button.height = (75) + 'px';\r\n        button.cornerRadius = 10;\r\n        //buttonStart.paddingLeft = (dimensions.x * 0.62) + 'px'; // skip ~1/2\r\n        button.background = \"#6c757d\";\r\n        button.onPointerClickObservable.add(() => {\r\n\r\n            /*if (finalanswer == correctanswer) {\r\n\r\n               loaded_exercise_index++;\r\n\r\n               if (loaded_exercise_index > quizesList.length - 1) {\r\n                   loaded_exercise_index = 0;\r\n               }\r\n               if (quizesList[loaded_exercise_index]) {\r\n                   resource_manager.Start(loaded_exercise_index)\r\n\r\n               }\r\n\r\n           }\r\n           */\r\n\r\n\r\n            close();\r\n\r\n\r\n        });\r\n\r\n        var headerText = new GUI.TextBlock();\r\n        headerText.text = messageString;\r\n        headerText.color = \"black\";\r\n        headerText.fontSize = 40;\r\n        headerText.fontStyle = 'bold';\r\n        headerText.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n\r\n        //headerText.width = textWidth + 'px';\r\n        headerText.height = 80 + 'px';\r\n        //headerText.paddingLeft = (dimensions.x * 0.02) + 'px';\r\n        headerText.paddingTop = 25 + 'px';\r\n\r\n        var image = new GUI.Image(\"but\", ImgDir);\r\n        image.width = \"550px\";\r\n        image.height = \"300px\";\r\n\r\n        grid.addControl(button, 2, 0);\r\n        grid.addControl(headerText, 0, 0);\r\n        grid.addControl(image, 1, 0);\r\n\r\n        var dataobserver = {};\r\n\r\n        function open() {\r\n\r\n            dataobserver = scene.onBeforeRenderObservable.add(() => {\r\n\r\n                //ViewDataRefresh();\r\n            });\r\n\r\n\r\n            var openKeys = [];\r\n            openKeys.push({\r\n                frame: 0,\r\n                value: 0 //BABYLON.Vector2.Zero()\r\n            });\r\n            openKeys.push({\r\n                frame: 10,\r\n                value: 1 // new BABYLON.Vector2(1, 1)\r\n            });\r\n\r\n            var animationOpen = new BABYLON.Animation(\r\n                'scaleAnimationOpen',\r\n                'scaleX',\r\n                30,\r\n                BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n                BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n            );\r\n            animationOpen.setKeys(openKeys);\r\n\r\n            let easingFunction = new BABYLON.BounceEase(1, 4);\r\n            easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n            animationOpen.setEasingFunction(easingFunction);\r\n\r\n            //container.animations.push(animationOpen);\r\n\r\n            //scene.beginAnimation(container, 0, 100, false, 1);\r\n            //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n            scene.beginDirectAnimation(container_result, [animationOpen], 0, 100, false, 1);\r\n\r\n        }\r\n\r\n        function close() {\r\n\r\n            scene.onBeforeRenderObservable.remove(dataobserver)\r\n\r\n\r\n            var keys = [];\r\n            keys.push({\r\n                frame: 0,\r\n                value: 1\r\n            });\r\n            keys.push({\r\n                frame: 10,\r\n                value: 0\r\n            });\r\n\r\n\r\n            var animationClose = new BABYLON.Animation(\r\n                'scaleAnimation',\r\n                'scaleX',\r\n                10,\r\n                BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n                BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n            );\r\n            animationClose.setKeys(keys);\r\n\r\n            let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n            easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n            animationClose.setEasingFunction(easingFunction);\r\n\r\n            //container.animations.push(animationClose);\r\n\r\n            //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n            //menuPlane.dispose();\r\n            //});\r\n\r\n            scene.beginDirectAnimation(container_result, [animationClose], 0, 100, false, 1);\r\n\r\n        }\r\n\r\n\r\n        var display = {}\r\n\r\n        //display.displayPlane = displayPlane;\r\n        display.headerText = headerText;\r\n        //display.dataText = dataText;  \r\n        display.show = open;\r\n        display.hide = close;\r\n\r\n        return display;\r\n\r\n\r\n    }\r\n\r\n    var correctPanel = addResultPlane(scene, \"Respuesta correcta!\", \"/images/correct.png\")\r\n    var incorrectPanel = addResultPlane(scene, \"Respuesta incorrecta!\", \"/images/incorrect.png\");\r\n    var allcompletedPanel = addcompletedPanel(scene, \"Todas las preguntas fueron respondidas correctamente!\", \"/images/complete.png\")\r\n\r\n    var finalAnswerResult = false;\r\n    var allCompletedResult = false;\r\n    var onCorrectObs = {}\r\n    var onIncorrectObs = {}\r\n\r\n    function setCorrectObs(obs) {\r\n        onCorrectObs = obs\r\n    }\r\n\r\n    function setIncorrectObs(obs) {\r\n        onIncorrectObs = obs\r\n    }\r\n\r\n    async function checkFinalAnswer() {\r\n\r\n\r\n\r\n        if (finalanswer === correctanswer) {\r\n\r\n\r\n            finalAnswerResult = true;\r\n\r\n            //addResultPlane(scene, \"Respuesta correcta!\", \"/images/correct.png\").show();\r\n            //correctPanel.show();\r\n\r\n\r\n        } else {\r\n\r\n\r\n            finalAnswerResult = false;\r\n\r\n            //addResultPlane(scene, \"Respuesta incorrecta!\", \"/images/incorrect.png\").show();\r\n            //incorrectPanel.show();\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    finalanswerButton.onPointerUpObservable.add(() => {\r\n        checkFinalAnswer();\r\n\r\n\r\n    });\r\n\r\n    function getIsCorrect() {\r\n\r\n        return finalAnswerResult;\r\n    }\r\n\r\n    function setIscompleted(bool) {\r\n        allCompletedResult = bool\r\n\r\n  \r\n    }\r\n\r\n\r\n    controlGrid.addControl(leftarrow, 0, 0);\r\n    controlGrid.addControl(finalanswerButton, 0, 1);\r\n    controlGrid.addControl(rightarrow, 0, 2);\r\n\r\n    main_grid.addControl(controlGrid, 3, 0);\r\n\r\n\r\n\r\n\r\n    var timer_error_grid = new GUI.Grid(\"buttonsGrid\");\r\n\r\n\r\n    //buttonsGrid.height = buttonsHeight + 'px';\r\n    timer_error_grid.paddingLeft = 25 + 'px';\r\n    timer_error_grid.paddingRight = 25 + 'px';\r\n    timer_error_grid.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n\r\n\r\n    timer_error_grid.addRowDefinition(1);\r\n\r\n    timer_error_grid.addColumnDefinition(0.33); //0 0\r\n\r\n    timer_error_grid.addColumnDefinition(0.33); //0 1\r\n\r\n    timer_error_grid.addColumnDefinition(0.33); //0 2\r\n\r\n\r\n\r\n    var question_number = new GUI.TextBlock(\"question_number\", \"Pregunta: 0/0\");\r\n    question_number.textWrapping = true;\r\n    //dataText.background = 'Red';\r\n\r\n    //question_number.text = question; <= FOR MOD TEXT\r\n    question_number.color = \"black\";\r\n    question_number.fontSize = 30;\r\n    question_number.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    question_number.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    //dataText.width = textWidth + 'px';\r\n    //dataText.height = textHeight + 'px';\r\n    question_number.paddingLeft = \"25px\"\r\n    question_number.paddingRight = \"25px\"\r\n    //dataText.paddingTop = (textHeight * 0.1) + 'px';\r\n\r\n    var time_number = new GUI.TextBlock(\"time_number\", \"Tiempo: 00:00\");\r\n    time_number.textWrapping = true;\r\n    //dataText.background = 'Red';\r\n\r\n    //question_number.text = question; <= FOR MOD TEXT\r\n\r\n    time_number.color = \"black\";\r\n    time_number.fontSize = 30;\r\n    time_number.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    time_number.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    //dataText.width = textWidth + 'px';\r\n    //dataText.height = textHeight + 'px';\r\n    time_number.paddingLeft = \"25px\"\r\n    time_number.paddingRight = \"25px\"\r\n    //dataText.paddingTop = (textHeight * 0.1) + 'px';\r\n\r\n    var error_number = new GUI.TextBlock(\"time_number\", \"  Errores: nunguno \");\r\n    error_number.textWrapping = true;\r\n    //dataText.background = 'Red';\r\n\r\n    //question_number.text = question; <= FOR MOD TEXT\r\n\r\n    error_number.color = \"black\";\r\n    error_number.fontSize = 30;\r\n    error_number.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    error_number.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    //dataText.width = textWidth + 'px';\r\n    //dataText.height = textHeight + 'px';\r\n    error_number.paddingLeft = \"25px\"\r\n    error_number.paddingRight = \"25px\"\r\n    //dataText.paddingTop = (textHeight * 0.1) + 'px';\r\n\r\n    timer_error_grid.addControl(question_number, 0, 0)\r\n    timer_error_grid.addControl(time_number, 0, 1)\r\n    timer_error_grid.addControl(error_number, 0, 2)\r\n\r\n    main_grid.addControl(timer_error_grid, 4, 0);\r\n\r\n\r\n\r\n\r\n    function loadquiz(quiz) {\r\n\r\n        question = quiz.question;\r\n        answers = quiz.answers;\r\n        correctanswer = quiz.correctanswer;\r\n\r\n\r\n        extradata = quiz.extradata;\r\n\r\n        dataText.text = quiz.question;\r\n        answer0.textBlock.text = answers[0];\r\n        answer1.textBlock.text = answers[1];\r\n        answer2.textBlock.text = answers[2];\r\n        answer3.textBlock.text = answers[3];\r\n\r\n\r\n    }\r\n\r\n    var datarefresh = 0;\r\n\r\n    function ViewDataRefresh() {\r\n\r\n        datarefresh += (scene.deltaTime);\r\n\r\n        if (datarefresh >= 200) {\r\n\r\n\r\n\r\n\r\n            datarefresh = 0;\r\n        }\r\n\r\n    }\r\n\r\n    var dataobserver = {};\r\n\r\n    function open() {\r\n\r\n        dataobserver = scene.onBeforeRenderObservable.add(() => {\r\n\r\n            //ViewDataRefresh();\r\n        });\r\n\r\n\r\n        var openKeys = [];\r\n        openKeys.push({\r\n            frame: 0,\r\n            value: 0 //BABYLON.Vector2.Zero()\r\n        });\r\n        openKeys.push({\r\n            frame: 10,\r\n            value: 1 // new BABYLON.Vector2(1, 1)\r\n        });\r\n\r\n        var animationOpen = new BABYLON.Animation(\r\n            'scaleAnimationOpen',\r\n            'scaleX',\r\n            30,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationOpen.setKeys(openKeys);\r\n\r\n        let easingFunction = new BABYLON.BounceEase(1, 4);\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n        animationOpen.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationOpen);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1);\r\n        //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n        scene.beginDirectAnimation(container, [animationOpen], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    function close() {\r\n\r\n        scene.onBeforeRenderObservable.remove(dataobserver)\r\n\r\n\r\n        var keys = [];\r\n        keys.push({\r\n            frame: 0,\r\n            value: 1\r\n        });\r\n        keys.push({\r\n            frame: 10,\r\n            value: 0\r\n        });\r\n\r\n\r\n        var animationClose = new BABYLON.Animation(\r\n            'scaleAnimation',\r\n            'scaleX',\r\n            10,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationClose.setKeys(keys);\r\n\r\n        let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n        animationClose.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationClose);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n        //menuPlane.dispose();\r\n        //});\r\n\r\n        scene.beginDirectAnimation(container, [animationClose], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        displayPlane:windowMesh,\r\n        container,\r\n        open,\r\n        close,\r\n        loadquiz,\r\n        leftarrow,\r\n        rightarrow,\r\n        finalanswerButton,\r\n        time_number,\r\n        error_number,\r\n        question_number,\r\n        setIscompleted,\r\n        allcompletedPanel,\r\n        correctPanel,\r\n        incorrectPanel,\r\n        getIsCorrect,\r\n        setCorrectObs,\r\n        setIncorrectObs\r\n    }\r\n}\r\n\r\n","import * as BABYLON from 'babylonjs'\r\nimport * as GUI from 'babylonjs-gui';\r\n\r\n\r\n\r\nexport default function XRDinamicsDataDisplay(scene, size, XRPickable) {\r\n\r\n    // WINDOW PLANE FOR CONTROL AND POSITION\r\n\r\n    var windowMesh = new BABYLON.MeshBuilder.CreatePlane(\"windown_plane\", {\r\n        width: size * (0.8),\r\n        height: size * (0.15),\r\n        sideOrientation: BABYLON.Mesh.DOUBLESIDE\r\n    }, scene);\r\n\r\n    windowMesh.XRPickable = XRPickable;\r\n    windowMesh.nonXREditable = true;\r\n\r\n    var window_texture = new GUI.AdvancedDynamicTexture.CreateForMesh(windowMesh);\r\n    window_texture.scaleTo(400,100)\r\n\r\n    var win_rectangle = new GUI.Rectangle(\"container\")\r\n    win_rectangle.width = 1;\r\n    win_rectangle.height = 1;\r\n    \r\n    //container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    //container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n   \r\n    //container.cornerRadius = 20;\r\n    //container.color = \"Orange\";\r\n    win_rectangle.thickness = 0;\r\n    win_rectangle.background = '#00000066';\r\n    \r\n    //container.paddingTopInPixels = 15;\r\n    //container.paddingLeftInPixels = 15;\r\n    //container.zIndex=-1;\r\n\r\n    \r\n    var win_grid = new GUI.Grid(\"win_grid\")\r\n    win_grid.addRowDefinition(1);\r\n    win_grid.addColumnDefinition(.7)\r\n    win_grid.addColumnDefinition(.15)\r\n    win_grid.addColumnDefinition(.15)\r\n\r\n    win_grid.paddingLeftInPixels=5;\r\n    \r\n\r\n    const win_text_name = new GUI.TextBlock(\"win_text_name\");\r\n    win_text_name.fontFamily = \"Helvetica\";\r\n    //win_text_name.textWrapping = true;\r\n    win_text_name.text = \"Pantalla de resultados\"\r\n    win_text_name.color = \"white\";\r\n    win_text_name.fontSize = 28;\r\n    win_text_name.height = \"100px\";   \r\n    win_text_name.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT\r\n   \r\n\r\n    win_grid.addControl(win_text_name,0,0);\r\n\r\n\r\n    win_rectangle.addControl(win_grid);\r\n    \r\n\r\n    window_texture.addControl(win_rectangle);\r\n\r\n    // Display plane with content\r\n\r\n    \r\n    var displayPlane = new BABYLON.MeshBuilder.CreatePlane(\"displayPlaneinfo\", {\r\n        width: size * (0.8),\r\n        height: size * (0.6)\r\n    }, scene);\r\n\r\n  \r\n    //displayPlane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL       \r\n\r\n\r\n    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix    \r\n    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n   \r\n    var local_pos = new BABYLON.Vector3(-0.7, .5, 0);\r\n    windowMesh.position = local_pos\r\n    windowMesh.rotation.y = (90 * (Math.PI / 180))\r\n    \r\n    \r\n    var ajust_pos=displayPlane.getBoundingInfo().boundingBox.maximum.y +windowMesh.getBoundingInfo().boundingBox.maximum.y\r\n    var change_axis = new BABYLON.Vector3(0, -ajust_pos, 0);\r\n    \r\n    displayPlane.parent = windowMesh;\r\n    displayPlane.position = change_axis;\r\n\r\n\r\n    var container_texture = new GUI.AdvancedDynamicTexture.CreateForMesh(displayPlane);\r\n    container_texture.scaleTo(800,600)\r\n    //container_texture.idealWidth = 800;\r\n    //container_texture.idealHeight = 600;\r\n    //container_texture.useSmallestIdeal = true\r\n\r\n    \r\n\r\n\r\n    //CONFIG SIZE\r\n    var globalHeight = 240;\r\n\r\n    container_texture.idealHeight = globalHeight;\r\n\r\n\r\n    var container = new GUI.Rectangle(\"container\")\r\n    container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    container.width = 1;\r\n    container.height = globalHeight+\"px\";\r\n    //container.cornerRadius = 20;\r\n    //container.color = \"Orange\";\r\n    container.thickness = 0;\r\n    container.background = \"white\";\r\n   \r\n\r\n\r\n    var grid = new GUI.Grid();\r\n    grid.addRowDefinition(0.5);   \r\n    grid.addRowDefinition(0.5);\r\n\r\n    container.addControl(grid);\r\n\r\n    container_texture.addControl(container)\r\n\r\n\r\n   \r\n\r\n    var dataText = new GUI.TextBlock(\"dataText\", \"Sin datos que mostar\");\r\n    dataText.textWrapping = true;\r\n\r\n    dataText.color = \"black\";\r\n    dataText.fontSize = 20;\r\n    dataText.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    dataText.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n    dataText.paddingLeft = 20 + 'px';\r\n    dataText.paddingTop = 20 + 'px';\r\n\r\n    grid.addControl(dataText, 1, 0);\r\n\r\n\r\n\r\n    var tick = 0;\r\n\r\n    var drawdatatext = \" \"\r\n\r\n    \r\n    function addFormulaImage(src){\r\n\r\n        var image = new GUI.Image(\"equation\", src);\r\n        image.width = 1;\r\n        image.height = \"100px\";\r\n        image.paddingLeft=20 + 'px';\r\n        image.paddingRight=20 + 'px';\r\n        \r\n        //image.fixedRatio=.4\r\n        //image.height = 1;\r\n        //image.stretch = GUI.Image.STRETCH_UNIFORMM;\r\n        grid.addControl(image, 0, 0);\r\n    }\r\n\r\n\r\n    function DataRefresh() {\r\n\r\n        if (scene.deltaTime) {\r\n            tick += (scene.deltaTime);\r\n        }\r\n\r\n\r\n        if (tick >= 100) {\r\n\r\n            dataText.text = drawdatatext;\r\n\r\n\r\n            tick = 0;\r\n        }\r\n\r\n    }\r\n\r\n    function setViewData(data) {\r\n        drawdatatext = data;\r\n    }\r\n\r\n    function clearViewData() {\r\n        drawdatatext = \"sin datos\"\r\n    }\r\n\r\n    var dataobserver = {};\r\n\r\n    function open() {\r\n\r\n        dataobserver = scene.onBeforeRenderObservable.add(() => {\r\n\r\n            DataRefresh();\r\n        });\r\n\r\n\r\n        var openKeys = [];\r\n        openKeys.push({\r\n            frame: 0,\r\n            value: 0 //BABYLON.Vector2.Zero()\r\n        });\r\n        openKeys.push({\r\n            frame: 10,\r\n            value: 1 // new BABYLON.Vector2(1, 1)\r\n        });\r\n\r\n        var animationOpen = new BABYLON.Animation(\r\n            'scaleAnimationOpen',\r\n            'scaleX',\r\n            30,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationOpen.setKeys(openKeys);\r\n\r\n        let easingFunction = new BABYLON.BounceEase(1, 4);\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n        animationOpen.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationOpen);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1);\r\n        //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n        scene.beginDirectAnimation(container, [animationOpen], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    function close() {\r\n\r\n        scene.onBeforeRenderObservable.remove(dataobserver)\r\n\r\n\r\n        var keys = [];\r\n        keys.push({\r\n            frame: 0,\r\n            value: 1\r\n        });\r\n        keys.push({\r\n            frame: 10,\r\n            value: 0\r\n        });\r\n\r\n\r\n        var animationClose = new BABYLON.Animation(\r\n            'scaleAnimation',\r\n            'scaleX',\r\n            10,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationClose.setKeys(keys);\r\n\r\n        let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n        animationClose.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationClose);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n        //menuPlane.dispose();\r\n        //});\r\n\r\n        scene.beginDirectAnimation(container, [animationClose], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    open();\r\n\r\n\r\n\r\n    return { displayPlane:windowMesh,container,addFormulaImage, setViewData, clearViewData, open, close, dataText };\r\n}","import * as BABYLON from 'babylonjs'\r\nimport * as GUI from 'babylonjs-gui';\r\n\r\nexport default function XRControlDisplay(scene, size, XRPickable) {\r\n\r\n    // WINDOW PLANE FOR CONTROL AND POSITION\r\n\r\n    var windowMesh = new BABYLON.MeshBuilder.CreatePlane(\"windown_plane\", {\r\n        width: size * (0.8),\r\n        height: size * (0.15),\r\n        sideOrientation: BABYLON.Mesh.DOUBLESIDE\r\n    }, scene);\r\n\r\n    windowMesh.XRPickable = XRPickable;\r\n    windowMesh.nonXREditable = true;\r\n\r\n    var window_texture = new GUI.AdvancedDynamicTexture.CreateForMesh(windowMesh);\r\n    window_texture.scaleTo(400,100)\r\n\r\n    var win_rectangle = new GUI.Rectangle(\"container\")\r\n    win_rectangle.width = 1;\r\n    win_rectangle.height = 1;\r\n    \r\n    //container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    //container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n   \r\n    //container.cornerRadius = 20;\r\n    //container.color = \"Orange\";\r\n    win_rectangle.thickness = 0;\r\n    win_rectangle.background = '#00000066';\r\n    \r\n    //container.paddingTopInPixels = 15;\r\n    //container.paddingLeftInPixels = 15;\r\n    //container.zIndex=-1;\r\n\r\n    \r\n    var win_grid = new GUI.Grid(\"win_grid\")\r\n    win_grid.addRowDefinition(1);\r\n    win_grid.addColumnDefinition(.7)\r\n    win_grid.addColumnDefinition(.15)\r\n    win_grid.addColumnDefinition(.15)\r\n\r\n    win_grid.paddingLeftInPixels=5;\r\n    \r\n\r\n    const win_text_name = new GUI.TextBlock(\"win_text_name\");\r\n    win_text_name.fontFamily = \"Helvetica\";\r\n    //win_text_name.textWrapping = true;\r\n    win_text_name.text = \"Pantalla de controles\"\r\n    win_text_name.color = \"white\";\r\n    win_text_name.fontSize = 28;\r\n    win_text_name.height = \"100px\";   \r\n    win_text_name.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT\r\n   \r\n\r\n    win_grid.addControl(win_text_name,0,0);\r\n\r\n\r\n    win_rectangle.addControl(win_grid);\r\n    \r\n\r\n    window_texture.addControl(win_rectangle);\r\n\r\n\r\n    //DISPLAY PLANE FOR CONTENT\r\n    \r\n    var displayPlane = new BABYLON.MeshBuilder.CreatePlane(\"displayPlaneinfo\", {\r\n        width: size * (0.8),\r\n        height: size * (0.8)\r\n    }, scene);\r\n\r\n    var local_pos = new BABYLON.Vector3(-0.7, .5, 0);\r\n    windowMesh.position = local_pos\r\n    windowMesh.rotation.y = (90 * (Math.PI / 180))\r\n    \r\n    \r\n    var ajust_pos=displayPlane.getBoundingInfo().boundingBox.maximum.y +windowMesh.getBoundingInfo().boundingBox.maximum.y\r\n    var change_axis = new BABYLON.Vector3(0, -ajust_pos, 0);\r\n    \r\n    displayPlane.parent = windowMesh;\r\n    displayPlane.position = change_axis;\r\n\r\n\r\n    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix   \r\n    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n    \r\n    //displayPlane.nonXREditable = true;\r\n    //displayPlane.XRPickable = XRPickable;\r\n    //displayPlane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL \r\n    \r\n\r\n    var container_texture = new GUI.AdvancedDynamicTexture.CreateForMesh(displayPlane);\r\n    container_texture.scaleTo(300,300)\r\n    //container_texture.idealWidth = 800;\r\n    //container_texture.idealHeight = 600;\r\n    //container_texture.useSmallestIdeal = true\r\n\r\n\r\n    var container = new GUI.Rectangle(\"container\")\r\n    container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n    container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    container.width = 1;\r\n    //container.height = \"250px\";\r\n    //container.cornerRadius = 20;\r\n    //container.color = \"Orange\";\r\n    container.thickness = 0;\r\n    //container.background = \"green\";\r\n    //container.paddingTopInPixels = 15;\r\n    //container.paddingRightInPixels = 15;\r\n    container_texture.addControl(container);\r\n\r\n\r\n\r\n    var panel = new GUI.StackPanel(\"panel\");\r\n    container.addControl(panel);\r\n    panel.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n    panel.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    \r\n\r\n\r\n\r\n    var controlPanel = new GUI.SelectionPanel(\"spi\");\r\n    controlPanel.width = 1;\r\n    controlPanel.height = \"170px\";\r\n    controlPanel.background = \"#1388AF\";\r\n    controlPanel.thickness = 0;\r\n    controlPanel.fontSize = 17;\r\n\r\n\r\n    controlPanel.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    controlPanel.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n\r\n    panel.addControl(controlPanel);\r\n\r\n\r\n    var button = GUI.Button.CreateSimpleButton(\"but\", \"Ejecutar\");\r\n    //button.width = 0.5;\r\n    button.height = \"40px\";\r\n    button.color = \"white\";\r\n    button.fontSize = 20;\r\n    button.background = \"#1388AF\";\r\n    //button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    //button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;               \r\n    //button.top = \"-10px\";\r\n\r\n    //button.onPointerClickObservable.add(ExecuteButton);\r\n    panel.addControl(button);\r\n\r\n\r\n    var button2 = GUI.Button.CreateSimpleButton(\"but\", \"Reiniciar\");\r\n    //button.width = 0.5;\r\n    button2.height = \"40px\";\r\n    button2.color = \"white\";\r\n    button2.fontSize = 20;\r\n    button2.background = \"#1388AF\";\r\n    //button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    //button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;               \r\n    //button.top = \"-10px\";\r\n\r\n    //button.onPointerClickObservable.add(ExecuteButton);\r\n    panel.addControl(button2);\r\n\r\n\r\n    function open() {\r\n\r\n\r\n        var openKeys = [];\r\n        openKeys.push({\r\n            frame: 0,\r\n            value: 0 //BABYLON.Vector2.Zero()\r\n        });\r\n        openKeys.push({\r\n            frame: 10,\r\n            value: 1 // new BABYLON.Vector2(1, 1)\r\n        });\r\n\r\n        var animationOpen = new BABYLON.Animation(\r\n            'scaleAnimationOpen',\r\n            'scaleX',\r\n            30,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationOpen.setKeys(openKeys);\r\n\r\n        let easingFunction = new BABYLON.BounceEase(1, 4);\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n        animationOpen.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationOpen);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1);\r\n        //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n        scene.beginDirectAnimation(container, [animationOpen], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    function close() {\r\n\r\n\r\n        var keys = [];\r\n        keys.push({\r\n            frame: 0,\r\n            value: 1\r\n        });\r\n        keys.push({\r\n            frame: 10,\r\n            value: 0\r\n        });\r\n\r\n\r\n        var animationClose = new BABYLON.Animation(\r\n            'scaleAnimation',\r\n            'scaleX',\r\n            10,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationClose.setKeys(keys);\r\n\r\n        let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n        animationClose.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationClose);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n        //menuPlane.dispose();\r\n        //});\r\n\r\n        scene.beginDirectAnimation(container, [animationClose], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    var observables_list = [];\r\n\r\n    function addObserver(params) {\r\n\r\n        observables_list.push(params);\r\n\r\n    }\r\n\r\n    function removeObserver(number) {\r\n        button.onPointerUpObservable.remove(observables_list[number])\r\n        observables_list.splice(number, 1);\r\n    }\r\n\r\n    function clearObservers() {\r\n        button.onPointerUpObservable.clear();\r\n        observables_list = []\r\n    }\r\n\r\n    function clearItems() {\r\n\r\n        controlPanel.height = \"2px\"\r\n        var number = controlPanel.groups.length - 1;\r\n        for (var i = 0; i <= number; i++) {\r\n            controlPanel.removeGroup(i);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    return {\r\n        displayPlane:windowMesh,\r\n        container,\r\n        button,\r\n        button2,\r\n        controlPanel,\r\n        open,\r\n        close,\r\n        addObserver,\r\n        removeObserver,\r\n        clearObservers,\r\n        clearItems\r\n    }\r\n\r\n}\r\n","\r\nimport * as BABYLON from 'babylonjs'\r\nimport * as GUI from 'babylonjs-gui';\r\n\r\nexport default class XRDisplayPlane{\r\n\r\n    observables_list = [];\r\n\r\n    constructor(width,height,XRPickable,nonXREditable,scene){\r\n        this.scene=scene;\r\n\r\n        this.displayPlane = new BABYLON.MeshBuilder.CreatePlane(\"displayPlaneinfo\", {\r\n            width: width,\r\n            height: height \r\n        }, this.scene);\r\n        \r\n        this.displayPlane.nonXREditable = nonXREditable;\r\n        this.displayPlane.XRPickable = XRPickable;\r\n\r\n    //displayPlane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL       \r\n\r\n\r\n    this.container_texture = new GUI.AdvancedDynamicTexture.CreateForMesh(this.displayPlane);\r\n\r\n    var local_pos = new BABYLON.Vector3(0, 1.5, 0);\r\n    \r\n    this.displayPlane.position = local_pos; //position sphere relative to world\r\n    this.displayPlane.rotation.y = (90 * (Math.PI / 180))\r\n    \r\n \r\n    var container = new GUI.Rectangle(\"container\")\r\n    //container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    //container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n    container.width = 1;\r\n    container.height = 1;\r\n    //container.cornerRadius = 20;\r\n    //container.color = \"Orange\";\r\n    container.thickness = 0;\r\n    container.background = \"white\";\r\n    container.alpha=0.05;\r\n    //container.paddingTopInPixels = 15;\r\n    //container.paddingLeftInPixels = 15;\r\n    container.zIndex=-1;\r\n\r\n\r\n    this.container_texture.addControl(container);\r\n   \r\n\r\n    }\r\n    \r\n    displayPlaneRPosition(x,y,z){\r\n        var local_pos = new BABYLON.Vector3(x, y, z);\r\n        this.displayPlane.position = local_pos; \r\n    }\r\n\r\n    displayPlaneRotation(degrees){\r\n        this.displayPlane.rotation.y = (degrees * (Math.PI / 180))\r\n    }\r\n\r\n    setScaleToInPixels(width,height){\r\n        this.container_texture.scaleTo(width,height)\r\n    }\r\n\r\n    idealHeight(height){\r\n        this.container_texture.idealHeight =height;\r\n    }\r\n\r\n    idealWidth(height){\r\n        this.container_texture.idealWidth=height;\r\n    }\r\n\r\n    useSmallestIdeal(bool){\r\n        this.container_texture.useSmallestIdeal = bool;\r\n    }\r\n\r\n    addControl(container){        \r\n        this.container_texture.addControl(container);\r\n    }\r\n\r\n    open() {\r\n\r\n\r\n        var openKeys = [];\r\n        openKeys.push({\r\n            frame: 0,\r\n            value: 0 //BABYLON.Vector2.Zero()\r\n        });\r\n        openKeys.push({\r\n            frame: 10,\r\n            value: 1 // new BABYLON.Vector2(1, 1)\r\n        });\r\n\r\n        var animationOpen = new BABYLON.Animation(\r\n            'scaleAnimationOpen',\r\n            'scaleX',\r\n            30,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationOpen.setKeys(openKeys);\r\n\r\n        let easingFunction = new BABYLON.BounceEase(1, 4);\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n        animationOpen.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationOpen);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1);\r\n        //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n        this.scene.beginDirectAnimation( this.displayPlane, [animationOpen], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    close() {\r\n\r\n\r\n        var keys = [];\r\n        keys.push({\r\n            frame: 0,\r\n            value: 1\r\n        });\r\n        keys.push({\r\n            frame: 10,\r\n            value: 0\r\n        });\r\n\r\n\r\n        var animationClose = new BABYLON.Animation(\r\n            'scaleAnimation',\r\n            'scaleX',\r\n            10,\r\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n        );\r\n        animationClose.setKeys(keys);\r\n\r\n        let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n        animationClose.setEasingFunction(easingFunction);\r\n\r\n        //container.animations.push(animationClose);\r\n\r\n        //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n        //menuPlane.dispose();\r\n        //});\r\n\r\n        this.scene.beginDirectAnimation(this.displayPlane, [animationClose], 0, 100, false, 1);\r\n\r\n    }\r\n\r\n    addObserver(params) {\r\n\r\n        this.observables_list.push(params);\r\n\r\n    }\r\n\r\n    removeObserver(number) {\r\n\r\n        this.observables_list.splice(number, 1);\r\n    }\r\n\r\n    clearObservers() {\r\n\r\n        this.observables_list = [];\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n\r\nexport class exercise {\r\n    constructor(questionInput = \"\", answersInput = [\"\"], correctanswerInput = 0, extraDataInput = [\"\"]) {\r\n\r\n        this.quiz = {\r\n            question:questionInput,\r\n            answers:answersInput,\r\n            correctanswer:answersInput[correctanswerInput],\r\n            extradata:extraDataInput\r\n        }\r\n\r\n    }\r\n\r\n    addLogic(logic=function(){}) {\r\n        this.Load_Logic = logic\r\n    }\r\n    addModels(models=async function(){}) {\r\n        this.Load_Models = models\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport var quiz1 = new exercise(\"actividad: Un automovilista viaja en una carretera recta a una velocidad constante de 90Km/h. Determinar la distancia que recorre en 5 minutos\", [\"A) 7.5 km\", \"B) 10.4 Km\", \"C) 5400 m\", \"D) 7200 m\"], 0);\r\n","\r\n\r\nimport * as Exercise from '../../BabylonScene/components/exercise'\r\n\r\nimport 'babylonjs-loaders';\r\n\r\n        \r\n        export var quiz1 = new Exercise.exercise(\r\n            \"1. En el transcurso de 3 segundos un auto de juguete viajó a una rapidez de 3m/s. ¿Que distancia recorrió?\",\r\n            [\"A) 9.0 metros\", \"B) 3.0 metros\", \"C) 4.7 metros\", \"D) 3.5 metros\"],\r\n            0,\r\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n    \r\n       \r\n        export var quiz2 = new Exercise.exercise(\r\n            \"2. Un auto de juguete se movio 7 metros durante 3.5 segundos. ¿que velocidad obtuvo?\",\r\n            [\"A) 0.5 m/s\", \"B) 4.0 m/s\", \"C) 2.0 m/s\", \"D) 3.0 m/s\"],\r\n            2,\r\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n \r\n        export var quiz3 = new Exercise.exercise(\r\n            \"3. Un auto de juguete Recorrió 6.5 metros a una velocidad de 1.5 m/s. ¿cuanto tiempo duró su movimiento?\",\r\n            [\"A) 2.5 segs\", \"B) 4.3 segs\", \"C) 3.3 segs\", \"D) 6.5 segs\"],\r\n            1,\r\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n        \r\n     \r\n\r\n      ","export default __webpack_public_path__ + \"static/media/help0.c3212ce6.png\";","export default __webpack_public_path__ + \"static/media/img1.713bf9ed.PNG\";","export default __webpack_public_path__ + \"static/media/img2.4025a0ce.PNG\";","export default __webpack_public_path__ + \"static/media/img3.9145ad0b.PNG\";","export default __webpack_public_path__ + \"static/media/img4.05bf6d66.PNG\";","export default __webpack_public_path__ + \"static/media/alert1.ce34ff4b.png\";","export default __webpack_public_path__ + \"static/media/help1.93990bf3.png\";","export default __webpack_public_path__ + \"static/media/cardboard.ca4cc733.png\";","import * as BABYLON from 'babylonjs'\r\nimport * as GUI from 'babylonjs-gui';\r\n\r\nexport class ImageInfoCard {\r\n    constructor(name, src) {\r\n        this.name = name;\r\n        this.src = src;\r\n        this.Base_image = new GUI.Image(name, src);\r\n        this.Base_image.zIndex=-1;\r\n        this.info_image_container = new GUI.Container(name)\r\n\r\n        this.info_image_container.addControl(this.Base_image)\r\n\r\n    }\r\n\r\n    addLogic(logic=function(){}) {\r\n        this.Load_Logic = logic\r\n    }\r\n    addModels(models=async function(){}) {\r\n        this.Load_Models = models\r\n    }\r\n\r\n}\r\n\r\nexport class ContainerInfoCard {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.info_image_container = container;\r\n        \r\n\r\n    }\r\n\r\n    addLogic(logic=function(){}) {\r\n        this.Load_Logic = logic\r\n    }\r\n    addModels(models=async function(){}) {\r\n        this.Load_Models = models\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import React, { Component, useRef } from 'react'\nimport Main from '../../WebLayout/Main';\nimport * as BABYLON from 'babylonjs';\nimport BabylonScene from '../../BabylonScene'; // import the component above linking to file we just created.\nimport * as GUI from 'babylonjs-gui';\nimport 'babylonjs-loaders';\n\n\nimport { Timer } from \"easytimer.js\";\n\n\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Button } from '@material-ui/core';\n\n\nimport { useAuth } from '../../Contexts/AuthContext'\n\n\nimport * as Ground from '../../BabylonScene/components/Ground'\n\n\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\n\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\n\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\n\n//import WebCam from '../../EmotionRecognition_Components/WebCam'\n//import * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\n\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\n\nimport XRDisplayPlane from '../../FisicARtivo_Components/XRDisplayPlane';\n\nimport * as QuizList from '../exercise_1_1/quizList'\n\nimport help0 from '../exercise_1_1/resources/help0.png'\nimport img1 from '../exercise_1_1/resources/img1.PNG'\nimport img2 from '../exercise_1_1/resources/img2.PNG'\nimport img3 from '../exercise_1_1/resources/img3.PNG'\nimport img4 from '../exercise_1_1/resources/img4.PNG'\nimport alert1 from '../exercise_1_1/resources/alert1.png'\nimport help1 from '../exercise_1_1/resources/help1.png'\nimport cardboard from '../exercise_1_1/resources/cardboard.png'\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\n\nclass ExercisePage extends Component {\n    render() {\n        return (\n            <Main data={GetMainContent} />\n\n        )\n    }\n}\n\n\n\nconst useStyles = makeStyles(theme => ({\n    imagebox: {\n        //backgroundImage: 'url(' + drawerImage + ')',   \n        height: '100%',\n        width: '60%',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    card: {\n        height: '100%',\n\n        flexDirection: 'column',\n    },\n    media: {\n        height: 400,\n\n    },\n    babylonbuttons: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n\n    },\n    image: {\n        paddingTop: '10px',\n        paddingBottom: '20px'\n    }\n}));\n\nfunction GetMainContent() {\n\n    const classes = useStyles();\n\n    const { currentUser } = useAuth();\n\n    //const webcam = useRef({});\n\n    var exerciseData = {\n        id: 'exercise_1_1',\n        generalTime: '00:00',\n        totalErrors: 0,\n        isCompleted: false,\n        quizes: {\n            quiz_1: {\n                id: 'quiz_1',\n                time: '00:00',\n                errors: 0,\n                isCompleted: false\n            },\n            quiz_2: {\n                id: 'quiz_2',\n                time: '00:00',\n                errors: 0,\n                isCompleted: false\n            },\n            quiz_3: {\n                id: 'quiz_3',\n                time: '00:00',\n                errors: 0,\n                isCompleted: false\n            },\n\n        }\n    }\n\n\n    DataCapture.setCurrentUser(currentUser);\n\n    DataCapture.setExerciseData(exerciseData);\n\n    DataCapture.checkUserExerciseData(exerciseData.id);\n\n    DataCapture.globalTimer.start();\n\n    //EmotionsAPI.setCurrentUser(currentUser);\n\n    //EmotionsAPI.loadModels();\n\n   /* async function takeCapture() {\n        webcam.current.takeCapture();\n    }\n    async function stopCamera() {\n        webcam.current.stopCamera();\n    }\n\n    async function startCamera() {\n        webcam.current.startCamera();\n    }*/\n\n\n    var onSceneMount = (e: SceneEventArgs) => {\n        const { canvas, scene, engine } = e;\n\n        engine.displayLoadingUI();\n\n        const QuizTimer = new Timer();\n\n        // This creates and positions a free camera (non-mesh)\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(-5, 3, 0), scene);\n        const camera_x = -3\n        const camera_y = 1\n        const camera_z = 0\n\n        const camera_initialPos = new BABYLON.Vector3(camera_x, camera_y, camera_z);\n        const camera_initialTarget = new BABYLON.Vector3(0, .5, 0);\n        const camera_speed = 0.7;\n        const camera_angularSensibility = 1200;\n\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\n        // This targets the camera to scene origin\n        camera.setTarget(camera_initialTarget);\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, false);\n\n        camera.speed = camera_speed;\n        camera.angularSensibility = camera_angularSensibility;\n        camera.inertia = .5;\n\n\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.7;\n\n        // Light\n        //const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\n        //light.intensity = 0.9;\n\n        // Skybox\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\n        skyboxMaterial.backFaceCulling = false;\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.disableLighting = true;\n        skybox.material = skyboxMaterial;\n\n\n        // physics\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\n\n        var physicsEngine = scene.getPhysicsEngine();\n        //physicsEngine.setSubTimeStep(1);\n\n        // Enable Collisions\n        scene.collisionsEnabled = true;\n\n        //Then apply collisions and gravity to the active camera\n        camera.checkCollisions = true;\n        camera.applyGravity = true;\n\n        //Set the ellipsoid around the camera (e.g. your player's size)\n        camera.ellipsoid = new BABYLON.Vector3(1, .5, 1);\n\n        var ground = Ground.createPlayGroundGigant(scene);\n        //var ground= Ground.createPlayGroundLarge(scene);\n        ground.checkCollisions = true;\n\n        //addSceneModels();\n        var xr = {};\n\n\n        async function XRmode() {\n\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\n\n            xr = await scene.createDefaultXRExperienceAsync({\n\n\n                disableDefaultUI: true,\n                //floorMeshes: [ground],\n                uiOptions: {\n\n                    sessionMode: \"immersive-ar\"\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\n                    , referenceSpaceType: \"local-floor\"\n                },\n                inputOptions: { doNotLoadControllerMeshes: false }\n            });\n\n\n            const fm = xr.baseExperience.featuresManager;\n            //const xrTest = fm.enableFeature(BABYLON.WebXRHitTest, \"latest\");\n            //const anchors = fm.enableFeature(BABYLON.WebXRAnchorSystem, 'latest');\n            const xrBackgroundRemover = fm.enableFeature(BABYLON.WebXRBackgroundRemover.Name);\n\n\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\n                    // floor is at y === 2\n                    camera.y = 2;\n                \n                });*/\n\n\n\n\n            xr.baseExperience.onStateChangedObservable.add((state) => {\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\n                    ground.visibility = 0;\n                    skybox.isVisible = false;\n                    //GUI_controller.createXRGui();\n                    //stopCamera();\n                    //EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\n\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\n                    ground.visibility = 1;\n                    skybox.isVisible = true;\n                    //GUI_controller.createNormalGui();\n                    //startCamera();\n                    //EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\n\n\n\n\n                }\n\n\n            })\n\n\n\n        }\n\n        XRmode();\n\n       \n\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\n        gizmoManager.selectMode(0);\n\n\n        var pickedMesh = null;\n        var attachedMesh = null;\n        var pressed = null\n\n        //observables generales globales para picking meshes\n\n        scene.onPointerObservable.addOnce(pointerinfo => {\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\n                QuizTimer.start();\n            }\n        })\n\n        scene.onPointerObservable.add((pointerInfo) => {\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\n\n            //if (pointerInfo.type === 4) {\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\n            // }\n            //}\n\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\n\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\n\n                    scene.constantlyUpdateMeshUnderPointer = true;\n\n                    pressed = true;\n\n                    attachedMesh = pickedMesh;\n\n                    gizmoManager.attachToMesh(attachedMesh);\n\n                }\n\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\n\n                }\n\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\n\n                    attachedMesh = null;\n                    gizmoManager.attachToMesh(null);\n                }\n\n            }\n\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\n\n                scene.constantlyUpdateMeshUnderPointer = false;\n\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\n\n\n                    // pickedMesh.physicsImpostor.wakeUp();\n                    pressed = false;\n                    //pickedMesh.physicsImpostor.dispose();\n                    //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\n\n                    pickedMesh = null;\n\n                }\n\n            }\n\n        });\n\n        scene.onBeforePhysicsObservable.add(() => {\n\n            if (pressed && pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\n\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\n            }\n\n\n        });\n\n\n        scene.registerBeforeRender(() => {\n\n            /* if(xr) {\n                 if(xr.input.controllers.length) {\n         \n                     const c = xr.input.controllers[0];\n                     \n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\n                     laserPointer.position.copyFrom(c.pointer.position);\n                    \n                     laserPointer.parent = xr.baseExperience.container;\n                 }\n             }*/\n        })\n\n\n        //edit code from here...\n        var help_card = new ImageInfoCard(\"help0\", help0)\n        var info_card1 = new ImageInfoCard(\"card4\", img4)\n        var info_card2 = new ImageInfoCard(\"card1\", img1)\n        var info_card3 = new ImageInfoCard(\"card2\", img2)\n        var info_card4 = new ImageInfoCard(\"card3\", img3)\n        var alert_card = new ImageInfoCard(\"card_alert\", alert1)\n        var exercise_card = new ImageInfoCard(\"card5\", help1)\n\n        help_card.addLogic(() => {\n\n        })\n\n        info_card1.addLogic(() => {\n            section_infodisplay.logicManager.ClearAll();\n            card1Logic();\n        })\n\n        alert_card.addLogic(() => {\n            section_infodisplay.logicManager.ClearAll();\n        })\n\n        exercise_card.addLogic(() => {\n            section_infodisplay.logicManager.ClearAll();\n            card4Logic();\n        })\n\n        //DATA DISPLAY COMPONENTS\n\n        var section_infodisplay = InfoDisplay(scene, 2);\n\n\n        section_infodisplay.addCard(help_card)\n        section_infodisplay.addCard(info_card1)\n        section_infodisplay.addCard(info_card2)\n        section_infodisplay.addCard(info_card3)\n        section_infodisplay.addCard(info_card4)\n        section_infodisplay.addCard(alert_card)\n        section_infodisplay.addCard(exercise_card)\n\n        section_infodisplay.Start(0);\n\n        //\n\n        //declarate initial values \n\n\n        var loaded_exercise_index = 0;\n\n        function card1Logic() {\n\n            var loaded_meshes = []\n            var disposable_ghosts = []\n            var disposable_clones = []\n            var disposable_lines = []\n            var disposable_panels = []\n            var loaded_onBeforeRenderObservables = []\n            var defaultmeshes = [];\n\n\n\n\n            function rotatewithgrades(mesh, grades) {\n\n                mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\n            }\n\n            function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\n\n                var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\n                var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\n                var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\n\n                collider.scaling.copyFrom(bounds);\n                collider.XRPickable = true;\n                collider.visibility = 0;\n\n                collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\n\n                collider.position = geometricCenter;\n\n                modelMeshes[rootMesh].setParent(collider);\n\n\n\n\n            }\n\n\n            async function createModel() {\n\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"bluecar.glb\", scene));\n\n                var carmesh = carmodel.meshes;\n\n                carmesh[0].scaling.scaleInPlace(0.15);\n                carmesh[0].position.set(-0.5, 0, 0);\n\n\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\n\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\n\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\n\n                rotatewithgrades(carcollider, 180);\n\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \n\n\n                defaultmeshes.push(carmesh);\n                defaultmeshes.push(carcollider);\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh)\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider)\n            }\n\n\n\n            class PinPointMeasure {\n                constructor(pick1, scene) {\n                    this.sphere1 = BABYLON.Mesh.CreateSphere(\"measure_sphere1\", 8, .05, scene);\n\n                    this.sphere1.parent = pick1;\n\n                    this.sphere1.position = new BABYLON.Vector3(0, 0, 0);\n\n\n                    this.buttonpress = false;\n                    this.expandmeasurement = false;\n                }\n\n\n\n                createMeasure(pick2, scene) {\n                    this.sphere2 = BABYLON.Mesh.CreateSphere(\"measure_sphere2\", 8, .05, scene);\n\n                    //this.sphere2.parent=pick2.pickedMesh;\n\n                    this.sphere2.position = pick2.position;\n\n\n\n                    this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n                    var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                    var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                    var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                    var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n\n                    this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n                    //this.tube = new BABYLON.MeshBuilder.CreateTube(\"tube\",{path: [this.sphere1.getAbsolutePosition(),this.sphere2.getAbsolutePosition(),],radius: .01},scene);\n                    this.line = new BABYLON.Mesh.CreateLines(\"line\", [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], scene, true);\n\n\n                    var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                    var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                    var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n\n\n\n                }\n\n                disposeMeasurement(scene) {\n                    this.buttonpress = true;\n                    //this.container.dispose();\n                    this.sphere1.dispose();\n                    this.sphere2.dispose();\n                    this.line.dispose();\n\n                    //this.line1.dispose();\n                    //this.line2.dispose();\n\n                    scene.onBeforeRenderObservable.remove(this.measureObs)\n\n                }\n\n                calculateMeasurement(scene) {\n\n                    var count = 0;\n\n                    this.measureObs = scene.onBeforeRenderObservable.add(() => {\n\n                        count += (scene.deltaTime);\n\n                        if (this.sphere1 && this.sphere2) {\n\n                            this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n\n                            var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                            var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                            var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                            var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n                            this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n\n                            var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                            var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                            var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n                            this.line = new BABYLON.Mesh.CreateLines(null, [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], null, null, this.line);\n\n\n\n                        }\n\n\n                    });\n                }\n\n                getMeasurementData() {\n\n                    return this.distances;\n                }\n\n\n            }\n\n            //Impulse Settings\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\n            var impulseMagnitude = 5;\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\n\n            var count = 0;\n            var tick = 0;\n            var segundero = 0.0;\n\n            var obj_Distance = 15;\n            var obj_Time = 3;\n            var obj_Velocity = 1;\n\n            var display_Distance = 0;\n            var display_Time = 0;\n            var display_Velocity = 5;\n\n\n            var to_clone_model;\n            var car;\n\n            function prepare() {\n\n                createModel().then(() => {\n\n\n                    to_clone_model = defaultmeshes[0];\n\n                    car = scene.getMeshByName(\"carBox1\")\n\n                })\n            }\n\n            prepare();\n\n\n            function activate() {\n\n                try {\n\n                    limitTime(car);\n                    //limitDistance(car);\n                    //limitedeTiempo(car);\n                    //limitedeDistancia(car);\n\n\n                } catch (error) {\n                    console.log(error);\n                }\n\n            }\n\n            var transformForce = function (mesh, vec) {\n                var mymatrix = new BABYLON.Matrix();\n                mesh.rotationQuaternion.toRotationMatrix(mymatrix);\n                return BABYLON.Vector3.TransformNormal(vec, mymatrix);\n            };\n\n            function limitTime(mesh) {\n\n\n                function ghosting(mesh, data) {\n\n\n                    to_clone_model = defaultmeshes[0];\n                    var ghost_clone = to_clone_model[0].clone(\"bModel\");\n                    ghost_clone.setParent(null)\n                    //var ghost_sphere = ghost_model[0].createInstance(\"bModel\")\n\n                    for (var child of ghost_clone.getChildMeshes()) {\n                        child.material = new BABYLON.StandardMaterial(\"mat\");\n                        child.material.alpha = 0.25;\n                        //child.material.diffuseTexture = new BABYLON.Texture(\"textures/speckles.jpg\");\n                    }\n\n\n                    ghost_clone.setAbsolutePosition(mesh.position);\n                    ghost_clone.position.y -= 0.1\n\n\n                    var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 12, diameter: .05 }, scene);\n                    var material = new BABYLON.StandardMaterial(\"mat\");\n                    material.diffuseColor = new BABYLON.Color4(0, 1, 0, 1)\n                    //ghost_sphere.visibility = 1;\n                    ghost_sphere.material = material;\n\n\n                    ghost_sphere.setAbsolutePosition(mesh.position);\n                    //ghost_sphere.position.set(mesh.position);\n\n\n\n                    disposable_clones.push(ghost_clone)\n                    disposable_ghosts.push(ghost_sphere)\n                    section_infodisplay.logicManager.AddDisposableStuff(ghost_clone);\n                    section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere);\n\n\n\n                    function applyLine() {\n                        if (disposable_ghosts.length > 1) {\n                            var past_ghost = disposable_ghosts[disposable_ghosts.length - 2]\n                            var actual_ghost = disposable_ghosts[disposable_ghosts.length - 1]\n                            \n                            var line = new BABYLON.Mesh.CreateLines(\"line\", [past_ghost.getAbsolutePosition(), actual_ghost.getAbsolutePosition()], scene, true);\n                            disposable_lines.push(line);\n\n                            section_infodisplay.logicManager.AddDisposableStuff(line);\n                        }\n\n                    }\n\n\n                    function applyDataPanel(mesh) {\n\n                        var miniplane = BABYLON.MeshBuilder.CreatePlane(\"planes\", { height: .1, width: .25 }, scene);\n                        miniplane.setAbsolutePosition(mesh.position)\n                        miniplane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\n                        miniplane.position.y = .5;\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplane, 400, 160);\n\n                        section_infodisplay.logicManager.AddTemporalGUI(miniplane)\n                        disposable_panels.push(miniplane);\n\n                        var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\n                        button1.width = 1;\n                        button1.height = 1;\n                        button1.color = \"white\";\n                        button1.fontStyle=\"bold\"\n                        button1.fontSize = 50;\n                        button1.background = '#00000066';\n                        button1.textBlock.text = \"Velocidad: \" + '\\n' + data.obj_Velocity.toString() + \" m/s\";\n\n                        var dataToshow = 1;\n\n                        button1.onPointerUpObservable.add(function () {\n                            switch (dataToshow) {\n                                case 1: dataToshow = 2\n                                    button1.textBlock.text = \"Tiempo: \" + '\\n' + data.display_Time.toString() + \" segs\";\n                                    break;\n                                case 2: dataToshow = 3\n                                    button1.textBlock.text = \"Distancia: \" + '\\n' + data.display_Distance.toString() + \" mts\";\n                                    break;\n                                case 3: dataToshow = 1\n                                    button1.textBlock.text = \"Velocidad: \" + '\\n' + data.obj_Velocity.toString() + \" m/s\";\n                                    break;\n\n                                default:\n                                    break;\n                            }\n\n\n\n\n                        });\n                        advancedTexture.addControl(button1);\n\n\n                        //LOOK TEST WITH QUATERNIONS\n\n                        var look = function (mesh, pos) {\n                            var dv = pos.subtract(mesh.position);\n                            var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\n                            mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\n                        };\n\n\n\n                    }\n\n\n                    applyDataPanel(ghost_clone);\n                    applyLine();\n\n\n                }\n\n\n                function RefreshDataInMilisecs(time, refreshRate) {\n\n                    var tick = 0;\n                    var refreshsteps = Math.round((time / refreshRate))\n                    var actualstep = 0;\n\n\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\n                        tick += (scene.deltaTime);\n\n                        if (tick >= refreshRate * 1000) {\n\n\n                            if (actualstep <= refreshsteps) {\n\n                                //code to refresh here\n\n                                tick = 0;\n\n                                display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\n\n\n\n                                var info = { display_Distance, display_Time, obj_Velocity }\n\n                                ghosting(mesh, info)\n\n                                if (mesh.physicsImpostor) {\n                                    mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                                }\n\n\n\n                            } else {\n\n                                actualstep = 0;\n                                tick = 0;\n                                if (mesh.physicsImpostor) {\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\n                                }\n                                scene.onBeforeRenderObservable.remove(temporalObs);\n                            }\n                            actualstep++\n\n                        }\n\n                    });\n\n                    loaded_onBeforeRenderObservables.push(temporalObs);\n\n                }\n\n                RefreshDataInMilisecs(obj_Time, 1)\n\n\n\n            }\n\n            function disposeAll() {\n\n                if (defaultmeshes.length > 0) {\n\n                    defaultmeshes.forEach(value => {\n\n                        if (Array.isArray(value)) {\n                            value.forEach(value => value.dispose());\n                        } else { value.dispose(); }\n                    });\n\n\n                }\n                defaultmeshes = [];\n            }\n\n            function disposeghosts() {\n\n\n                if (disposable_ghosts) {\n                    disposable_ghosts.forEach(item => {\n                        item.dispose();\n                    })\n                    disposable_ghosts = []\n\n                }\n\n                if (disposable_lines) {\n                    disposable_lines.forEach(item => {\n                        item.dispose();\n                    })\n                    disposable_lines = []\n                }\n\n\n                if (disposable_panels) {\n                    disposable_panels.forEach(item => {\n                        item.dispose();\n                    })\n                    disposable_panels = []\n                }\n\n\n                if (disposable_clones) {\n                    disposable_clones.forEach(item => {\n                        item.dispose();\n                    })\n                    disposable_clones = []\n                }\n\n\n            }\n\n\n\n            //var button = GUI.Button.CreateSimpleButton(\"but\", \"Presiona para ver animación\");\n            var button = GUI.Button.CreateImageOnlyButton(\"but\", \"images/pressme.png\")\n            button.color = \"transparent\"\n            var test = new XRDisplayPlane(.5, .33, true, true, scene);\n\n            test.setScaleToInPixels(300, 160)\n            test.displayPlane.position.set(0, 0.25, .5);\n\n            section_infodisplay.logicManager.AddTemporalGUI(test.displayPlane);\n\n            var switchmode = 1;\n            button.onPointerUpObservable.add(() => {\n                switch (switchmode) {\n                    case 1:\n                        activate();\n                        switchmode = 2;\n                        break;\n                    case 2:\n                        disposeghosts();\n                        disposeAll();\n                        prepare();\n                        disposeghosts();\n                        switchmode = 1;\n                    default:\n                        break;\n                }\n\n            });\n\n\n            test.addControl(button);\n\n\n\n\n        }\n\n        var OnscreenTimer = new Timer();\n\n        function card4Logic() {\n\n            var exercise_quizdisplay = XRQuizDisplay(scene, 1, true);\n            exercise_quizdisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\n            exercise_quizdisplay.displayPlane.position.x -= 0.3\n            exercise_quizdisplay.displayPlane.position.y += 0.3\n            exercise_quizdisplay.displayPlane.position.z -= 2.8\n\n            var exercise_datadisplay = XRDinamicsDataDisplay(scene, 1, true)\n            exercise_datadisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\n            exercise_datadisplay.displayPlane.position.x -= 0.4\n            exercise_datadisplay.displayPlane.position.y -= .3\n            exercise_datadisplay.displayPlane.position.z += 2.2          \n\n            exercise_datadisplay.addFormulaImage(\"/images/equ1-1.png\")\n\n            var exercise_control = XRControlDisplay(scene, 1, true)\n            exercise_control.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\n            exercise_control.displayPlane.position.x -= 0.3\n            exercise_control.displayPlane.position.y += .6\n            exercise_control.displayPlane.position.z += 2.2          \n\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_quizdisplay.displayPlane);\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_datadisplay.displayPlane);\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_control.displayPlane);\n\n            var quizesList = [];\n            var exercise_list = [];     \n            var loaded_meshes = [];\n            var loaded_onBeforeRenderObservables = [];\n\n            // Excercise Manager constructor function\n\n            exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\n\n                loaded_exercise_index--\n\n                if (loaded_exercise_index < 0) {\n                    loaded_exercise_index++;\n                } if (quizesList[loaded_exercise_index]) {\n                    resource_manager.Start(loaded_exercise_index)\n\n                }\n\n            });\n\n            exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\n\n                loaded_exercise_index++;\n\n                if (loaded_exercise_index > quizesList.length - 1) {\n                    loaded_exercise_index--;\n                }\n                if (quizesList[loaded_exercise_index]) {\n                    resource_manager.Start(loaded_exercise_index)\n\n                }\n\n            });\n\n            exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\n\n                if (exercise_quizdisplay.getIsCorrect()) {\n\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\n\n                    DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\n                    //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\n                    DataCapture.getQuizByID(currentQuiz).isCompleted = true;\n                    DataCapture.updateUserExerciseData(exerciseData.id);\n                    QuizTimer.reset();\n\n                    if (DataCapture.getExerciseData().isCompleted) {\n                        exercise_quizdisplay.setIscompleted(true);\n                        exercise_quizdisplay.allcompletedPanel.show();\n\n                    }else{\n                        exercise_quizdisplay.correctPanel.show();\n                    }\n\n\n\n                } else {\n\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\n\n                    DataCapture.addTotalError(currentQuiz);\n                    DataCapture.addQuizErrorByID(currentQuiz);\n                    DataCapture.updateUserExerciseData(exerciseData.id);\n\n                    if (DataCapture.getExerciseData().isCompleted) {\n                        exercise_quizdisplay.setIscompleted(true);\n                        exercise_quizdisplay.allcompletedPanel.show();\n\n                    }else{\n                        exercise_quizdisplay.incorrectPanel.show();\n                    }\n\n                }\n            });\n\n            exercise_control.button2.onPointerUpObservable.add(function () {\n\n                resource_manager.Reset();\n\n                camera.position.set(camera_x, camera_y, camera_z)\n                camera.setTarget(camera_initialTarget);\n                QuizTimer.reset();\n\n            });\n\n            if (!OnscreenTimer.isRunning()) {\n                OnscreenTimer.start();\n            }\n\n            function isCompleted_Question_number() {\n\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\n\n                if (DataCapture.getQuizByID(currentQuiz).isCompleted) {\n                    return \" (Completada)\"\n                } else {\n                    return \"\"\n                }\n\n            }\n            function Check_Errors_number() {\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\n\n                return DataCapture.getQuizByID(currentQuiz).errors;\n            }\n            function Check_Timer_number() {\n\n                if (DataCapture.getExerciseData().isCompleted) {\n                    OnscreenTimer.pause();\n\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds) + \"\\n\" + \"Sección de preguntas finalizada!\"\n                } else {\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds)\n                }\n            }\n            function formatTime(time) {\n                if (time <= 9) {\n                    return \"0\" + time;\n                } else {\n                    return time;\n                }\n            }\n\n            var timer_errors_numbers = scene.onBeforeRenderObservable.add(() => {\n\n\n                exercise_quizdisplay.time_number.text = \"Tiempo: \" + Check_Timer_number();\n                exercise_quizdisplay.error_number.text = \"Errores: \" + Check_Errors_number();\n                exercise_quizdisplay.question_number.text = \"Pregunta: \" + (loaded_exercise_index + 1) + \"/\" + (quizesList.length) + isCompleted_Question_number();\n            });\n\n\n\n            //loaded_onBeforeRenderObservables.push(timer_errors_numbers);\n            //  scene.onBeforeRenderObservable.remove(timer_errors_numbers)\n\n\n            function manageStuff() {\n\n\n\n                function addExercise(exercise) {\n                    exercise_list.push(exercise)\n                    quizesList.push(exercise.quiz);\n                }\n\n                function LoadQuiz(number) {\n                    exercise_quizdisplay.loadquiz(quizesList[number])\n                }\n\n                function Start(number) {\n                    loaded_exercise_index = number;\n                    exercise_list[number].Load_Models().then(function (meshes) {\n                        ClearStuff();\n                        loaded_meshes = meshes;\n\n                        if (exercise_list[number].Load_Logic) {\n\n                            exercise_list[number].Load_Logic();\n                            LoadQuiz(number);\n                            QuizTimer.reset();\n                        }\n\n\n                    });\n                }\n\n                function Reset() {\n                    Start(loaded_exercise_index);\n                    camera.position = camera_initialPos//new BABYLON.Vector3(-5,3,0);\n                    camera.setTarget(camera_initialTarget);\n\n                }\n\n                exercise_control.button2.onPointerUpObservable.add(function () {\n                    Reset();\n                });\n\n                function ClearStuff() {\n\n                    exercise_control.clearObservers();\n                    exercise_control.clearItems();\n                    exercise_datadisplay.clearViewData();\n\n\n                    console.log(\"reseteando\");\n                    if (loaded_onBeforeRenderObservables != undefined) {\n\n                        loaded_onBeforeRenderObservables.forEach(value => {\n\n                            scene.onBeforeRenderObservable.remove(value);\n                        });\n\n                    }\n                    if (loaded_meshes != undefined) {\n\n                        loaded_meshes.forEach(value => {\n\n                            if (Array.isArray(value)) {\n                                value.forEach(value => value.dispose());\n                            } else { value.dispose(); }\n                        });\n\n                        // addSceneModels();\n\n                    }\n\n                }\n\n                var manager = {\n                    addExercise,\n                    LoadQuiz,\n                    Start,\n                    Reset,\n                    ClearStuff,\n                }\n\n                return manager;\n\n            }\n\n\n            var resource_manager = manageStuff();\n\n\n            async function quiz1_models() {\n\n                function rotatewithgrades(mesh, grades) {\n\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\n                }\n\n\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\n\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\n\n                    collider.scaling.copyFrom(bounds);\n                    collider.XRPickable = true;\n                    collider.visibility = 0;\n\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\n\n                    collider.position = geometricCenter;\n\n                    modelMeshes[rootMesh].setParent(collider);\n\n\n\n\n                }\n\n                var defaultmeshes = [];\n\n\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"bluecar.glb\", scene));\n\n                var carmesh = carmodel.meshes;\n\n                carmesh[0].scaling.scaleInPlace(0.15);\n                carmesh[0].position.set(-.5, 0, 0);\n\n\n\n\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\n\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\n\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\n\n                rotatewithgrades(carcollider, 180);\n\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \n\n\n                defaultmeshes.push(carmesh);\n                defaultmeshes.push(carcollider);\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh)\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider)\n\n\n                return defaultmeshes;\n\n            }\n\n\n            async function quiz2_models() {\n\n                function rotatewithgrades(mesh, grades) {\n\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\n                }\n\n\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\n\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\n\n                    collider.scaling.copyFrom(bounds);\n                    collider.XRPickable = true;\n                    collider.visibility = 0;\n\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\n\n                    collider.position = geometricCenter;\n\n                    modelMeshes[rootMesh].setParent(collider);\n\n\n\n\n\n                }\n\n                var defaultmeshes = [];\n\n\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"redcar.gltf\", scene));\n\n                var carmesh = carmodel.meshes;\n\n                carmesh[0].scaling.scaleInPlace(0.15);\n                carmesh[0].position.set(-.5, 0, 0);\n\n\n\n\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\n\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\n\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\n\n                rotatewithgrades(carcollider, 180);\n\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \n\n\n                defaultmeshes.push(carmesh);\n                defaultmeshes.push(carcollider);\n\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh)\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider)\n\n                return defaultmeshes;\n\n            }\n\n\n            async function quiz3_models() {\n\n                function rotatewithgrades(mesh, grades) {\n\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\n                }\n\n\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\n\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\n\n                    collider.scaling.copyFrom(bounds);\n                    collider.XRPickable = true;\n                    collider.visibility = 0;\n\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\n\n                    collider.position = geometricCenter;\n\n                    modelMeshes[rootMesh].setParent(collider);\n\n\n\n\n\n\n                }\n\n                var defaultmeshes = [];\n\n\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"greencar.glb\", scene));\n\n                var carmesh = carmodel.meshes;\n\n                carmesh[0].scaling.scaleInPlace(0.15);\n                carmesh[0].position.set(-.5, 0, 0);\n\n\n\n\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\n\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\n\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\n\n                rotatewithgrades(carcollider, 180);\n\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \n\n\n                defaultmeshes.push(carmesh);\n                defaultmeshes.push(carcollider);\n\n\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh)\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider)\n\n\n\n\n                return defaultmeshes;\n\n            }\n\n            function exercise1Logic() {\n\n                var car = scene.getMeshByName(\"carBox1\");\n\n                class PinPointMeasure {\n                    constructor(pick1, scene) {\n                        this.sphere1 = BABYLON.Mesh.CreateSphere(\"measure_sphere1\", 8, .05, scene);\n\n                        this.sphere1.parent = pick1;\n\n                        this.sphere1.position = new BABYLON.Vector3(0, 0, 0);\n\n\n                        this.buttonpress = false;\n                        this.expandmeasurement = false;\n                    }\n\n\n\n                    createMeasure(pick2, scene) {\n                        this.sphere2 = BABYLON.Mesh.CreateSphere(\"measure_sphere2\", 8, .05, scene);\n\n                        //this.sphere2.parent=pick2.pickedMesh;\n\n                        this.sphere2.position = pick2.position;\n\n\n\n                        this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n                        var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                        var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                        var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                        var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n\n                        this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n                        //this.tube = new BABYLON.MeshBuilder.CreateTube(\"tube\",{path: [this.sphere1.getAbsolutePosition(),this.sphere2.getAbsolutePosition(),],radius: .01},scene);\n                        this.line = new BABYLON.Mesh.CreateLines(\"line\", [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], scene, true);\n\n\n                        var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                        var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                        var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n\n\n\n                    }\n\n                    disposeMeasurement(scene) {\n                        this.buttonpress = true;\n                        //this.container.dispose();\n                        this.sphere1.dispose();\n                        this.sphere2.dispose();\n                        this.line.dispose();\n\n                        //this.line1.dispose();\n                        //this.line2.dispose();\n\n                        scene.onBeforeRenderObservable.remove(this.measureObs)\n\n                    }\n\n                    calculateMeasurement(scene) {\n\n                        var count = 0;\n\n                        this.measureObs = scene.onBeforeRenderObservable.add(() => {\n\n                            count += (scene.deltaTime);\n\n                            if (this.sphere1 && this.sphere2) {\n\n                                this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n\n                                var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                                var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                                var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                                var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n                                this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n\n                                var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                                var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                                var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n                                this.line = new BABYLON.Mesh.CreateLines(null, [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], null, null, this.line);\n\n\n\n                            }\n\n\n                        });\n                    }\n\n                    getMeasurementData() {\n\n                        return this.distances;\n                    }\n\n\n                }\n\n\n                var measurement1 = new PinPointMeasure(car);\n\n                measurement1.createMeasure(car, scene);\n\n\n                function disposeMeasure() {\n                    measurement1.disposeMeasurement(scene)\n                }\n\n                var disposable = {\n                    dispose: disposeMeasure\n                }\n\n                loaded_meshes.push(disposable)\n                section_infodisplay.logicManager.AddDisposableStuff(disposable)\n\n\n\n                measurement1.calculateMeasurement(scene);\n\n\n                //Impulse Settings\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\n                var impulseMagnitude = 5;\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\n\n                var count = 0;\n                var tick = 0;\n                var segundero = 0.0;\n\n                var obj_Distance = 1;\n                var obj_Time = 1;\n                var obj_Velocity = 1;\n\n                var display_Distance = 0;\n                var display_Time = 0;\n                var display_Velocity = 0;\n\n                function toFixedNumber(num, digits, base) {\n                    var pow = Math.pow(base || 10, digits);\n                    return Math.round(num * pow) / pow;\n                }\n\n                var impulse = function (mesh) {\n\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n\n\n                }\n\n                var transformForce = function (mesh, vec) {\n                    var mymatrix = new BABYLON.Matrix();\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\n                };\n\n                var translate = function (mesh, direction, power) {\n                    mesh.physicsImpostor.setLinearVelocity(\n                        mesh.physicsImpostor.getLinearVelocity().add(\n                            transformForce(mesh, direction.scale(power))\n                        )\n                    );\n                }\n\n                var impulser = function (mesh, impulseDirection, impulseMagnitude) {\n                    mesh.physicsImpostor.applyImpulse(\n\n                        impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n                }\n\n                function activate() {\n\n                    if (measurement1) {\n\n                        measurement1.disposeMeasurement(scene);\n                    }\n\n                    measurement1 = new PinPointMeasure(car);\n\n                    measurement1.createMeasure(car, scene);\n                    //let _measurement1 = measurement1;\n\n                    measurement1.calculateMeasurement(scene)\n\n\n\n                    limitTime(car);\n                    //limitDistance(car);\n                    //limitedeTiempo(car);\n                    //limitedeDistancia(car);\n                }\n\n\n                function limitDistance(mesh) {\n\n\n\n                    var tempObservable = scene.onBeforeRenderObservable.add(() => {\n                        count += (scene.deltaTime);\n                        tick += (scene.deltaTime);\n\n                        if (tick = 50) {\n\n                            var data = measurement1.getMeasurementData();\n                            console.log(data[0])\n                            console.log(\"vel: \" + obj_Velocity + \" dist: \" + data[0] + \" tiempo: \" + obj_Time)\n                            if (data[0] >= obj_Distance) {\n                                console.log(\"stop!!!\")\n                                mesh.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());\n\n                                scene.onBeforeRenderObservable.remove(tempObservable);\n                            } else {\n                                //this.plane.parent.physicsImpostor.applyImpulse(transformForce(this.plane.parent, impulseDirection.scale(impulseMagnitude)), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                                //attachedMesh.physicsImpostor.setLinearVelocity(attachedMesh.physicsImpostor.getLinearVelocity().add(transformForce(attachedMesh, impulseDirection.scale(impulseMagnitude))));\n                                //this.plane.parent.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                                //this.plane.parent.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 1));\n                                mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                            }\n\n\n                            tick = 0\n                        }\n\n                    });\n\n\n                    loaded_onBeforeRenderObservables.push(tempObservable);\n\n                }\n\n\n\n                function limitTime(mesh) {\n\n\n                    function RefreshDataInMilisecs(time, refreshRate) {\n\n                        var tick = 0;\n                        var refreshsteps = Math.round((time / refreshRate))\n                        var actualstep = 0;\n\n\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\n                            tick += (scene.deltaTime);\n\n                            if (tick >= refreshRate * 1000) {\n                                actualstep++\n\n\n                                if (actualstep <= refreshsteps) {\n\n                                    //code to refresh here\n\n                                    tick = 0;\n\n                                    display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                    display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                    display_Velocity = obj_Velocity;\n\n                                    exercise_datadisplay.setViewData\n                                        (\n                                            \"∆r: \" + display_Distance + \" metros (m)\" + \"\\n\" +\n                                            \"∆t: \" + display_Time + \" segs\" + \"\\n\" +\n                                            \"v: \" + display_Velocity + \" m/s\"\n                                        )\n\n                                    if (mesh.physicsImpostor) {\n                                        mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                                    }\n\n\n\n                                    //\n\n                                } else {\n\n                                    actualstep = 0;\n                                    tick = 0;\n                                    if (mesh.physicsImpostor) {\n                                        mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\n                                    }\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\n                                }\n\n                            }\n\n                        });\n\n                        loaded_onBeforeRenderObservables.push(temporalObs);\n\n                    }\n\n                    RefreshDataInMilisecs(obj_Time, 0.25)\n\n\n\n                }\n\n\n\n                //var distancia = (velocidad*tiempo)\n                //var tiempo = (distancia/velocidad)\n                //var velocidad= (distancia/tiempo)\n                function calculateTime() {\n                    obj_Time = (obj_Distance / obj_Velocity).toFixed(2);\n                }\n\n                function calculateDistance() {\n                    obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\n\n                }\n\n                function calculateVelocity() {\n                    obj_Velocity = (obj_Distance / obj_Time).toFixed(2);\n                }\n\n                var desplazamiento = function (value) {\n\n                    obj_Distance = value.toFixed(2);\n                    //calculateVelocity(); \n                    //calculateTime();\n\n                }\n\n                var tiempo = function (value) {\n                    obj_Time = Math.floor(value * 10) / 10\n\n                    calculateDistance();\n\n\n                }\n\n                var velocidad = function (value) {\n\n                    obj_Velocity = Math.floor(value * 10) / 10\n                    calculateDistance();\n                    //calculateTime();\n\n\n\n                }\n\n\n                var displayDValue = function (value) {\n                    return Math.floor(value * 100) / 100;\n                }\n\n                var displayMValue = function (value) {\n                    return Math.floor(value);\n                }\n\n                var displayFValue = function (value) {\n\n                    return Math.floor(value * 10) / 10;\n\n                }\n\n\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\n                //controlSlider.addSlider(\"Desplazamiento\", desplazamiento, \"metros\", 1, 10, 1, displayFValue);\n                controlSlider.addSlider(\"tiempo\", tiempo, \"segundos\", 1, 10, 1, displayFValue);\n                controlSlider.addSlider(\"Velocidad\", velocidad, \"m/s\", 1, 10, 1, displayFValue);\n\n                exercise_control.controlPanel.addGroup(controlSlider);\n                exercise_control.controlPanel.heightInPixels = 150;\n\n\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\n\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\n                    activate();\n\n                });\n\n                exercise_control.addObserver(execute_obs);\n\n\n\n\n            }\n\n            function exercise2Logic() {\n\n                var car = scene.getMeshByName(\"carBox1\");\n\n                class PinPointMeasure {\n                    constructor(pick1, scene) {\n                        this.sphere1 = BABYLON.Mesh.CreateSphere(\"measure_sphere1\", 8, .05, scene);\n\n                        this.sphere1.parent = pick1;\n\n                        this.sphere1.position = new BABYLON.Vector3(0, 0, 0);\n\n\n                        this.buttonpress = false;\n                        this.expandmeasurement = false;\n                    }\n\n\n\n                    createMeasure(pick2, scene) {\n                        this.sphere2 = BABYLON.Mesh.CreateSphere(\"measure_sphere2\", 8, .05, scene);\n\n                        //this.sphere2.parent=pick2.pickedMesh;\n\n                        this.sphere2.position = pick2.position;\n\n\n\n                        this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n                        var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                        var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                        var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                        var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n\n                        this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n                        //this.tube = new BABYLON.MeshBuilder.CreateTube(\"tube\",{path: [this.sphere1.getAbsolutePosition(),this.sphere2.getAbsolutePosition(),],radius: .01},scene);\n                        this.line = new BABYLON.Mesh.CreateLines(\"line\", [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], scene, true);\n\n\n                        var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                        var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                        var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n\n\n\n                    }\n\n                    disposeMeasurement(scene) {\n                        this.buttonpress = true;\n                        //this.container.dispose();\n                        this.sphere1.dispose();\n                        this.sphere2.dispose();\n                        this.line.dispose();\n\n                        //this.line1.dispose();\n                        //this.line2.dispose();\n\n                        scene.onBeforeRenderObservable.remove(this.measureObs)\n\n                    }\n\n                    calculateMeasurement(scene) {\n\n                        var count = 0;\n\n                        this.measureObs = scene.onBeforeRenderObservable.add(() => {\n\n                            count += (scene.deltaTime);\n\n                            if (this.sphere1 && this.sphere2) {\n\n                                this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n\n                                var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                                var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                                var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                                var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n                                this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n\n                                var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                                var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                                var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n                                this.line = new BABYLON.Mesh.CreateLines(null, [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], null, null, this.line);\n\n\n\n                            }\n\n\n                        });\n                    }\n\n                    getMeasurementData() {\n\n                        return this.distances;\n                    }\n\n\n                }\n\n\n                var measurement1 = new PinPointMeasure(car);\n\n                measurement1.createMeasure(car, scene);\n\n\n                function disposeMeasure() {\n                    measurement1.disposeMeasurement(scene)\n                }\n\n                var disposable = {\n                    dispose: disposeMeasure\n                }\n\n                loaded_meshes.push(disposable)\n                section_infodisplay.logicManager.AddDisposableStuff(disposable)\n\n\n\n\n\n\n                measurement1.calculateMeasurement(scene);\n\n\n                //Impulse Settings\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\n                var impulseMagnitude = 5;\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\n\n                var count = 0;\n                var tick = 0;\n                var segundero = 0.0;\n\n                var obj_Distance = 1;\n                var obj_Time = 1;\n                var obj_Velocity = 1;\n\n                var display_Distance = 0;\n                var display_Time = 0;\n                var display_Velocity = 0;\n\n                function toFixedNumber(num, digits, base) {\n                    var pow = Math.pow(base || 10, digits);\n                    return Math.round(num * pow) / pow;\n                }\n\n                var impulse = function (mesh) {\n\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n\n\n                }\n\n                var transformForce = function (mesh, vec) {\n                    var mymatrix = new BABYLON.Matrix();\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\n                };\n\n                var translate = function (mesh, direction, power) {\n                    mesh.physicsImpostor.setLinearVelocity(\n                        mesh.physicsImpostor.getLinearVelocity().add(\n                            transformForce(mesh, direction.scale(power))\n                        )\n                    );\n                }\n\n                var impulser = function (mesh, impulseDirection, impulseMagnitude) {\n                    mesh.physicsImpostor.applyImpulse(\n\n                        impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n                }\n\n                function activate() {\n\n                    if (measurement1) {\n\n                        measurement1.disposeMeasurement(scene);\n                    }\n\n                    measurement1 = new PinPointMeasure(car);\n\n                    measurement1.createMeasure(car, scene);\n                    //let _measurement1 = measurement1;\n\n                    measurement1.calculateMeasurement(scene)\n\n\n\n                    limitTime(car);\n                    //limitDistance(car);\n                    //limitedeTiempo(car);\n                    //limitedeDistancia(car);\n                }\n\n\n                function limitDistance(mesh) {\n\n\n\n                    var tempObservable = scene.onBeforeRenderObservable.add(() => {\n                        count += (scene.deltaTime);\n                        tick += (scene.deltaTime);\n\n                        if (tick = 50) {\n\n                            var data = measurement1.getMeasurementData();\n                            console.log(data[0])\n                            console.log(\"vel: \" + obj_Velocity + \" dist: \" + data[0] + \" tiempo: \" + obj_Time)\n                            if (data[0] >= obj_Distance) {\n                                console.log(\"stop!!!\")\n                                mesh.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());\n\n                                scene.onBeforeRenderObservable.remove(tempObservable);\n                            } else {\n                                //this.plane.parent.physicsImpostor.applyImpulse(transformForce(this.plane.parent, impulseDirection.scale(impulseMagnitude)), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                                //attachedMesh.physicsImpostor.setLinearVelocity(attachedMesh.physicsImpostor.getLinearVelocity().add(transformForce(attachedMesh, impulseDirection.scale(impulseMagnitude))));\n                                //this.plane.parent.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                                //this.plane.parent.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 1));\n                                mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                            }\n\n\n                            tick = 0\n                        }\n\n                    });\n\n                }\n\n\n\n                function limitTime(mesh) {\n\n\n                    function RefreshDataInMilisecs(time, refreshRate) {\n\n                        var tick = 0;\n                        var refreshsteps = Math.round((time / refreshRate))\n                        var actualstep = 0;\n\n\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\n                            tick += (scene.deltaTime);\n\n                            if (tick >= refreshRate * 1000) {\n                                actualstep++\n\n\n                                if (actualstep <= refreshsteps) {\n\n                                    //code to refresh here\n\n                                    tick = 0;\n\n                                    display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                    display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                    display_Velocity = obj_Velocity;\n\n                                    exercise_datadisplay.setViewData\n                                        (\n                                            \"r: \" + display_Distance + \" metros (m)\" + \"\\n\" +\n                                            \"t: \" + display_Time + \" segs\" + \"\\n\" +\n                                            \"v: \" + display_Velocity + \" m/s\"\n                                        )\n\n                                    if (mesh.physicsImpostor) {\n                                        mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                                    }\n\n\n\n                                    //\n\n                                } else {\n\n                                    actualstep = 0;\n                                    tick = 0;\n                                    if (mesh.physicsImpostor) {\n                                        mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\n                                    }\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\n                                }\n\n                            }\n\n                        });\n\n                        loaded_onBeforeRenderObservables.push(temporalObs);\n\n                    }\n\n                    RefreshDataInMilisecs(obj_Time, 0.25)\n\n\n\n                }\n\n\n\n                //var distancia = (velocidad*tiempo)\n                //var tiempo = (distancia/velocidad)\n                //var velocidad= (distancia/tiempo)\n                function calculateTime() {\n                    obj_Time = (obj_Distance / obj_Velocity).toFixed(2);\n                }\n\n                function calculateDistance() {\n                    obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\n\n                }\n\n                function calculateVelocity() {\n                    obj_Velocity = (obj_Distance / obj_Time).toFixed(2);\n                }\n\n                var desplazamiento = function (value) {\n\n                    obj_Distance = Math.floor(value * 10) / 10;\n                    calculateVelocity();\n                    //calculateTime();\n\n                }\n\n                var tiempo = function (value) {\n                    obj_Time = Math.floor(value * 10) / 10\n\n                    //calculateDistance();\n                    calculateVelocity();\n\n\n                }\n\n                var velocidad = function (value) {\n\n                    obj_Velocity = Math.floor(value * 10) / 10\n                    calculateDistance();\n                    //calculateTime();\n\n\n\n                }\n\n\n                var displayDValue = function (value) {\n                    return Math.floor(value * 100) / 100;\n                }\n\n                var displayMValue = function (value) {\n                    return Math.floor(value);\n                }\n\n                var displayFValue = function (value) {\n\n                    return Math.floor(value * 10) / 10;\n\n                }\n\n\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\n                controlSlider.addSlider(\"Desplazamiento\", desplazamiento, \"metros\", 1, 10, 1, displayFValue);\n                controlSlider.addSlider(\"tiempo\", tiempo, \"segundos\", 1, 10, 1, displayFValue);\n                //controlSlider.addSlider(\"Velocidad\", velocidad, \"m/s\", 1, 10, 1, displayFValue); \n\n                exercise_control.controlPanel.addGroup(controlSlider);\n                exercise_control.controlPanel.heightInPixels = 150;\n\n\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\n\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\n                    activate();\n\n                });\n\n                exercise_control.addObserver(execute_obs);\n\n\n\n\n            }\n\n            function exercise3Logic() {\n\n                var car = scene.getMeshByName(\"carBox1\");\n\n                class PinPointMeasure {\n                    constructor(pick1, scene) {\n                        this.sphere1 = BABYLON.Mesh.CreateSphere(\"measure_sphere1\", 8, .05, scene);\n\n                        this.sphere1.parent = pick1;\n\n                        this.sphere1.position = new BABYLON.Vector3(0, 0, 0);\n\n\n                        this.buttonpress = false;\n                        this.expandmeasurement = false;\n                    }\n\n\n\n                    createMeasure(pick2, scene) {\n                        this.sphere2 = BABYLON.Mesh.CreateSphere(\"measure_sphere2\", 8, .05, scene);\n\n                        //this.sphere2.parent=pick2.pickedMesh;\n\n                        this.sphere2.position = pick2.position;\n\n\n\n                        this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n                        var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                        var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                        var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                        var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n\n                        this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n                        //this.tube = new BABYLON.MeshBuilder.CreateTube(\"tube\",{path: [this.sphere1.getAbsolutePosition(),this.sphere2.getAbsolutePosition(),],radius: .01},scene);\n                        this.line = new BABYLON.Mesh.CreateLines(\"line\", [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], scene, true);\n\n\n                        var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                        var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                        var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n\n\n\n                    }\n\n                    disposeMeasurement(scene) {\n                        this.buttonpress = true;\n                        //this.container.dispose();\n                        this.sphere1.dispose();\n                        this.sphere2.dispose();\n                        this.line.dispose();\n\n                        //this.line1.dispose();\n                        //this.line2.dispose();\n\n                        scene.onBeforeRenderObservable.remove(this.measureObs)\n\n                    }\n\n                    calculateMeasurement(scene) {\n\n                        var count = 0;\n\n                        this.measureObs = scene.onBeforeRenderObservable.add(() => {\n\n                            count += (scene.deltaTime);\n\n                            if (this.sphere1 && this.sphere2) {\n\n                                this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n\n                                var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                                var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                                var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                                var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n                                this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n\n                                var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                                var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                                var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n                                this.line = new BABYLON.Mesh.CreateLines(null, [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], null, null, this.line);\n\n\n\n                            }\n\n\n                        });\n                    }\n\n                    getMeasurementData() {\n\n                        return this.distances;\n                    }\n\n\n                }\n\n\n                var measurement1 = new PinPointMeasure(car);\n\n                measurement1.createMeasure(car, scene);\n\n\n                function disposeMeasure() {\n                    measurement1.disposeMeasurement(scene)\n                }\n\n                var disposable = {\n                    dispose: disposeMeasure\n                }\n\n                loaded_meshes.push(disposable)\n                section_infodisplay.logicManager.AddDisposableStuff(disposable)\n\n\n\n\n\n                measurement1.calculateMeasurement(scene);\n\n\n                //Impulse Settings\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\n                var impulseMagnitude = 5;\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\n\n                var count = 0;\n                var tick = 0;\n                var segundero = 0.0;\n\n                var obj_Distance = 1;\n                var obj_Time = 1;\n                var obj_Velocity = 1;\n\n                var display_Distance = 0;\n                var display_Time = 0;\n                var display_Velocity = 0;\n\n                function toFixedNumber(num, digits, base) {\n                    var pow = Math.pow(base || 10, digits);\n                    return Math.round(num * pow) / pow;\n                }\n\n                var impulse = function (mesh) {\n\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n\n\n                }\n\n                var transformForce = function (mesh, vec) {\n                    var mymatrix = new BABYLON.Matrix();\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\n                };\n\n                var translate = function (mesh, direction, power) {\n                    mesh.physicsImpostor.setLinearVelocity(\n                        mesh.physicsImpostor.getLinearVelocity().add(\n                            transformForce(mesh, direction.scale(power))\n                        )\n                    );\n                }\n\n                var impulser = function (mesh, impulseDirection, impulseMagnitude) {\n                    mesh.physicsImpostor.applyImpulse(\n\n                        impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n                }\n\n                function activate() {\n\n                    if (measurement1) {\n\n                        measurement1.disposeMeasurement(scene);\n                    }\n\n                    measurement1 = new PinPointMeasure(car);\n\n                    measurement1.createMeasure(car, scene);\n                    //let _measurement1 = measurement1;\n\n                    measurement1.calculateMeasurement(scene)\n\n\n\n                    limitTime(car);\n                    //limitDistance(car);\n                    //limitedeTiempo(car);\n                    //limitedeDistancia(car);\n                }\n\n\n                function limitDistance(mesh) {\n\n\n\n                    var tempObservable = scene.onBeforeRenderObservable.add(() => {\n                        count += (scene.deltaTime);\n                        tick += (scene.deltaTime);\n\n                        if (tick = 50) {\n\n                            var data = measurement1.getMeasurementData();\n                            console.log(data[0])\n                            console.log(\"vel: \" + obj_Velocity + \" dist: \" + data[0] + \" tiempo: \" + obj_Time)\n                            if (data[0] >= obj_Distance) {\n                                console.log(\"stop!!!\")\n                                mesh.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());\n\n                                scene.onBeforeRenderObservable.remove(tempObservable);\n                            } else {\n                                //this.plane.parent.physicsImpostor.applyImpulse(transformForce(this.plane.parent, impulseDirection.scale(impulseMagnitude)), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                                //attachedMesh.physicsImpostor.setLinearVelocity(attachedMesh.physicsImpostor.getLinearVelocity().add(transformForce(attachedMesh, impulseDirection.scale(impulseMagnitude))));\n                                //this.plane.parent.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                                //this.plane.parent.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 1));\n                                mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                            }\n\n\n                            tick = 0\n                        }\n\n                    });\n\n                }\n\n\n\n                function limitTime(mesh) {\n\n\n                    function RefreshDataInMilisecs(time, refreshRate) {\n\n                        var tick = 0;\n                        var refreshsteps = Math.round((time / refreshRate))\n                        var actualstep = 0;\n\n\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\n                            tick += (scene.deltaTime);\n\n                            if (tick >= refreshRate * 1000) {\n                                actualstep++\n\n\n                                if (actualstep <= refreshsteps) {\n\n                                    //code to refresh here\n\n                                    tick = 0;\n\n                                    display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                    display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                    display_Velocity = obj_Velocity;\n\n                                    exercise_datadisplay.setViewData\n                                        (\n                                            \"r: \" + display_Distance + \" metros (m)\" + \"\\n\" +\n                                            \"t: \" + display_Time + \" segs\" + \"\\n\" +\n                                            \"v: \" + display_Velocity + \" m/s\"\n                                        )\n\n                                    if (mesh.physicsImpostor) {\n                                        mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                                    }\n\n\n\n                                    //\n\n                                } else {\n\n                                    actualstep = 0;\n                                    tick = 0;\n                                    if (mesh.physicsImpostor) {\n                                        mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\n                                    }\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\n                                }\n\n                            }\n\n                        });\n\n                        loaded_onBeforeRenderObservables.push(temporalObs)\n\n                    }\n\n                    RefreshDataInMilisecs(obj_Time, 0.25)\n\n\n\n                }\n\n\n\n                //var distancia = (velocidad*tiempo)\n                //var tiempo = (distancia/velocidad)\n                //var velocidad= (distancia/tiempo)\n                function calculateTime() {\n                    obj_Time = (obj_Distance / obj_Velocity).toFixed(2);\n                }\n\n                function calculateDistance() {\n                    obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\n\n                }\n\n                function calculateVelocity() {\n                    obj_Velocity = (obj_Distance / obj_Time).toFixed(2);\n                }\n\n                var desplazamiento = function (value) {\n\n                    obj_Distance = Math.floor(value * 10) / 10\n                    //calculateVelocity(); \n                    calculateTime();\n\n                }\n\n                var tiempo = function (value) {\n                    obj_Time = Math.floor(value * 10) / 10\n\n                    calculateDistance();\n                    //calculateVelocity(); \n\n\n                }\n\n                var velocidad = function (value) {\n\n                    obj_Velocity = Math.floor(value * 10) / 10\n                    //calculateDistance();\n                    calculateTime();\n\n\n\n                }\n\n\n                var displayDValue = function (value) {\n                    return Math.floor(value * 100) / 100;\n                }\n\n                var displayMValue = function (value) {\n                    return Math.floor(value);\n                }\n\n                var displayFValue = function (value) {\n\n                    return Math.floor(value * 10) / 10;\n\n                }\n\n\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\n                controlSlider.addSlider(\"Desplazamiento\", desplazamiento, \"metros\", 1, 10, 1, displayFValue);\n                //controlSlider.addSlider(\"tiempo\", tiempo, \"segundos\", 1, 10, 1, displayFValue);\n                controlSlider.addSlider(\"Velocidad\", velocidad, \"m/s\", 1, 10, 1, displayFValue);\n\n                exercise_control.controlPanel.addGroup(controlSlider);\n                exercise_control.controlPanel.heightInPixels = 150;\n\n\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\n\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\n                    activate();\n\n                });\n\n                exercise_control.addObserver(execute_obs);\n\n\n\n\n            }\n\n\n            var quiz1 = QuizList.quiz1\n            quiz1.addLogic(exercise1Logic)\n            quiz1.addModels(quiz1_models)\n\n            var quiz2 = QuizList.quiz2\n            quiz2.addLogic(exercise2Logic)\n            quiz2.addModels(quiz2_models)\n\n\n            var quiz3 = QuizList.quiz3\n            quiz3.addLogic(exercise3Logic)\n            quiz3.addModels(quiz3_models)\n\n\n            resource_manager.addExercise(quiz1);\n            resource_manager.addExercise(quiz2);\n            resource_manager.addExercise(quiz3);\n\n\n            resource_manager.Start(loaded_exercise_index)\n        }\n\n\n        var loader = new BABYLON.AssetsManager(scene);\n\n        loader.onFinish = function () {\n\n            engine.runRenderLoop(() => {\n                if (scene) {\n                    window.document.title = engine.getFps().toFixed() + \" fps\";\n                    scene.render();\n\n                }\n            });\n        };\n\n        scene.executeWhenReady(function () {\n\n            engine.hideLoadingUI();\n\n            if (document.getElementById(\"xr-button\")) {\n                let XRbutton = document.getElementById(\"xr-button\");\n\n                XRbutton.addEventListener(\"click\", async function () {\n\n                    if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\n\n                        xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\n                        xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\n                        await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\n\n                    } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\n                        await xr.baseExperience.exitXRAsync()\n                    }\n                });\n\n            }\n\n\n            if (document.getElementById(\"fullscreen-button\")) {\n                let button = document.getElementById(\"fullscreen-button\")\n\n                button.addEventListener(\"click\", async function () {\n                    //engine.enterFullScreen(true);\n\n                    engine.switchFullscreen(false);\n                })\n            }\n\n        });\n\n\n        loader.load();\n\n    }\n\n\n\n    return (\n        <React.Fragment>\n\n            <Container maxWidth='xl'>\n\n               {/*<WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />*/}\n\n\n                <Box width=\"100%\" p={1} my={0.5}>\n                    <BabylonScene onSceneMount={onSceneMount} />\n                </Box>\n\n\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\n                    </Button>\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\n                        <Typography variant=\"h6\">pantalla completa</Typography>\n                    </Button>\n                </Container>\n\n\n            </Container>\n        </React.Fragment >\n    )\n}\n\nexport default ExercisePage","export default __webpack_public_path__ + \"static/media/card1.cb170983.PNG\";","export default __webpack_public_path__ + \"static/media/card2.eb07df05.PNG\";","export default __webpack_public_path__ + \"static/media/card3.1d125d51.PNG\";","export default __webpack_public_path__ + \"static/media/card4.41cbcb44.PNG\";","export default __webpack_public_path__ + \"static/media/alert2.2455318f.png\";","export default __webpack_public_path__ + \"static/media/cardboard.ca4cc733.png\";","import React, { Component, useRef } from 'react'\r\nimport Main from '../../WebLayout/Main';\r\nimport * as BABYLON from 'babylonjs';\r\nimport BabylonScene from '../../BabylonScene/'; // import the component above linking to file we just created.\r\nimport * as GUI from 'babylonjs-gui';\r\nimport 'babylonjs-loaders';\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box'\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport { Timer } from \"easytimer.js\";\r\n\r\n\r\n\r\nimport { Container, Button } from '@material-ui/core';\r\n\r\nimport { useAuth } from '../../Contexts/AuthContext'\r\n\r\n\r\nimport * as Ground from '../../BabylonScene/components/Ground'\r\n\r\nimport * as Exercise from '../../BabylonScene/components/exercise'\r\n\r\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\r\n\r\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\r\n\r\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\r\n\r\n//import WebCam from '../../EmotionRecognition_Components/WebCam'\r\n//import * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\r\n\r\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\r\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\r\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\r\n\r\nimport XRDisplayPlane from '../../FisicARtivo_Components/XRDisplayPlane';\r\n\r\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\r\n\r\nimport card1 from '../exercise_1_2/resources/card1.PNG'\r\nimport card2 from '../exercise_1_2/resources/card2.PNG'\r\nimport card3 from '../exercise_1_2/resources/card3.PNG'\r\nimport card4 from '../exercise_1_2/resources/card4.PNG'\r\nimport alert2 from '../exercise_1_2/resources/alert2.png'\r\nimport cardboard from '../exercise_1_2/resources/cardboard.png'\r\n\r\nclass ExercisePage extends Component {\r\n    render() {\r\n        return (\r\n            <Main data={GetMainContent} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imagebox: {\r\n        //backgroundImage: 'url(' + drawerImage + ')',   \r\n        height: '100%',\r\n        width: '60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    card: {\r\n        height: '100%',\r\n\r\n        flexDirection: 'column',\r\n    },\r\n    media: {\r\n        height: 400,\r\n\r\n    },\r\n    babylonbuttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n\r\n    },\r\n}));\r\n\r\nfunction GetMainContent() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { currentUser } = useAuth();\r\n\r\n    //const webcam = useRef({});\r\n\r\n    var exerciseData = {\r\n        id: 'exercise_1_2',\r\n        generalTime: '00:00',\r\n        totalErrors: 0,\r\n        isCompleted: false,\r\n        quizes: {\r\n            quiz_1: {\r\n                id: 'quiz_1',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_2: {\r\n                id: 'quiz_2',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_3: {\r\n                id: 'quiz_3',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    DataCapture.setCurrentUser(currentUser);\r\n\r\n    DataCapture.setExerciseData(exerciseData);\r\n\r\n    DataCapture.checkUserExerciseData(exerciseData.id);\r\n\r\n    DataCapture.globalTimer.start();\r\n\r\n    //EmotionsAPI.setCurrentUser(currentUser);\r\n\r\n    //EmotionsAPI.loadModels();\r\n\r\n    /*async function takeCapture() {\r\n        webcam.current.takeCapture();\r\n    }\r\n    async function stopCamera() {\r\n        webcam.current.stopCamera();\r\n    }\r\n\r\n    async function startCamera() {\r\n        webcam.current.startCamera();\r\n    }\r\n    */\r\n\r\n    var onSceneMount = (e: SceneEventArgs) => {\r\n        const { canvas, scene, engine } = e;\r\n\r\n        engine.displayLoadingUI();\r\n\r\n        const QuizTimer = new Timer();\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\r\n\r\n        const camera_x =-4\r\n        const camera_y=1.5\r\n        const camera_z=0\r\n\r\n        const camera_initialPos = new BABYLON.Vector3(camera_x, camera_y, camera_z);\r\n        const camera_initialTarget = new BABYLON.Vector3(0, 1, 0);\r\n        const camera_speed = 0.7;\r\n        const camera_angularSensibility = 1200;\r\n\r\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(camera_initialTarget);\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, false);\r\n\r\n        camera.speed = camera_speed;\r\n        camera.angularSensibility = camera_angularSensibility;\r\n        camera.inertia=.5;\r\n\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 0.7;\r\n\r\n        // Light\r\n        //const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\r\n        //light.intensity = 0.9;\r\n\r\n        // Skybox\r\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\r\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\r\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n\r\n\r\n        // physics\r\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\r\n\r\n        var physicsEngine = scene.getPhysicsEngine();\r\n        //physicsEngine.setSubTimeStep(1);\r\n\r\n\r\n        // Enable Collisions\r\n        scene.collisionsEnabled = true;\r\n\r\n        //Then apply collisions and gravity to the active camera\r\n        camera.checkCollisions = true;\r\n        camera.applyGravity = true;\r\n\r\n        //Set the ellipsoid around the camera (e.g. your player's size)\r\n        camera.ellipsoid = new BABYLON.Vector3(1, .8, 1);\r\n\r\n        var ground = Ground.createPlayGroundGigant(scene);\r\n\r\n\r\n        //var ground= Ground.createPlayGroundLarge(scene);\r\n\r\n        //finally, say which mesh will be collisionable\r\n        ground.checkCollisions = true;\r\n\r\n\r\n        //addSceneModels();\r\n        var xr = {};\r\n\r\n\r\n        async function XRmode() {\r\n\r\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\r\n\r\n            xr = await scene.createDefaultXRExperienceAsync({\r\n\r\n\r\n                disableDefaultUI: true,\r\n                //floorMeshes: [ground],\r\n                uiOptions: {\r\n\r\n                    sessionMode: \"immersive-ar\"\r\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\r\n                    , referenceSpaceType: \"local-floor\"\r\n                },\r\n                inputOptions: { doNotLoadControllerMeshes: false }\r\n            });\r\n\r\n\r\n\r\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\r\n                    // floor is at y === 2\r\n                    camera.y = 2;\r\n                \r\n                });*/\r\n\r\n\r\n\r\n            \r\n            xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\r\n                    ground.visibility = 0;\r\n                    skybox.isVisible = false;\r\n                    //GUI_controller.createXRGui();\r\n                    //stopCamera();\r\n                    //EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\r\n                    ground.visibility = 1;\r\n                    skybox.isVisible = true;\r\n                    //GUI_controller.createNormalGui();\r\n                    //startCamera();\r\n                    //EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n        }\r\n\r\n        XRmode();\r\n\r\n      \r\n\r\n\r\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\r\n        gizmoManager.selectMode(0);\r\n\r\n\r\n        var pickedMesh = null;\r\n        var attachedMesh = null;\r\n        var pressed =null\r\n\r\n        //observables generales globales para picking meshes\r\n\r\n        scene.onPointerObservable.addOnce(pointerinfo => {\r\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\r\n                QuizTimer.start();\r\n            }\r\n        })\r\n\r\n        scene.onPointerObservable.add((pointerInfo) => {\r\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n\r\n            //if (pointerInfo.type === 4) {\r\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\r\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\r\n            // }\r\n            //}\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n\r\n                    scene.constantlyUpdateMeshUnderPointer = true;\r\n\r\n                    pressed = true;\r\n\r\n                    attachedMesh = pickedMesh;\r\n\r\n                    gizmoManager.attachToMesh(attachedMesh);\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                    attachedMesh = null;\r\n                    gizmoManager.attachToMesh(null);\r\n                }\r\n\r\n            }\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\r\n\r\n                scene.constantlyUpdateMeshUnderPointer = false;\r\n                \r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                   \r\n                    // pickedMesh.physicsImpostor.wakeUp();\r\n                    pressed = false;\r\n                    //pickedMesh.physicsImpostor.dispose();\r\n                    //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\r\n\r\n                    pickedMesh = null;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scene.onBeforePhysicsObservable.add(() => {\r\n            \r\n            if (pressed &&pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\r\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\r\n            }\r\n\r\n\r\n        });\r\n\r\n       \r\n        scene.registerBeforeRender(() => {\r\n\r\n            /* if(xr) {\r\n                 if(xr.input.controllers.length) {\r\n         \r\n                     const c = xr.input.controllers[0];\r\n                     \r\n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\r\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\r\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\r\n                     laserPointer.position.copyFrom(c.pointer.position);\r\n                    \r\n                     laserPointer.parent = xr.baseExperience.container;\r\n                 }\r\n             }*/\r\n        })\r\n\r\n\r\n        //DATA DISPLAY COMPONENTS\r\n\r\n        var info_card1 = new ImageInfoCard(\"card1\", card1);\r\n        var info_card2 = new ImageInfoCard(\"card2\", card2);\r\n        var info_card3 = new ImageInfoCard(\"card3\", card3);\r\n        var info_card4 = new ImageInfoCard(\"card4\", card4);\r\n        var alert_card = new ImageInfoCard(\"card4\", alert2);\r\n        var info_card5 = new ImageInfoCard(\"card5\", cardboard);\r\n\r\n\r\n        info_card1.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n        })\r\n\r\n\r\n        info_card2.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card2Logic();\r\n        });\r\n\r\n\r\n        info_card3.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card2Logic();\r\n          \r\n\r\n        })\r\n\r\n        alert_card.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            \r\n        })\r\n\r\n        info_card5.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card4_exercises();\r\n\r\n        })\r\n\r\n\r\n        var section_infodisplay = InfoDisplay(scene, 2);\r\n        //var local_pos = new BABYLON.Vector3(0, 1, 0);\r\n        \r\n        //section_infodisplay.displayPlane.position = local_pos; //position sphere relative to world\r\n\r\n        section_infodisplay.addCard(info_card1);\r\n        section_infodisplay.addCard(info_card2);\r\n        section_infodisplay.addCard(info_card3);\r\n        section_infodisplay.addCard(info_card4);\r\n        section_infodisplay.addCard(alert_card);\r\n        section_infodisplay.addCard(info_card5);\r\n\r\n        section_infodisplay.Start(0);\r\n\r\n\r\n\r\n    //declarate initial values \r\n\r\n\r\n    var loaded_exercise_index = 0;\r\n\r\n    \r\n    function card2Logic() {\r\n\r\n\r\n        var defaultmeshes = [];\r\n\r\n        var cannontube = scene.getMeshByName(\"cannon\");\r\n\r\n\r\n        //Impulse Settings\r\n        var impulseDirection = new BABYLON.Vector3(0, 0, -1);\r\n        var impulseMagnitude = 5;\r\n        var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n\r\n        var obj_Distance = 1;\r\n        var obj_Time = 1\r\n        var obj_Velocity = 8;\r\n\r\n        var display_Distance = 0;\r\n        var display_Time = 0;\r\n        var display_Velocity = 0;\r\n\r\n\r\n        var CoT = new BABYLON.TransformNode(\"root\");\r\n        CoT.position.y = 1;\r\n        CoT.position.x = 0.3;\r\n        CoT.parent = cannontube; //Definido como componente hijo del cañón\r\n        var disposable_ghosts = []\r\n        var disposable_lines = []\r\n\r\n        function activate() {\r\n\r\n\r\n            limitTime(defaultmeshes[0]);\r\n\r\n\r\n        }\r\n\r\n\r\n        function disposeghosts() {\r\n\r\n\r\n            if (disposable_ghosts) {\r\n                disposable_ghosts.forEach(item => {\r\n                    item.dispose();\r\n                })\r\n                disposable_ghosts = []\r\n\r\n            }\r\n\r\n            if (disposable_lines) {\r\n                disposable_lines.forEach(item => {\r\n                    item.dispose();\r\n                })\r\n                disposable_lines = []\r\n            }\r\n            //fireball(obj_Velocity)\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        function limitTime(mesh) {\r\n\r\n\r\n\r\n            function ghosting(mesh, data) {\r\n\r\n\r\n                var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 12, diameter: .5 }, scene);\r\n                ghost_sphere.visibility = 0.5;\r\n                ghost_sphere.position = mesh.position;\r\n               \r\n                disposable_ghosts.push(ghost_sphere)\r\n                section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere);\r\n\r\n\r\n\r\n\r\n\r\n                function ghostLine() {\r\n                    if (disposable_ghosts.length > 1) {\r\n                        var past_sphere = disposable_ghosts[disposable_ghosts.length - 2]\r\n                        var actual_sphere = disposable_ghosts[disposable_ghosts.length - 1]\r\n                        \r\n                        var line = new BABYLON.Mesh.CreateLines(\"line\", [past_sphere.getAbsolutePosition(), actual_sphere.getAbsolutePosition()], scene, true);\r\n                        disposable_lines.push(line);\r\n                       \r\n                        section_infodisplay.logicManager.AddDisposableStuff(line);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                function ghostData(mesh) {\r\n                    var miniplame = BABYLON.MeshBuilder.CreatePlane(\"planes\", { height: 0.2, width: .5 }, scene);\r\n                    miniplame.parent = mesh;\r\n                    miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                    miniplame.position.y = .6;\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 50;\r\n                    button1.fontStyle= \"bold\"\r\n                    button1.background = '#00000066';\r\n                    button1.textBlock.text = \"3 m/s\";\r\n\r\n                    var dataToshow = 1;\r\n\r\n                    button1.onPointerUpObservable.add(function () {\r\n                        switch (dataToshow) {\r\n                            case 1: dataToshow = 2\r\n                                button1.textBlock.text = data.display_Time.toString() + \" segs\";\r\n                                break;\r\n                            case 2: dataToshow = 3\r\n                                button1.textBlock.text = data.display_Distance.toString() + \" mts\";\r\n                                break;\r\n                            case 3: dataToshow = 1\r\n                                button1.textBlock.text = data.obj_Velocity.toString() + \" m/s\";\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n\r\n\r\n                    //LOOK TEST WITH QUATERNIONS\r\n\r\n                    var look = function (mesh, pos) {\r\n                        var dv = pos.subtract(mesh.position);\r\n                        var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                        mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                    };\r\n\r\n\r\n\r\n                    //scene.registerBeforeRender(function () {\r\n                    //look(miniplame, camera.position);\r\n                    //    })\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n                ghostData(ghost_sphere);\r\n                ghostLine();\r\n\r\n\r\n            }\r\n\r\n\r\n            function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                var tick = 0;\r\n                var refreshsteps = Math.round((time / refreshRate))\r\n                var actualstep = 0;\r\n\r\n\r\n                var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                    tick += (scene.deltaTime);\r\n\r\n                    if (tick >= refreshRate * 1000) {\r\n\r\n\r\n\r\n                        if (actualstep <= refreshsteps) {\r\n\r\n                            //code to refresh here\r\n\r\n                            tick = 0;\r\n\r\n                            display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                            display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                            display_Velocity = obj_Velocity;\r\n\r\n\r\n                            var info = { display_Distance, display_Time, obj_Velocity }\r\n\r\n                            ghosting(mesh, info)\r\n\r\n                            if (mesh.physicsImpostor) {\r\n                                mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(obj_Velocity));\r\n                            }\r\n\r\n\r\n\r\n                            //\r\n\r\n                        } else {\r\n\r\n                            actualstep = 0;\r\n                            tick = 0;\r\n                            if (mesh.physicsImpostor) {\r\n                                mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                            }\r\n                            scene.onBeforeRenderObservable.remove(temporalObs);\r\n                        }\r\n                        actualstep++\r\n                    }\r\n\r\n                });\r\n\r\n            }\r\n\r\n            RefreshDataInMilisecs(obj_Time, 0.33)\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        function calculateDistance() {\r\n            obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\r\n\r\n        }\r\n\r\n\r\n\r\n        var Calculatevelocidad = function (value) {\r\n\r\n            obj_Velocity = Math.floor(value * 10) / 10\r\n            calculateDistance();\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        var displayFValue = function (value) {\r\n\r\n            return Math.floor(value * 10) / 10;\r\n\r\n        }\r\n\r\n\r\n        function createNewBall() {\r\n\r\n            var bigball = BABYLON.MeshBuilder.CreateSphere(\"bigsphereghost\", { segments: 12, diameter: .5 }, scene);\r\n            bigball.position.set(0, 1, 1);\r\n            bigball.physicsImpostor = new BABYLON.PhysicsImpostor(bigball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1 }, scene)\r\n            bigball.XRPickable = true;\r\n\r\n            defaultmeshes.push(bigball);\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(bigball);\r\n\r\n        }\r\n\r\n        function disposeBall() {\r\n\r\n            if (defaultmeshes.length > 0) {\r\n\r\n                defaultmeshes.forEach(value => {\r\n\r\n                    if (Array.isArray(value)) {\r\n                        value.forEach(value => value.dispose());\r\n                    } else { value.dispose(); }\r\n                });\r\n\r\n\r\n            }\r\n            defaultmeshes = [];\r\n        }\r\n\r\n        createNewBall();\r\n\r\n        var button = GUI.Button.CreateImageOnlyButton(\"but\",\"images/pressme.png\")\r\n        button.color=\"transparent\"\r\n        var test = new XRDisplayPlane(.5, .33, true, true, scene);\r\n\r\n        test.setScaleToInPixels(300,160)\r\n        test.displayPlane.position.set(0,1,1.2);\r\n\r\n        section_infodisplay.logicManager.AddTemporalGUI(test.displayPlane);\r\n\r\n        var switchmode = 1;\r\n        button.onPointerUpObservable.add(() => {\r\n            switch (switchmode) {\r\n                case 1:\r\n                    disposeghosts();\r\n                    activate();\r\n                    switchmode = 2;\r\n                    break;\r\n                case 2:\r\n                    disposeghosts();\r\n                    disposeBall();\r\n                    createNewBall();\r\n                    switchmode = 1;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n        });\r\n\r\n\r\n        test.addControl(button);\r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n    var OnscreenTimer = new Timer();\r\n\r\n\r\n    function card4_exercises() {\r\n\r\n        var quizesList = [];\r\n        var exercise_list = [];           \r\n        var disposable_stuff = [];\r\n        var loaded_onBeforeRenderObservables = [];\r\n\r\n\r\n\r\n        var exercise_quizdisplay = XRQuizDisplay(scene, 1, true);\r\n        exercise_quizdisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n        exercise_quizdisplay.displayPlane.position.x-=0.3\r\n        exercise_quizdisplay.displayPlane.position.y+=0.5\r\n       \r\n        var exercise_datadisplay = XRDinamicsDataDisplay(scene, 1, true)\r\n        exercise_datadisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n        exercise_datadisplay.displayPlane.position.x-=0.3\r\n        exercise_datadisplay.displayPlane.position.z-=2.4\r\n        exercise_datadisplay.displayPlane.position.y+=0.4\r\n        \r\n        exercise_datadisplay.addFormulaImage(\"/images/equ1-2.png\")\r\n\r\n        var exercise_control = XRControlDisplay(scene, 1, true)\r\n        exercise_control.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n        exercise_control.displayPlane.position.x-=0.3\r\n        exercise_control.displayPlane.position.z+=2.4\r\n        exercise_control.displayPlane.position.y+=0.4\r\n\r\n        section_infodisplay.logicManager.AddTemporalGUI(exercise_quizdisplay.displayPlane);\r\n        section_infodisplay.logicManager.AddTemporalGUI(exercise_datadisplay.displayPlane);\r\n        section_infodisplay.logicManager.AddTemporalGUI(exercise_control.displayPlane);\r\n\r\n\r\n\r\n        exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\r\n\r\n            loaded_exercise_index--\r\n\r\n            if (loaded_exercise_index < 0) {\r\n                loaded_exercise_index++;\r\n            } if (quizesList[loaded_exercise_index]) {\r\n                resource_manager.Start(loaded_exercise_index)\r\n\r\n            }\r\n\r\n        });\r\n\r\n        exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\r\n\r\n            loaded_exercise_index++;\r\n\r\n            if (loaded_exercise_index > quizesList.length - 1) {\r\n                loaded_exercise_index--;\r\n            }\r\n            if (quizesList[loaded_exercise_index]) {\r\n                resource_manager.Start(loaded_exercise_index)\r\n\r\n            }\r\n\r\n        });\r\n\r\n        exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\r\n\r\n            if (exercise_quizdisplay.getIsCorrect()) {\r\n\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\r\n                //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\r\n                DataCapture.getQuizByID(currentQuiz).isCompleted = true;\r\n                DataCapture.updateUserExerciseData(exerciseData.id);\r\n                QuizTimer.reset();\r\n\r\n                if (DataCapture.getExerciseData().isCompleted) {\r\n                    exercise_quizdisplay.setIscompleted(true);\r\n                    exercise_quizdisplay.allcompletedPanel.show();\r\n\r\n                }else{\r\n                    exercise_quizdisplay.correctPanel.show();\r\n                }\r\n\r\n\r\n\r\n            } else {\r\n\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                DataCapture.addTotalError(currentQuiz);\r\n                DataCapture.addQuizErrorByID(currentQuiz);\r\n                DataCapture.updateUserExerciseData(exerciseData.id);\r\n\r\n                if (DataCapture.getExerciseData().isCompleted) {\r\n                    exercise_quizdisplay.setIscompleted(true);\r\n                    exercise_quizdisplay.allcompletedPanel.show();\r\n\r\n                }else{\r\n                    exercise_quizdisplay.incorrectPanel.show();\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n\r\n        exercise_control.button2.onPointerUpObservable.add(function () {\r\n\r\n            resource_manager.Reset();\r\n\r\n            QuizTimer.reset();\r\n\r\n        });\r\n\r\n      \r\n\r\n        if(!OnscreenTimer.isRunning()){\r\n        OnscreenTimer.start();\r\n        }\r\n\r\n        function isCompleted_Question_number() {\r\n\r\n            var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n            if (DataCapture.getQuizByID(currentQuiz).isCompleted) {\r\n                return \" (Completada)\"\r\n            } else {\r\n                return \"\"\r\n            }\r\n\r\n        }\r\n        function Check_Errors_number() {\r\n            var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n            return DataCapture.getQuizByID(currentQuiz).errors;\r\n        }\r\n        function Check_Timer_number() {\r\n\r\n            if (DataCapture.getExerciseData().isCompleted) {\r\n                OnscreenTimer.pause();\r\n                return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds) + \"\\n\" + \"Sección de preguntas finalizada!\"\r\n            } else {\r\n                return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds)\r\n            }\r\n        }\r\n        function formatTime(time) {\r\n            if (time <= 9) {\r\n                return \"0\" + time;\r\n            } else {\r\n                return time;\r\n            }\r\n        }\r\n\r\n        var timer_errors_numbers = scene.onBeforeRenderObservable.add(() => {\r\n\r\n\r\n            exercise_quizdisplay.time_number.text = \"Tiempo: \" + Check_Timer_number();\r\n            exercise_quizdisplay.error_number.text = \"Errores: \" + Check_Errors_number();\r\n            exercise_quizdisplay.question_number.text = \"Pregunta: \" + (loaded_exercise_index + 1) + \"/\" + (quizesList.length) + isCompleted_Question_number();\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        // Excercise Manager constructor function\r\n\r\n\r\n        function manageStuff() {\r\n\r\n\r\n\r\n            function addExercise(exercise) {\r\n                exercise_list.push(exercise)\r\n                quizesList.push(exercise.quiz);\r\n            }\r\n\r\n            function LoadQuiz(number) {\r\n                exercise_quizdisplay.loadquiz(quizesList[number])\r\n            }\r\n\r\n            function Start(number) {\r\n                loaded_exercise_index = number;\r\n                exercise_list[number].Load_Models().then(function (meshes) {\r\n                    ClearStuff();\r\n                    disposable_stuff = meshes;\r\n\r\n                    if (exercise_list[number].Load_Logic) {\r\n\r\n                        exercise_list[number].Load_Logic();\r\n                        LoadQuiz(number);\r\n                        QuizTimer.reset();\r\n                    }\r\n\r\n\r\n                });\r\n            }\r\n\r\n            function Reset() {\r\n\r\n                Start(loaded_exercise_index);\r\n                \r\n            }\r\n\r\n            exercise_control.button2.onPointerUpObservable.add(function () {\r\n                Reset();\r\n            });\r\n\r\n            function ClearStuff() {\r\n\r\n                exercise_control.clearObservers();\r\n                exercise_control.clearItems();\r\n                exercise_datadisplay.clearViewData();\r\n\r\n\r\n                console.log(\"reseteando\");\r\n                if (loaded_onBeforeRenderObservables != undefined) {\r\n\r\n                    loaded_onBeforeRenderObservables.forEach(value => {\r\n\r\n                        scene.onBeforeRenderObservable.remove(value);\r\n                    });\r\n\r\n                }\r\n                if (disposable_stuff != undefined) {\r\n\r\n                    disposable_stuff.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n                    // addSceneModels();\r\n\r\n                }\r\n\r\n            }\r\n\r\n            var manager = {\r\n                addExercise,\r\n                LoadQuiz,\r\n                Start,\r\n                Reset,\r\n                ClearStuff,\r\n            }\r\n\r\n            return manager;\r\n\r\n        }\r\n\r\n\r\n\r\n        var resource_manager = manageStuff();\r\n\r\n\r\n        var quiz1 = new Exercise.exercise(\r\n            \"1. ¿Que distancia recorre la pelota si se mueve a una velocidad de 5 m/s durante 2 segs?\",\r\n            [\"A) 4 metros\", \"B) 5 metros\", \"C) 10 metros\", \"D) 20 metros\"],\r\n            2,\r\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n\r\n\r\n        var quiz2 = new Exercise.exercise(\r\n            \"2. ¿que velocidad obtiene el auto si recorre 10 metros en 2.5 segundos?\",\r\n            [\"A) 25 m/s\", \"B) 10 m/s\", \"C) 5 m/s\", \"D) 4 m/s\"],\r\n            3,\r\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n\r\n\r\n        var quiz3 = new Exercise.exercise(\r\n            \"3. ¿Que tanto tiempo tarda un autobus en recorrer 20 metros a una velocidad de 3.2 m/s?\",\r\n            [\"A) 6.5 segs\", \"B) 8 segs\", \"C) 3.2 segs\", \"D) 20 segs\"],\r\n            0,\r\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        async function quiz1_models() {\r\n\r\n            function rotatewithgrades(mesh, grades) {\r\n\r\n                mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n            }\r\n\r\n\r\n            function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                collider.scaling.copyFrom(bounds);\r\n                collider.XRPickable = true;\r\n                collider.visibility = 0;\r\n\r\n                collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                collider.position = geometricCenter;\r\n\r\n                modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            var defaultmeshes = [];\r\n\r\n\r\n\r\n\r\n            var bigball = BABYLON.MeshBuilder.CreateSphere(\"bigsphere\", { segments: 12, diameter: .5 }, scene);\r\n            bigball.position.set(0, 1, 1);\r\n            bigball.physicsImpostor = new BABYLON.PhysicsImpostor(bigball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1 }, scene)\r\n            bigball.XRPickable = true;\r\n\r\n            defaultmeshes.push(bigball);\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(bigball);\r\n\r\n\r\n\r\n\r\n            return defaultmeshes;\r\n\r\n        }\r\n\r\n        async function quiz2_models() {\r\n\r\n            function rotatewithgrades(mesh, grades) {\r\n\r\n                mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n            }\r\n\r\n\r\n            function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                collider.scaling.copyFrom(bounds);\r\n                collider.XRPickable = true;\r\n                collider.visibility = 0;\r\n\r\n                collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                collider.position = geometricCenter;\r\n\r\n                modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            var defaultmeshes = [];\r\n\r\n\r\n\r\n            var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"greencar.glb\", scene));\r\n\r\n            var carmesh = carmodel.meshes;\r\n\r\n            carmesh[0].scaling.scaleInPlace(0.1);\r\n            carmesh[0].position.set(-1.5, .33, 0);\r\n\r\n\r\n            //busmeshes[0].rotationQuaternion=null;\r\n            //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n            //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n            //busmeshes[7].showBoundingBox = true;            \r\n\r\n            var carcollider = BABYLON.MeshBuilder.CreateBox(\"greencar\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n            attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n            //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n            rotatewithgrades(carcollider, 180);\r\n\r\n            //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n            defaultmeshes.push(carmesh);\r\n            defaultmeshes.push(carcollider);\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(carmesh);\r\n            section_infodisplay.logicManager.AddDisposableStuff(carcollider);\r\n\r\n\r\n\r\n            return defaultmeshes;\r\n\r\n        }\r\n\r\n        async function quiz3_models() {\r\n\r\n            function rotatewithgrades(mesh, grades) {\r\n\r\n                mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n            }\r\n\r\n\r\n            function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                collider.scaling.copyFrom(bounds);\r\n                collider.XRPickable = true;\r\n                collider.visibility = 0;\r\n\r\n                collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                collider.position = geometricCenter;\r\n\r\n                modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            var defaultmeshes = [];\r\n\r\n\r\n\r\n\r\n\r\n            var busmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"bus.gltf\", scene));\r\n\r\n            var busmesh = busmodel.meshes;\r\n\r\n            busmesh[0].scaling.scaleInPlace(0.1);\r\n            busmesh[0].position.set(-1.5, .33, 0);\r\n\r\n\r\n            //busmeshes[0].rotationQuaternion=null;\r\n            //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n            //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n            //busmeshes[7].showBoundingBox = true;            \r\n\r\n            var buscollider = BABYLON.MeshBuilder.CreateBox(\"bus\", { height: busmesh[1].height, width: busmesh[1].width, depth: busmesh[1].depth }, scene);\r\n\r\n            attachToCollider(busmesh, 0, buscollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n            //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n            rotatewithgrades(buscollider, 180);\r\n\r\n            //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n            defaultmeshes.push(busmesh);\r\n            defaultmeshes.push(buscollider);\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(busmesh);\r\n            section_infodisplay.logicManager.AddDisposableStuff(buscollider);\r\n\r\n\r\n\r\n\r\n\r\n            return defaultmeshes;\r\n\r\n        }\r\n\r\n\r\n\r\n        function exercise1Logic() {\r\n\r\n            var cannontube = scene.getMeshByName(\"cannon\");\r\n\r\n            var bigball = scene.getMeshByName(\"bigsphere\")\r\n\r\n\r\n            //Impulse Settings\r\n            var impulseDirection = new BABYLON.Vector3(0, 0, -1);\r\n            var impulseMagnitude = 5;\r\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n\r\n            var obj_Distance = 1;\r\n            var obj_Time = 1;\r\n            var obj_Velocity = 1;\r\n\r\n            var display_Distance = 0;\r\n            var display_Time = 0;\r\n            var display_Velocity = 0;\r\n\r\n\r\n\r\n\r\n            var CoT = new BABYLON.TransformNode(\"root\");\r\n            CoT.position.y = 1;\r\n            CoT.position.x = 0.3;\r\n            CoT.parent = cannontube; //Definido como componente hijo del cañón\r\n            var disposable_ghosts = []\r\n            var disposable_lines = []\r\n\r\n            function activate() {\r\n\r\n                if (disposable_ghosts) {\r\n                    disposable_ghosts.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n\r\n                }\r\n\r\n                if (disposable_lines) {\r\n                    disposable_lines.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                }\r\n                //fireball(obj_Velocity)\r\n\r\n                limitTime(bigball);\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            function limitTime(mesh) {\r\n\r\n\r\n\r\n                function ghosting(mesh, data) {\r\n\r\n\r\n                    var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                    ghost_sphere.visibility = 0.5;\r\n                    ghost_sphere.position = mesh.position;\r\n                    disposable_stuff.push(ghost_sphere)\r\n                    disposable_ghosts.push(ghost_sphere)\r\n                    section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere);\r\n\r\n\r\n\r\n\r\n\r\n                    function ghostLine() {\r\n                        if (disposable_ghosts.length > 1) {\r\n                            var past_sphere = disposable_ghosts[disposable_ghosts.length - 2]\r\n                            var actual_sphere = disposable_ghosts[disposable_ghosts.length - 1]\r\n                          \r\n                            var line = new BABYLON.Mesh.CreateLines(\"line\", [past_sphere.getAbsolutePosition(), actual_sphere.getAbsolutePosition()], scene, true);\r\n                            disposable_lines.push(line);\r\n                            disposable_stuff.push(line);\r\n                            section_infodisplay.logicManager.AddDisposableStuff(line);\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                    function ghostData(mesh) {\r\n                        var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                        miniplame.parent = mesh;\r\n                        miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                        miniplame.position.y = 0.7;\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                        var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 50;\r\n                        button1.fontStyle=\"bold\"\r\n                        button1.background = \"#00000066\";\r\n                        button1.textBlock.text = data.obj_Velocity.toString() + \" m/s\";\r\n\r\n                        var dataToshow = 1;\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n                            switch (dataToshow) {\r\n                                case 1: dataToshow = 2\r\n                                    button1.textBlock.text = data.display_Time.toString() + \" segs\";\r\n                                    break;\r\n                                case 2: dataToshow = 3\r\n                                    button1.textBlock.text = data.display_Distance.toString() + \" mts\";\r\n                                    break;\r\n                                case 3: dataToshow = 1\r\n                                    button1.textBlock.text = data.obj_Velocity.toString() + \" m/s\";\r\n                                    break;\r\n\r\n                                default:\r\n                                    break;\r\n                            }\r\n\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n\r\n\r\n                        //LOOK TEST WITH QUATERNIONS\r\n\r\n                        var look = function (mesh, pos) {\r\n                            var dv = pos.subtract(mesh.position);\r\n                            var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                            mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                        };\r\n\r\n\r\n\r\n                        //scene.registerBeforeRender(function () {\r\n                        //look(miniplame, camera.position);\r\n                        //    })\r\n\r\n\r\n\r\n                    }\r\n\r\n\r\n                    ghostData(ghost_sphere);\r\n                    ghostLine();\r\n\r\n\r\n                }\r\n\r\n\r\n                function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                    var tick = 0;\r\n                    var refreshsteps = Math.round((time / refreshRate))\r\n                    var actualstep = 0;\r\n\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n\r\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                        tick += (scene.deltaTime);\r\n\r\n                        if (tick >= refreshRate * 1000) {\r\n\r\n\r\n\r\n                            if (actualstep <= refreshsteps) {\r\n\r\n                                //code to refresh here\r\n\r\n                                tick = 0;\r\n\r\n                                display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                display_Velocity = obj_Velocity;\r\n\r\n                                exercise_datadisplay.setViewData\r\n                                    (\r\n                                        \"d: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                        \"t: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                        \"v: \" + display_Velocity + \" m/s\"\r\n                                    )\r\n\r\n                                var info = { display_Distance, display_Time, obj_Velocity }\r\n\r\n                                ghosting(mesh, info)\r\n\r\n                                if (mesh.physicsImpostor) {\r\n                                    mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(obj_Velocity));\r\n                                    //mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\r\n                                }\r\n\r\n\r\n\r\n                                //\r\n\r\n                            } else {\r\n\r\n                                actualstep = 0;\r\n                                tick = 0;\r\n                                if (mesh.physicsImpostor) {\r\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                }\r\n                                scene.onBeforeRenderObservable.remove(temporalObs);\r\n                            }\r\n                            actualstep++\r\n                        }\r\n\r\n                    });\r\n\r\n                    loaded_onBeforeRenderObservables.push(temporalObs)\r\n\r\n                }\r\n\r\n                RefreshDataInMilisecs(obj_Time, 0.25)\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            function CalculateDistance() {\r\n                obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\r\n\r\n            }\r\n\r\n\r\n\r\n            var Calculatevelocidad = function (value) {\r\n\r\n                obj_Velocity = Math.floor(value * 10) / 10\r\n                CalculateDistance();\r\n\r\n\r\n\r\n            }\r\n\r\n            var CalculateTime = function (value) {\r\n\r\n                obj_Time = Math.floor(value * 10) / 10\r\n                CalculateDistance();\r\n            }\r\n\r\n\r\n            var displayFValue = function (value) {\r\n\r\n                return Math.floor(value * 10) / 10;\r\n\r\n            }\r\n\r\n\r\n            var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n            controlSlider.addSlider(\"Velocidad\", Calculatevelocidad, \"m/s\", 1, 20, 1, displayFValue);\r\n            controlSlider.addSlider(\"Tiempo\", CalculateTime, \"segs\", 1, 5, 1, displayFValue);\r\n\r\n            exercise_control.controlPanel.addGroup(controlSlider);\r\n            exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n            //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n            var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                activate();\r\n\r\n            });\r\n\r\n            exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        function exercise2Logic() {\r\n\r\n\r\n\r\n            var car = scene.getMeshByName(\"greencar\")\r\n\r\n\r\n            //Impulse Settings\r\n            var impulseDirection = new BABYLON.Vector3(0, 0, -1);\r\n            var impulseMagnitude = 5;\r\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n\r\n            var obj_Distance = 1;\r\n            var obj_Time = 1;\r\n            var obj_Velocity = 1;\r\n\r\n            var display_Distance = 0;\r\n            var display_Time = 0;\r\n            var display_Velocity = 0;\r\n\r\n\r\n\r\n            var disposable_ghosts = []\r\n            var disposable_lines = []\r\n\r\n            function activate() {\r\n\r\n                if (disposable_ghosts) {\r\n                    disposable_ghosts.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n\r\n                }\r\n\r\n                if (disposable_lines) {\r\n                    disposable_lines.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                }\r\n                //fireball(obj_Velocity)\r\n\r\n                limitTime(car);\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            function limitTime(mesh) {\r\n\r\n\r\n\r\n                function ghosting(mesh, data) {\r\n\r\n\r\n                    var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                    ghost_sphere.visibility = 0.5;\r\n                    ghost_sphere.position = mesh.position;\r\n                    disposable_stuff.push(ghost_sphere)\r\n                    disposable_ghosts.push(ghost_sphere)\r\n\r\n\r\n\r\n\r\n\r\n                    function ghostLine() {\r\n                        if (disposable_ghosts.length > 1) {\r\n                            var past_sphere = disposable_ghosts[disposable_ghosts.length - 2]\r\n                            var actual_sphere = disposable_ghosts[disposable_ghosts.length - 1]\r\n                          \r\n                            var line = new BABYLON.Mesh.CreateLines(\"line\", [past_sphere.getAbsolutePosition(), actual_sphere.getAbsolutePosition()], scene, true);\r\n                            disposable_lines.push(line);\r\n                            disposable_stuff.push(line);\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                    function ghostData(mesh) {\r\n                        var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                        miniplame.parent = mesh;\r\n                        miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                        miniplame.position.y = 0.7;\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                        var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 50;\r\n                        button1.fontStyle=\"bold\"\r\n                        button1.background = \"#00000066\"\r\n                        button1.textBlock.text = data.obj_Velocity.toString() + \" m/s\";\r\n\r\n                        var dataToshow = 1;\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n                            switch (dataToshow) {\r\n                                case 1: dataToshow = 2\r\n                                    button1.textBlock.text = data.display_Time.toString() + \" segs\";\r\n                                    break;\r\n                                case 2: dataToshow = 3\r\n                                    button1.textBlock.text = data.display_Distance.toString() + \" mts\";\r\n                                    break;\r\n                                case 3: dataToshow = 1\r\n                                    button1.textBlock.text = data.obj_Velocity.toString() + \" m/s\";\r\n                                    break;\r\n\r\n                                default:\r\n                                    break;\r\n                            }\r\n\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n\r\n\r\n                        //LOOK TEST WITH QUATERNIONS\r\n\r\n                        var look = function (mesh, pos) {\r\n                            var dv = pos.subtract(mesh.position);\r\n                            var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                            mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                        };\r\n\r\n\r\n\r\n                        //scene.registerBeforeRender(function () {\r\n                        //look(miniplame, camera.position);\r\n                        //    })\r\n\r\n\r\n\r\n                    }\r\n\r\n\r\n                    ghostData(ghost_sphere);\r\n                    ghostLine();\r\n\r\n\r\n                }\r\n\r\n\r\n                function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                    var tick = 0;\r\n                    var refreshsteps = Math.round((time / refreshRate))\r\n                    var actualstep = 0;\r\n\r\n                    var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n\r\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                        tick += (scene.deltaTime);\r\n\r\n                        if (tick >= refreshRate * 1000) {\r\n\r\n\r\n\r\n                            if (actualstep <= refreshsteps) {\r\n\r\n                                //code to refresh here\r\n\r\n                                tick = 0;\r\n\r\n                                display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                display_Velocity = obj_Velocity;\r\n\r\n                                exercise_datadisplay.setViewData\r\n                                    (\r\n                                        \"d: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                        \"t: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                        \"v: \" + display_Velocity + \" m/s\"\r\n                                    )\r\n\r\n                                var info = { display_Distance, display_Time, obj_Velocity }\r\n\r\n                                ghosting(mesh, info)\r\n\r\n                                if (mesh.physicsImpostor) {\r\n                                    //mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(obj_Velocity));\r\n                                    mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\r\n                                }\r\n\r\n\r\n\r\n                                //\r\n\r\n                            } else {\r\n\r\n                                actualstep = 0;\r\n                                tick = 0;\r\n                                if (mesh.physicsImpostor) {\r\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                }\r\n                                scene.onBeforeRenderObservable.remove(temporalObs);\r\n                            }\r\n                            actualstep++\r\n                        }\r\n\r\n                    });\r\n\r\n                    loaded_onBeforeRenderObservables.push(temporalObs)\r\n\r\n                }\r\n\r\n                RefreshDataInMilisecs(obj_Time, 0.25)\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            function calculate_distance() {\r\n\r\n                obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\r\n            }\r\n\r\n            function calculate_velocity() {\r\n\r\n                obj_Velocity = (obj_Distance / obj_Time).toFixed(2);\r\n            }\r\n\r\n            function calculate_time() {\r\n\r\n                obj_Time = (obj_Distance / obj_Velocity).toFixed(2);\r\n            }\r\n\r\n\r\n\r\n\r\n            var edit_distance = function (value) {\r\n\r\n                obj_Distance = Math.floor(value * 10) / 10\r\n                calculate_velocity();\r\n                //calculate_time();\r\n\r\n            }\r\n\r\n\r\n\r\n            var edit_velocity = function (value) {\r\n\r\n                obj_Velocity = Math.floor(value * 10) / 10\r\n                //calculate_distance(); \r\n                //calculate_time();\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            var edit_time = function (value) {\r\n\r\n                obj_Time = Math.floor(value * 10) / 10\r\n                //calculate_distance();   \r\n                calculate_velocity();\r\n            }\r\n\r\n\r\n            var displayFValue = function (value) {\r\n\r\n                return Math.floor(value * 10) / 10;\r\n\r\n            }\r\n\r\n\r\n            var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n            controlSlider.addSlider(\"Distancia\", edit_distance, \"m\", 1, 20, 1, displayFValue);\r\n            controlSlider.addSlider(\"Tiempo\", edit_time, \"segs\", 1, 5, 1, displayFValue);\r\n\r\n            exercise_control.controlPanel.addGroup(controlSlider);\r\n            exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n            //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n            var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                activate();\r\n\r\n            });\r\n\r\n            exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        function exercise3Logic() {\r\n\r\n\r\n            //Impulse Settings\r\n            var impulseDirection = new BABYLON.Vector3(0, 0, -1);\r\n            var impulseMagnitude = 5;\r\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n\r\n            var obj_Distance = 1;\r\n           \r\n            var obj_Velocity = 1;\r\n\r\n            var obj_Time = obj_Distance*obj_Velocity;\r\n\r\n            var display_Distance = 0;\r\n            var display_Time = 0;\r\n            var display_Velocity = 0;\r\n\r\n\r\n\r\n            var disposable_ghosts = []\r\n            var disposable_lines = []\r\n\r\n            function activate() {\r\n\r\n                var bus = scene.getMeshByName(\"bus\")\r\n\r\n                if (disposable_ghosts) {\r\n                    disposable_ghosts.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n\r\n                }\r\n\r\n                if (disposable_lines) {\r\n                    disposable_lines.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                }\r\n                //fireball(obj_Velocity)\r\n               \r\n                limitTime(bus);\r\n               \r\n                \r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            function limitTime(mesh) {\r\n\r\n\r\n\r\n                function ghosting(mesh, data) {\r\n\r\n\r\n                    var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                    ghost_sphere.visibility = 0.5;\r\n                    ghost_sphere.position = mesh.position;\r\n                    disposable_stuff.push(ghost_sphere)\r\n                    disposable_ghosts.push(ghost_sphere)\r\n                    section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n\r\n\r\n\r\n                    function ghostLine() {\r\n                        if (disposable_ghosts.length > 1) {\r\n                            var past_sphere = disposable_ghosts[disposable_ghosts.length - 2]\r\n                            var actual_sphere = disposable_ghosts[disposable_ghosts.length - 1]\r\n                          \r\n                            var line = new BABYLON.Mesh.CreateLines(\"line\", [past_sphere.getAbsolutePosition(), actual_sphere.getAbsolutePosition()], scene, true);\r\n                            disposable_lines.push(line);\r\n                            disposable_stuff.push(line);\r\n                            section_infodisplay.logicManager.AddDisposableStuff(line)\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                    function ghostData(mesh) {\r\n                        var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                        miniplame.parent = mesh;\r\n                        miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                        miniplame.position.y = 0.7;\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                        var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 50;\r\n                        button1.fontStyle=\"bold\"\r\n                        button1.background = \"#00000066\"\r\n                        button1.textBlock.text = data.obj_Velocity.toString() + \" m/s\";\r\n\r\n                        var dataToshow = 1;\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n                            switch (dataToshow) {\r\n                                case 1: dataToshow = 2\r\n                                    button1.textBlock.text = data.display_Time.toString() + \" segs\";\r\n                                    break;\r\n                                case 2: dataToshow = 3\r\n                                    button1.textBlock.text = data.display_Distance.toString() + \" mts\";\r\n                                    break;\r\n                                case 3: dataToshow = 1\r\n                                    button1.textBlock.text = data.obj_Velocity.toString() + \" m/s\";\r\n                                    break;\r\n\r\n                                default:\r\n                                    break;\r\n                            }\r\n\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n\r\n\r\n                        //LOOK TEST WITH QUATERNIONS\r\n\r\n                        var look = function (mesh, pos) {\r\n                            var dv = pos.subtract(mesh.position);\r\n                            var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                            mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                        };\r\n\r\n\r\n\r\n                        //scene.registerBeforeRender(function () {\r\n                        //look(miniplame, camera.position);\r\n                        //    })\r\n\r\n\r\n\r\n                    }\r\n\r\n\r\n                    ghostData(ghost_sphere);\r\n                    ghostLine();\r\n\r\n\r\n                }\r\n\r\n\r\n                function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                    var tick = 0;\r\n                    var refreshsteps = Math.round((time / refreshRate))\r\n                    var actualstep = 0;\r\n\r\n                    var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    \r\n\r\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                        tick += (scene.deltaTime);\r\n\r\n                        if (tick >= refreshRate * 1000) {\r\n\r\n\r\n\r\n                            if (actualstep <= refreshsteps) {\r\n\r\n                                //code to refresh here\r\n\r\n                                tick = 0;\r\n\r\n                                display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                display_Velocity = obj_Velocity;\r\n\r\n                                exercise_datadisplay.setViewData\r\n                                    (\r\n                                        \"d: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                        \"t: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                        \"v: \" + display_Velocity + \" m/s\"\r\n                                    )\r\n\r\n                                var info = { display_Distance, display_Time, obj_Velocity }\r\n\r\n                             \r\n                                if (mesh.physicsImpostor) {\r\n\r\n                                    ghosting(mesh, info)                              \r\n                                    //mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(obj_Velocity));\r\n                                    mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\r\n                                }\r\n\r\n\r\n\r\n                                //\r\n\r\n                            } else {\r\n\r\n                                actualstep = 0;\r\n                                tick = 0;\r\n                                if (mesh.physicsImpostor) {\r\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                }\r\n                                scene.onBeforeRenderObservable.remove(temporalObs);\r\n                            }\r\n                            actualstep++\r\n                        }\r\n\r\n                    });\r\n\r\n                    loaded_onBeforeRenderObservables.push(temporalObs)\r\n\r\n                }\r\n\r\n                RefreshDataInMilisecs(obj_Time, 0.25)\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            function calculate_distance() {\r\n\r\n                obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\r\n            }\r\n\r\n            function calculate_velocity() {\r\n\r\n                obj_Velocity = (obj_Distance / obj_Time).toFixed(2);\r\n            }\r\n\r\n            function calculate_time() {\r\n\r\n                obj_Time = (obj_Distance / obj_Velocity).toFixed(2);\r\n            }\r\n\r\n\r\n\r\n\r\n            var edit_distance = function (value) {\r\n\r\n                obj_Distance = Math.floor(value * 10) / 10\r\n                //calculate_velocity();\r\n                calculate_time();\r\n\r\n            }\r\n\r\n\r\n\r\n            var edit_velocity = function (value) {\r\n\r\n                obj_Velocity = Math.floor(value * 10) / 10\r\n                //calculate_distance(); \r\n                calculate_time();\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            var edit_time = function (value) {\r\n\r\n                obj_Time = Math.floor(value * 10) / 10\r\n                //calculate_distance();   \r\n                //calculate_velocity();\r\n            }\r\n\r\n\r\n            var displayFValue = function (value) {\r\n\r\n                return Math.floor(value * 10) / 10;\r\n\r\n            }\r\n\r\n\r\n            var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n            controlSlider.addSlider(\"Distancia\", edit_distance, \"m\", 1, 20, 1, displayFValue);\r\n            controlSlider.addSlider(\"Velocidad\", edit_velocity, \"m/s\", 1, 5, 1, displayFValue);\r\n\r\n            exercise_control.controlPanel.addGroup(controlSlider);\r\n            exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n            //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n            var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                activate();\r\n\r\n            });\r\n\r\n            exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        quiz1.addLogic(exercise1Logic)\r\n        quiz1.addModels(quiz1_models)\r\n\r\n\r\n        quiz2.addLogic(exercise2Logic)\r\n        quiz2.addModels(quiz2_models)\r\n\r\n\r\n\r\n        quiz3.addLogic(exercise3Logic)\r\n        quiz3.addModels(quiz3_models)\r\n\r\n\r\n\r\n        resource_manager.addExercise(quiz1);\r\n        resource_manager.addExercise(quiz2);\r\n        resource_manager.addExercise(quiz3);\r\n\r\n\r\n        resource_manager.Start(loaded_exercise_index)\r\n\r\n    }\r\n\r\n    var loader = new BABYLON.AssetsManager(scene);\r\n\r\n    loader.onFinish = function () {\r\n\r\n        engine.runRenderLoop(() => {\r\n            if (scene) {\r\n                window.document.title = engine.getFps().toFixed() + \" fps\";\r\n                scene.render();\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    scene.executeWhenReady(function () {\r\n\r\n        engine.hideLoadingUI();\r\n\r\n        if (document.getElementById(\"xr-button\")) {\r\n            let XRbutton = document.getElementById(\"xr-button\");\r\n\r\n            XRbutton.addEventListener(\"click\", async function () {\r\n\r\n                if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\r\n\r\n                    xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\r\n                    xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\r\n                    await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\r\n\r\n                } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\r\n                    await xr.baseExperience.exitXRAsync()\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n\r\n        if (document.getElementById(\"fullscreen-button\")) {\r\n            let button = document.getElementById(\"fullscreen-button\")\r\n\r\n            button.addEventListener(\"click\", async function () {\r\n                //engine.enterFullScreen(true);\r\n\r\n                engine.switchFullscreen(false);\r\n            })\r\n        }\r\n\r\n    });\r\n\r\n\r\n    loader.load();\r\n}\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <React.Fragment>\r\n        <Container maxWidth='xl'>\r\n\r\n            {/*<WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />*/}\r\n\r\n\r\n            <Box width=\"100%\" p={1} my={0.5}>\r\n                <BabylonScene onSceneMount={onSceneMount} />\r\n            </Box>\r\n\r\n\r\n            <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\r\n                <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\r\n                    <Typography variant=\"h6\">Entrar a modo XR</Typography>\r\n                </Button>\r\n                <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\r\n                    <Typography variant=\"h6\">pantalla completa</Typography>\r\n                </Button>\r\n            </Container>\r\n\r\n\r\n\r\n        </Container>\r\n    </React.Fragment>\r\n)\r\n}\r\n\r\nexport default ExercisePage","export default __webpack_public_path__ + \"static/media/card1.4450b779.PNG\";","export default __webpack_public_path__ + \"static/media/card2.7c2edc2c.PNG\";","export default __webpack_public_path__ + \"static/media/card3.cb47dd66.PNG\";","export default __webpack_public_path__ + \"static/media/card4.9adb7a2d.PNG\";","export default __webpack_public_path__ + \"static/media/alert2.2455318f.png\";","export default __webpack_public_path__ + \"static/media/card5.565505ac.PNG\";","export default __webpack_public_path__ + \"static/media/cardboard.ca4cc733.png\";","import React, { Component, useRef } from 'react'\r\nimport Main from '../../WebLayout/Main';\r\nimport * as BABYLON from 'babylonjs';\r\nimport BabylonScene from '../../BabylonScene/'; // import the component above linking to file we just created.\r\nimport * as GUI from 'babylonjs-gui';\r\nimport 'babylonjs-loaders';\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box'\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport { Timer } from \"easytimer.js\";\r\n\r\n\r\nimport { Container, Button } from '@material-ui/core';\r\n\r\nimport { useAuth } from '../../Contexts/AuthContext'\r\n\r\n\r\nimport * as Ground from '../../BabylonScene/components/Ground'\r\n\r\nimport * as Exercise from '../../BabylonScene/components/exercise'\r\n\r\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\r\n\r\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\r\n\r\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\r\n\r\n//import WebCam from '../../EmotionRecognition_Components/WebCam'\r\n//import * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\r\n\r\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\r\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\r\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\r\n\r\nimport XRDisplayPlane from '../../FisicARtivo_Components/XRDisplayPlane';\r\n\r\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\r\n\r\nimport card1 from '../exercise_1_3/resources/card1.PNG'\r\nimport card2 from '../exercise_1_3/resources/card2.PNG'\r\nimport card3 from '../exercise_1_3/resources/card3.PNG'\r\nimport card4 from '../exercise_1_3/resources/card4.PNG'\r\nimport card5 from '../exercise_1_3/resources/card5.PNG'\r\nimport alert2 from '../exercise_1_3/resources/alert2.png'\r\nimport cardboard from '../exercise_1_3/resources/cardboard.png'\r\n\r\nclass ExercisePage extends Component {\r\n    render() {\r\n        return (\r\n            <Main data={GetMainContent} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imagebox: {\r\n        //backgroundImage: 'url(' + drawerImage + ')',   \r\n        height: '100%',\r\n        width: '60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    card: {\r\n        height: '100%',\r\n\r\n        flexDirection: 'column',\r\n    },\r\n    media: {\r\n        height: 400,\r\n\r\n    },\r\n    babylonbuttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n\r\n    },\r\n}));\r\n\r\nfunction GetMainContent() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { currentUser } = useAuth();\r\n\r\n    //const webcam = useRef({});\r\n\r\n    var exerciseData = {\r\n        id: 'exercise_1_3',\r\n        generalTime: '00:00',\r\n        totalErrors: 0,\r\n        isCompleted: false,\r\n        quizes: {\r\n            quiz_1: {\r\n                id: 'quiz_1',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_2: {\r\n                id: 'quiz_2',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_3: {\r\n                id: 'quiz_3',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    DataCapture.setCurrentUser(currentUser);\r\n\r\n    DataCapture.setExerciseData(exerciseData);\r\n\r\n    DataCapture.checkUserExerciseData(exerciseData.id);\r\n\r\n    DataCapture.globalTimer.start();\r\n\r\n    //EmotionsAPI.setCurrentUser(currentUser);\r\n\r\n    //EmotionsAPI.loadModels();\r\n\r\n    /*async function takeCapture() {\r\n        webcam.current.takeCapture();\r\n    }\r\n    async function stopCamera() {\r\n        webcam.current.stopCamera();\r\n    }\r\n\r\n    async function startCamera() {\r\n        webcam.current.startCamera();\r\n    }*/\r\n\r\n    var onSceneMount = (e: SceneEventArgs) => {\r\n        const { canvas, scene, engine } = e;\r\n\r\n        engine.displayLoadingUI();\r\n\r\n        const QuizTimer = new Timer();\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\r\n        const camera_x = -4\r\n        const camera_y = 1.5\r\n        const camera_z = 0\r\n\r\n        const camera_initialPos = new BABYLON.Vector3(camera_x, camera_y, camera_z);\r\n        const camera_initialTarget = new BABYLON.Vector3(0, 1, 0);\r\n        const camera_speed = 0.7;\r\n        const camera_angularSensibility = 1200;\r\n\r\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(camera_initialTarget);\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, false);\r\n\r\n        camera.speed = camera_speed;\r\n        camera.angularSensibility = camera_angularSensibility;\r\n        camera.inertia = .5;\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 0.7;\r\n\r\n        // Light\r\n        //const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\r\n        //light.intensity = 0.9;\r\n\r\n        // Skybox\r\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\r\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\r\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n\r\n\r\n        // physics\r\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\r\n\r\n        var physicsEngine = scene.getPhysicsEngine();\r\n        //physicsEngine.setSubTimeStep(1);\r\n\r\n\r\n        // Enable Collisions\r\n        scene.collisionsEnabled = true;\r\n\r\n        //Then apply collisions and gravity to the active camera\r\n        camera.checkCollisions = true;\r\n        camera.applyGravity = true;\r\n\r\n        //Set the ellipsoid around the camera (e.g. your player's size)\r\n        camera.ellipsoid = new BABYLON.Vector3(1, .8, 1);\r\n\r\n        var ground = Ground.createPlayGroundGigant(scene);\r\n\r\n\r\n        //var ground= Ground.createPlayGroundLarge(scene);\r\n\r\n        //finally, say which mesh will be collisionable\r\n        ground.checkCollisions = true;\r\n\r\n\r\n        //addSceneModels();\r\n        var xr = {};\r\n\r\n\r\n        async function XRmode() {\r\n\r\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\r\n\r\n            xr = await scene.createDefaultXRExperienceAsync({\r\n\r\n\r\n                disableDefaultUI: true,\r\n                //floorMeshes: [ground],\r\n                uiOptions: {\r\n\r\n                    sessionMode: \"immersive-ar\"\r\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\r\n                    , referenceSpaceType: \"local-floor\"\r\n                },\r\n                inputOptions: { doNotLoadControllerMeshes: false }\r\n            });\r\n\r\n\r\n\r\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\r\n                    // floor is at y === 2\r\n                    camera.y = 2;\r\n                \r\n                });*/\r\n\r\n\r\n\r\n\r\n\r\n            xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\r\n                    ground.visibility = 0;\r\n                    skybox.isVisible = false;\r\n                    //GUI_controller.createXRGui();\r\n                    //stopCamera();\r\n                    //EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\r\n                    ground.visibility = 1;\r\n                    skybox.isVisible = true;\r\n                    //GUI_controller.createNormalGui();\r\n                    //startCamera();\r\n                    //EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n        }\r\n\r\n        XRmode();\r\n\r\n      \r\n\r\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\r\n        gizmoManager.selectMode(0);\r\n\r\n        var pickedMesh = null;\r\n        var attachedMesh = null;\r\n        var pressed = null\r\n\r\n        //observables generales globales para picking meshes\r\n\r\n        scene.onPointerObservable.addOnce(pointerinfo => {\r\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\r\n                QuizTimer.start();\r\n            }\r\n        })\r\n\r\n        scene.onPointerObservable.add((pointerInfo) => {\r\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n\r\n            //if (pointerInfo.type === 4) {\r\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\r\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\r\n            // }\r\n            //}\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n\r\n                    scene.constantlyUpdateMeshUnderPointer = true;\r\n\r\n                    pressed = true;\r\n\r\n                    attachedMesh = pickedMesh;\r\n\r\n                    gizmoManager.attachToMesh(attachedMesh);\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                    attachedMesh = null;\r\n                    gizmoManager.attachToMesh(null);\r\n                }\r\n\r\n            }\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\r\n\r\n                scene.constantlyUpdateMeshUnderPointer = false;\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n\r\n                    // pickedMesh.physicsImpostor.wakeUp();\r\n                    pressed = false;\r\n                    //pickedMesh.physicsImpostor.dispose();\r\n                    //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\r\n\r\n                    pickedMesh = null;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scene.onBeforePhysicsObservable.add(() => {\r\n\r\n            if (pressed && pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\r\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n        scene.registerBeforeRender(() => {\r\n\r\n            /* if(xr) {\r\n                 if(xr.input.controllers.length) {\r\n         \r\n                     const c = xr.input.controllers[0];\r\n                     \r\n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\r\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\r\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\r\n                     laserPointer.position.copyFrom(c.pointer.position);\r\n                    \r\n                     laserPointer.parent = xr.baseExperience.container;\r\n                 }\r\n             }*/\r\n        })\r\n\r\n\r\n        //DATA DISPLAY COMPONENTS\r\n\r\n        var info_card1 = new ImageInfoCard(\"card1\", card1);\r\n        var info_card2 = new ImageInfoCard(\"card2\", card2);\r\n        var info_card3 = new ImageInfoCard(\"card3\", card3);\r\n        var info_card4 = new ImageInfoCard(\"card4\", card4);\r\n\r\n        var alert_card = new ImageInfoCard('alert', alert2)\r\n        var info_card6 = new ImageInfoCard(\"card6\", cardboard);\r\n\r\n\r\n        info_card1.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n        })\r\n\r\n\r\n        info_card2.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card2_demo();\r\n\r\n        });\r\n\r\n\r\n        info_card3.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card2_demo();\r\n        })\r\n\r\n        alert_card.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n\r\n\r\n        })\r\n\r\n        info_card6.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card5_exercises();\r\n\r\n        })\r\n\r\n\r\n        var section_infodisplay = InfoDisplay(scene, 2);\r\n        //var local_pos = new BABYLON.Vector3(0, 1, 0);\r\n        //section_infodisplay.displayPlane.position = local_pos; //position sphere relative to world\r\n\r\n        section_infodisplay.addCard(info_card1);\r\n        section_infodisplay.addCard(info_card2);\r\n        section_infodisplay.addCard(info_card3);\r\n        section_infodisplay.addCard(info_card4);\r\n\r\n        section_infodisplay.addCard(alert_card);\r\n        section_infodisplay.addCard(info_card6);\r\n\r\n        section_infodisplay.Start(0);\r\n\r\n\r\n\r\n        //declarate initial values \r\n\r\n\r\n        var loaded_exercise_index = 0;\r\n\r\n\r\n        function card2_demo() {\r\n\r\n            var carmodel;\r\n            var to_clone_model\r\n\r\n            var disposable_ghost_points = []\r\n            var disposable_clones = []\r\n            var disposable_lines = []\r\n            var disposable_panels = []\r\n            var loaded_onBeforeRenderObservables = []\r\n\r\n            var defaultmeshes = [];\r\n\r\n\r\n            async function load_model() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n                }\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"greencar.glb\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.2);\r\n                carmesh[0].position.set(-.5, .33, 0);\r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider)\r\n\r\n\r\n            }\r\n\r\n            function prepare() {\r\n\r\n                load_model().then(() => {\r\n\r\n                    to_clone_model = defaultmeshes[0];\r\n\r\n                    carmodel = scene.getMeshByName(\"carBox1\")\r\n\r\n\r\n                })\r\n            }\r\n\r\n            prepare();\r\n\r\n\r\n            //Impulse Settings\r\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n            var impulseMagnitude = 5;\r\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n\r\n            var obj_Distance = 1;\r\n            var obj_Time = 2\r\n            var obj_Accel = 5\r\n            var obj_Velocity = obj_Time * obj_Accel;\r\n\r\n            var display_Distance = 0;\r\n            var display_Time = 0;\r\n            var display_Velocity = 0;\r\n            var display_Accel = 0\r\n\r\n\r\n\r\n            function activate() {\r\n\r\n                try {\r\n                    if (carmodel) {\r\n\r\n                        ControlWithLimitTime(carmodel);\r\n\r\n                    }\r\n\r\n\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n\r\n\r\n            }\r\n\r\n            function ControlWithLimitTime(mesh) {\r\n\r\n\r\n\r\n                function ghosting(mesh, data) {\r\n\r\n                    //to_clone_model = defaultmeshes[0];\r\n                    var ghost_clone = to_clone_model[0].clone(\"bModel\");\r\n                    ghost_clone.setParent(null)\r\n                    //var ghost_sphere = ghost_model[0].createInstance(\"bModel\")\r\n\r\n                    for (var child of ghost_clone.getChildMeshes()) {\r\n                        child.material = new BABYLON.StandardMaterial(\"mat\");\r\n                        child.material.alpha = 0.25;\r\n                        //child.material.diffuseTexture = new BABYLON.Texture(\"textures/speckles.jpg\");\r\n                    }\r\n\r\n                    ghost_clone.setAbsolutePosition(mesh.position);\r\n\r\n\r\n                    ghost_clone.position.y -= 0.3\r\n\r\n\r\n\r\n                    var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                    var material = new BABYLON.StandardMaterial(\"mat\");\r\n                    material.diffuseColor = new BABYLON.Color4(0, 1, 0, 1)\r\n                    //ghost_sphere.visibility = 1;\r\n                    ghost_sphere.material = material;\r\n\r\n                    ghost_sphere.setAbsolutePosition(mesh.position);\r\n                    //ghost_sphere.position.set(mesh.position);\r\n                    //ghost_sphere.position = mesh.position;\r\n\r\n\r\n                    disposable_ghost_points.push(ghost_sphere)\r\n                    section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n                    disposable_clones.push(ghost_clone)\r\n                    section_infodisplay.logicManager.AddDisposableStuff(ghost_clone);\r\n\r\n\r\n\r\n\r\n                    function applyLine() {\r\n                        if (disposable_ghost_points.length > 1) {\r\n                            var past_sphere = disposable_ghost_points[disposable_ghost_points.length - 2]\r\n                            var actual_sphere = disposable_ghost_points[disposable_ghost_points.length - 1]\r\n\r\n                            var line = new BABYLON.Mesh.CreateLines(\"line\", [past_sphere.getAbsolutePosition(), actual_sphere.getAbsolutePosition()], scene, true);\r\n                            disposable_lines.push(line);\r\n\r\n                            section_infodisplay.logicManager.AddDisposableStuff(line)\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                    function ApplyDataPanel(mesh) {\r\n                        var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.25, width: 0.5 });\r\n                        miniplame.parent = mesh;\r\n                        miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                        miniplame.position.y = 0.7;\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 400, 160);\r\n\r\n                        var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 50;\r\n                        button1.fontStyle = \"bold\"\r\n                        button1.background = \"#00000066\"\r\n                        button1.textBlock.text = \"Velocidad: \" + '\\n' + data.display_Velocity.toString() + \" m/s\";\r\n\r\n                        var dataToshow = 1;\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n                            switch (dataToshow) {\r\n                                case 1: dataToshow = 2\r\n                                    button1.textBlock.text = \"Tiempo: \" + '\\n' + data.display_Time.toString() + \" segs\";\r\n                                    break;\r\n                                case 2: dataToshow = 3\r\n                                    button1.textBlock.text = \"Distancia: \" + '\\n' + data.display_Distance.toString() + \" mts\";\r\n                                    break;\r\n                                case 3: dataToshow = 1\r\n                                    button1.textBlock.text = \"Velocidad: \" + '\\n' + data.display_Velocity.toString() + \" m/s\";\r\n                                    break;\r\n\r\n                                default:\r\n                                    break;\r\n                            }\r\n\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n\r\n\r\n                        //LOOK TEST WITH QUATERNIONS\r\n\r\n                        var look = function (mesh, pos) {\r\n                            var dv = pos.subtract(mesh.position);\r\n                            var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                            mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                        };\r\n\r\n\r\n\r\n                        //scene.registerBeforeRender(function () {\r\n                        //look(miniplame, camera.position);\r\n                        //    })\r\n\r\n\r\n\r\n                    }\r\n\r\n\r\n                    ApplyDataPanel(ghost_sphere);\r\n                    applyLine();\r\n\r\n\r\n                }\r\n\r\n\r\n                function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                    var tick = 0;\r\n                    var deltaTime = 0\r\n                    var refreshsteps = Math.round((time / refreshRate))\r\n                    var actualstep = 0;\r\n\r\n                    //tick = 1000 milisecs = 1 seg aprox 15 to 20 per frame\r\n                    //timer * 1000 = time to milisecs\r\n                    //aceleration = vel/tiempo alcuadrado\r\n                    // vel(multiplier)\r\n                    //multiplier= CurrentTime/maxTime\r\n                    //tickTimer= tick++\r\n                    var currentTime = 0;\r\n\r\n                    var multiplier = function () {\r\n\r\n                        var value = currentTime / (time * 1000)\r\n\r\n                        return value;\r\n                    }\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var accelObs = scene.onBeforeRenderObservable.add(() => {\r\n                        deltaTime = (scene.deltaTime);\r\n\r\n                        currentTime += deltaTime;\r\n\r\n                        if (mesh.physicsImpostor) {\r\n                            // mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(obj_Velocity*multiplier()));\r\n                            mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity * multiplier()))));\r\n                        }\r\n\r\n                        if (currentTime >= time * 1000) {\r\n                            deltaTime = 0;\r\n                            // if(mesh.physicsImpostor){\r\n                            //     mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                            //    }\r\n                            scene.onBeforeRenderObservable.remove(accelObs);\r\n                        }\r\n                    })\r\n\r\n\r\n\r\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                        tick += (scene.deltaTime);\r\n\r\n                        if (tick >= refreshRate * 1000) {\r\n\r\n\r\n\r\n                            if (actualstep <= refreshsteps) {\r\n\r\n                                //code to refresh here\r\n\r\n                                tick = 0;\r\n\r\n\r\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                display_Distance = (((obj_Accel * (display_Time * display_Time)) / 2)).toFixed(2).toString();\r\n\r\n                                display_Velocity = (obj_Velocity * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                /*exercise_datadisplay.setViewData\r\n                                    (\r\n                                        \"recorrido: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                        \"v: \" + display_Velocity + \" m/s\" + \"\\n\" +\r\n                                        \"t: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                        \"a: \" + obj_Accel + \" m/s^2\"\r\n                                    )*/\r\n\r\n                                var info = { display_Distance, display_Time, display_Velocity }\r\n\r\n                                ghosting(mesh, info)\r\n\r\n                                //  if(mesh.physicsImpostor){\r\n                                //      mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(display_Velocity));\r\n                                //  }\r\n\r\n\r\n\r\n                                //\r\n\r\n                            } else {\r\n\r\n                                actualstep = 0;\r\n                                tick = 0;\r\n                                if (mesh.physicsImpostor) {\r\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                }\r\n                                scene.onBeforeRenderObservable.remove(temporalObs);\r\n                            }\r\n                            actualstep++\r\n                        }\r\n\r\n                    });\r\n\r\n                }\r\n\r\n                RefreshDataInMilisecs(obj_Time, 0.25)\r\n\r\n            }\r\n\r\n\r\n            function disposeDefaultMeshes() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n            }\r\n\r\n            function disposeghosts() {\r\n\r\n\r\n                if (disposable_ghost_points) {\r\n                    disposable_ghost_points.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_ghost_points = []\r\n\r\n                }\r\n\r\n                if (disposable_lines) {\r\n                    disposable_lines.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_lines = []\r\n                }\r\n\r\n\r\n                if (disposable_panels) {\r\n                    disposable_panels.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_panels = []\r\n                }\r\n\r\n\r\n                if (disposable_clones) {\r\n                    disposable_clones.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_clones = []\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            var button = GUI.Button.CreateImageOnlyButton(\"but\", \"images/pressme.png\")\r\n            button.color = \"transparent\"\r\n\r\n            var test = new XRDisplayPlane(.5, .33, true, true, scene);\r\n\r\n            test.setScaleToInPixels(300, 160)\r\n            test.displayPlane.position.set(0, 1, 1.2);\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(test.displayPlane);\r\n\r\n            var switchmode = 1;\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        activate();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeghosts();\r\n                        disposeDefaultMeshes();\r\n                        prepare();\r\n\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n            test.addControl(button);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        var OnscreenTimer = new Timer();\r\n\r\n        function card5_exercises() {\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var disposable_stuff = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n\r\n\r\n            var exercise_quizdisplay = XRQuizDisplay(scene, 1, true);\r\n            exercise_quizdisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_quizdisplay.displayPlane.position.x -= 0.3\r\n            exercise_quizdisplay.displayPlane.position.y += 0.5\r\n\r\n            var exercise_datadisplay = XRDinamicsDataDisplay(scene, 1, true)\r\n            exercise_datadisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_datadisplay.displayPlane.position.x -= 0.3\r\n            exercise_datadisplay.displayPlane.position.z -= 2.4\r\n            exercise_datadisplay.displayPlane.position.y += 0.4\r\n\r\n            exercise_datadisplay.addFormulaImage(\"/images/equ1-3.png\")\r\n\r\n\r\n            var exercise_control = XRControlDisplay(scene, 1, true)\r\n            exercise_control.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_control.displayPlane.position.x -= 0.3\r\n            exercise_control.displayPlane.position.z+=2.4\r\n            exercise_control.displayPlane.position.y+=0.4\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_quizdisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_datadisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_control.displayPlane);\r\n\r\n\r\n\r\n            exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index--\r\n\r\n                if (loaded_exercise_index < 0) {\r\n                    loaded_exercise_index++;\r\n                } if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n\r\n                }\r\n\r\n            });\r\n\r\n            exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index++;\r\n\r\n                if (loaded_exercise_index > quizesList.length - 1) {\r\n                    loaded_exercise_index--;\r\n                }\r\n                if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n\r\n                }\r\n\r\n            });\r\n\r\n            exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\r\n\r\n                if (exercise_quizdisplay.getIsCorrect()) {\r\n\r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                    DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\r\n                    //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\r\n                    DataCapture.getQuizByID(currentQuiz).isCompleted = true;\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n                    QuizTimer.reset();\r\n\r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n\r\n                    } else {\r\n                        exercise_quizdisplay.correctPanel.show();\r\n                    }\r\n\r\n\r\n\r\n                } else {\r\n\r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                    DataCapture.addTotalError(currentQuiz);\r\n                    DataCapture.addQuizErrorByID(currentQuiz);\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n\r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n\r\n                    } else {\r\n                        exercise_quizdisplay.incorrectPanel.show();\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n\r\n            exercise_control.button2.onPointerUpObservable.add(function () {\r\n\r\n                resource_manager.Reset();\r\n\r\n                QuizTimer.reset();\r\n\r\n            });\r\n\r\n\r\n            if (!OnscreenTimer.isRunning()) {\r\n                OnscreenTimer.start();\r\n            }\r\n\r\n            function isCompleted_Question_number() {\r\n\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                if (DataCapture.getQuizByID(currentQuiz).isCompleted) {\r\n                    return \" (Completada)\"\r\n                } else {\r\n                    return \"\"\r\n                }\r\n\r\n            }\r\n            function Check_Errors_number() {\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                return DataCapture.getQuizByID(currentQuiz).errors;\r\n            }\r\n            function Check_Timer_number() {\r\n\r\n                if (DataCapture.getExerciseData().isCompleted) {\r\n                    OnscreenTimer.pause();\r\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds) + \"\\n\" + \"Sección de preguntas finalizada!\"\r\n                } else {\r\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds)\r\n                }\r\n            }\r\n            function formatTime(time) {\r\n                if (time <= 9) {\r\n                    return \"0\" + time;\r\n                } else {\r\n                    return time;\r\n                }\r\n            }\r\n\r\n            var timer_errors_numbers = scene.onBeforeRenderObservable.add(() => {\r\n\r\n\r\n                exercise_quizdisplay.time_number.text = \"Tiempo: \" + Check_Timer_number();\r\n                exercise_quizdisplay.error_number.text = \"Errores: \" + Check_Errors_number();\r\n                exercise_quizdisplay.question_number.text = \"Pregunta: \" + (loaded_exercise_index + 1) + \"/\" + (quizesList.length) + isCompleted_Question_number();\r\n            });\r\n\r\n\r\n\r\n\r\n            // Excercise Manager constructor function\r\n\r\n            function manageStuff() {\r\n\r\n\r\n\r\n                function addExercise(exercise) {\r\n                    exercise_list.push(exercise)\r\n                    quizesList.push(exercise.quiz);\r\n                }\r\n\r\n                function LoadQuiz(number) {\r\n                    exercise_quizdisplay.loadquiz(quizesList[number])\r\n                }\r\n\r\n                function Start(number) {\r\n                    loaded_exercise_index = number;\r\n                    exercise_list[number].Load_Models().then(function (meshes) {\r\n                        ClearStuff();\r\n                        disposable_stuff = meshes;\r\n\r\n                        if (exercise_list[number].Load_Logic) {\r\n\r\n                            exercise_list[number].Load_Logic();\r\n                            LoadQuiz(number);\r\n                            QuizTimer.reset();\r\n                        }\r\n\r\n\r\n\r\n\r\n                    });\r\n                }\r\n\r\n                function Reset() {\r\n\r\n                    Start(loaded_exercise_index);\r\n\r\n\r\n\r\n                }\r\n\r\n                exercise_control.button2.onPointerUpObservable.add(function () {\r\n                    Reset();\r\n                });\r\n\r\n                function ClearStuff() {\r\n\r\n                    exercise_control.clearObservers();\r\n                    exercise_control.clearItems();\r\n                    exercise_datadisplay.clearViewData();\r\n\r\n\r\n                    console.log(\"reseteando\");\r\n                    if (loaded_onBeforeRenderObservables != undefined) {\r\n\r\n                        loaded_onBeforeRenderObservables.forEach(value => {\r\n\r\n                            scene.onBeforeRenderObservable.remove(value);\r\n                        });\r\n\r\n                    }\r\n                    if (disposable_stuff != undefined) {\r\n\r\n                        disposable_stuff.forEach(value => {\r\n\r\n                            if (Array.isArray(value)) {\r\n                                value.forEach(value => value.dispose());\r\n                            } else { value.dispose(); }\r\n                        });\r\n\r\n                        // addSceneModels();\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                var manager = {\r\n                    addExercise,\r\n                    LoadQuiz,\r\n                    Start,\r\n                    Reset,\r\n                    ClearStuff,\r\n                }\r\n\r\n                return manager;\r\n\r\n            }\r\n\r\n\r\n\r\n            var resource_manager = manageStuff();\r\n\r\n\r\n\r\n            var quiz1 = new Exercise.exercise(\r\n                \"1. En el transcurso de 2 segundos un auto de juguete acelera a 3m/s^2. ¿Que velocidad maxima obtuvo?\",\r\n                [\"A) 2 m/s\", \"B) 8m/s\", \"C) 3m/s\", \"D) 6 m/s\"],\r\n                3,\r\n                [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n            var quiz2 = new Exercise.exercise(\r\n                \"2. y si un auto de juguete acelera a 2m/s^2 durante 4 segundos. ¿Que velocidad maxima obtuvo?\",\r\n                [\"A) 6 m/s\", \"B) 8m/s\", \"C) 4m/s\", \"D) 2 m/s\"],\r\n                1,\r\n                [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n            var quiz3 = new Exercise.exercise(\r\n                \"3.en el caso de moverse durante 5 segundos con una aceleracion de 2.5m/s^2 ¿Que velocidad maxima obtuvo?\",\r\n                [\"A) 12.5 m/s\", \"B) 10 m/s\", \"C) 7.5 m/s\", \"D) 5 m/s\"],\r\n                0,\r\n                [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n\r\n\r\n\r\n            async function quiz1_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"greencar.glb\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.2);\r\n                carmesh[0].position.set(-.5, .33, 0);\r\n\r\n\r\n\r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider)\r\n\r\n\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function quiz2_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"policecar.glb\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.2);\r\n                carmesh[0].position.set(-.5, .33, 0);\r\n\r\n\r\n\r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox2\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider)\r\n\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function quiz3_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"bluecar.glb\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.2);\r\n                carmesh[0].position.set(-.5, .33, 0);\r\n\r\n\r\n\r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox3\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider)\r\n\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n\r\n\r\n            function exercise1Logic() {\r\n\r\n\r\n                var carmodel = scene.getMeshByName(\"carBox1\")\r\n\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n                var impulseMagnitude = 5;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n\r\n                var obj_Distance = 1;\r\n                var obj_Time = 1\r\n                var obj_Velocity = 1;\r\n                var obj_Accel = 1\r\n\r\n                var display_Distance = 0;\r\n                var display_Time = 0;\r\n                var display_Velocity = 0;\r\n                var display_Accel = 0\r\n\r\n\r\n\r\n\r\n                var disposable_ghosts = []\r\n                var disposable_lines = []\r\n\r\n                function activate() {\r\n\r\n                    if (disposable_ghosts) {\r\n                        disposable_ghosts.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                        disposable_ghosts = []\r\n\r\n\r\n                    }\r\n\r\n                    if (disposable_lines) {\r\n                        disposable_lines.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                        disposable_lines = []\r\n                    }\r\n                    //fireball(obj_Velocity)\r\n\r\n                    limitTime(carmodel);\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                function limitTime(mesh) {\r\n\r\n\r\n\r\n                    function ghosting(mesh, data) {\r\n\r\n\r\n                        var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                        ghost_sphere.visibility = 0.5;\r\n                        ghost_sphere.position = mesh.position;\r\n                        disposable_stuff.push(ghost_sphere)\r\n                        disposable_ghosts.push(ghost_sphere)\r\n                        section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n\r\n\r\n                        function ghostLine() {\r\n                            if (disposable_ghosts.length > 1) {\r\n                                var past_sphere = disposable_ghosts[disposable_ghosts.length - 2]\r\n                                var actual_sphere = disposable_ghosts[disposable_ghosts.length - 1]\r\n                               \r\n                                var line = new BABYLON.Mesh.CreateLines(\"line\", [past_sphere.getAbsolutePosition(), actual_sphere.getAbsolutePosition()], scene, true);\r\n                                disposable_lines.push(line);\r\n                                disposable_stuff.push(line);\r\n                                section_infodisplay.logicManager.AddDisposableStuff(line)\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                        function ghostData(mesh) {\r\n                            var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                            miniplame.parent = mesh;\r\n                            miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                            miniplame.position.y = 0.7;\r\n                            var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                            var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                            button1.width = 1;\r\n                            button1.height = 1;\r\n                            button1.color = \"white\";\r\n                            button1.fontSize = 50;\r\n                            button1.fontStyle = \"bold\"\r\n                            button1.background = \"#00000066\"\r\n                            button1.textBlock.text = data.display_Velocity.toString() + \" m/s\";\r\n\r\n                            var dataToshow = 1;\r\n\r\n                            button1.onPointerUpObservable.add(function () {\r\n                                switch (dataToshow) {\r\n                                    case 1: dataToshow = 2\r\n                                        button1.textBlock.text = data.display_Time.toString() + \" segs\";\r\n                                        break;\r\n                                    case 2: dataToshow = 3\r\n                                        button1.textBlock.text = data.display_Distance.toString() + \" mts\";\r\n                                        break;\r\n                                    case 3: dataToshow = 1\r\n                                        button1.textBlock.text = data.display_Velocity.toString() + \" m/s\";\r\n                                        break;\r\n\r\n                                    default:\r\n                                        break;\r\n                                }\r\n\r\n\r\n\r\n\r\n                            });\r\n                            advancedTexture.addControl(button1);\r\n\r\n\r\n                            //LOOK TEST WITH QUATERNIONS\r\n\r\n                            var look = function (mesh, pos) {\r\n                                var dv = pos.subtract(mesh.position);\r\n                                var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                            };\r\n\r\n\r\n\r\n                            //scene.registerBeforeRender(function () {\r\n                            //look(miniplame, camera.position);\r\n                            //    })\r\n\r\n\r\n\r\n                        }\r\n\r\n\r\n                        ghostData(ghost_sphere);\r\n                        ghostLine();\r\n\r\n\r\n                    }\r\n\r\n\r\n                    function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                        var tick = 0;\r\n                        var deltaTime = 0\r\n                        var refreshsteps = Math.round((time / refreshRate))\r\n                        var actualstep = 0;\r\n\r\n                        //tick = 1000 milisecs = 1 seg aprox 15 to 20 per frame\r\n                        //timer * 1000 = time to milisecs\r\n                        //aceleration = vel/tiempo alcuadrado\r\n                        // vel(multiplier)\r\n                        //multiplier= CurrentTime/maxTime\r\n                        //tickTimer= tick++\r\n                        var currentTime = 0;\r\n\r\n                        var multiplier = function () {\r\n\r\n                            var value = currentTime / (time * 1000)\r\n\r\n                            return value;\r\n                        }\r\n\r\n                        var transformForce = function (mesh, vec) {\r\n                            var mymatrix = new BABYLON.Matrix();\r\n                            mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                            return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                        };\r\n\r\n                        var accelObs = scene.onBeforeRenderObservable.add(() => {\r\n                            deltaTime = (scene.deltaTime);\r\n\r\n                            currentTime += deltaTime;\r\n\r\n                            if (mesh.physicsImpostor) {\r\n                                // mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(obj_Velocity*multiplier()));\r\n                                mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity * multiplier()))));\r\n                            }\r\n\r\n                            if (currentTime >= time * 1000) {\r\n                                deltaTime = 0;\r\n                                // if(mesh.physicsImpostor){\r\n                                //     mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                //    }\r\n                                scene.onBeforeRenderObservable.remove(accelObs);\r\n                            }\r\n                        })\r\n\r\n\r\n\r\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= refreshRate * 1000) {\r\n\r\n\r\n\r\n                                if (actualstep <= refreshsteps) {\r\n\r\n                                    //code to refresh here\r\n\r\n                                    tick = 0;\r\n\r\n\r\n                                    display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                    display_Distance = (((obj_Accel * (display_Time * display_Time)) / 2)).toFixed(2).toString();\r\n\r\n\r\n                                    display_Velocity = (obj_Velocity * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                    exercise_datadisplay.setViewData\r\n                                        (\r\n                                            \"recorrido: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                            \"v: \" + display_Velocity + \" m/s\" + \"\\n\" +\r\n                                            \"t: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                            \"a: \" + obj_Accel + \" m/s^2\"\r\n                                        )\r\n\r\n                                    var info = { display_Distance, display_Time, display_Velocity }\r\n\r\n                                    ghosting(mesh, info)\r\n\r\n                                    //  if(mesh.physicsImpostor){\r\n                                    //      mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(display_Velocity));\r\n                                    //  }\r\n\r\n\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n                                    actualstep = 0;\r\n                                    tick = 0;\r\n                                    if (mesh.physicsImpostor) {\r\n                                        mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                    }\r\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\r\n                                }\r\n                                actualstep++\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n\r\n                    RefreshDataInMilisecs(obj_Time, 0.25)\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                function CalculateDistance() {\r\n                    //obj_Distance=((obj_Velocity*obj_Time)/2).toFixed(2);\r\n                    obj_Distance = ((obj_Accel * (obj_Time * obj_Time)) / 2).toFixed(2);\r\n\r\n                }\r\n\r\n\r\n                function CalculateFinalVel() {\r\n                    obj_Velocity = (obj_Accel * obj_Time).toFixed(2);\r\n\r\n                }\r\n\r\n\r\n                var CalculateAccel = function (value) {\r\n\r\n                    obj_Accel = Math.floor(value * 10) / 10\r\n                    CalculateFinalVel();\r\n                    CalculateDistance();\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var CalculateVelocidad = function (value) {\r\n\r\n                    obj_Velocity = Math.floor(value * 10) / 10\r\n                    CalculateDistance();\r\n\r\n\r\n\r\n                }\r\n\r\n                var CalculateTime = function (value) {\r\n\r\n                    obj_Time = Math.floor(value * 10) / 10\r\n                    CalculateFinalVel();\r\n                    CalculateDistance();\r\n\r\n                }\r\n\r\n\r\n                var displayFValue = function (value) {\r\n\r\n                    return Math.floor(value * 10) / 10;\r\n\r\n                }\r\n\r\n\r\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n                controlSlider.addSlider(\"Aceleracion\", CalculateAccel, \"m/s^2\", 1, 10, 1, displayFValue);\r\n                controlSlider.addSlider(\"Tiempo\", CalculateTime, \"segs\", 1, 5, 1, displayFValue);\r\n\r\n                exercise_control.controlPanel.addGroup(controlSlider);\r\n                exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    activate();\r\n\r\n                });\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            function exercise2Logic() {\r\n\r\n\r\n\r\n                var carmodel = scene.getMeshByName(\"carBox2\")\r\n\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n                var impulseMagnitude = 5;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n\r\n                var obj_Distance = 1;\r\n                var obj_Time = 1\r\n                var obj_Velocity = 1;\r\n                var obj_Accel = 1\r\n\r\n                var display_Distance = 0;\r\n                var display_Time = 0;\r\n                var display_Velocity = 0;\r\n                var display_Accel = 0\r\n\r\n\r\n\r\n\r\n                var disposable_ghosts = []\r\n                var disposable_lines = []\r\n\r\n                function activate() {\r\n\r\n                    if (disposable_ghosts) {\r\n                        disposable_ghosts.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                        disposable_ghosts = []\r\n\r\n\r\n                    }\r\n\r\n                    if (disposable_lines) {\r\n                        disposable_lines.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                        disposable_lines = []\r\n                    }\r\n                    //fireball(obj_Velocity)\r\n\r\n                    limitTime(carmodel);\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                function limitTime(mesh) {\r\n\r\n\r\n\r\n                    function ghosting(mesh, data) {\r\n\r\n\r\n                        var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                        ghost_sphere.visibility = 0.5;\r\n                        ghost_sphere.position = mesh.position;\r\n                        disposable_stuff.push(ghost_sphere)\r\n                        disposable_ghosts.push(ghost_sphere)\r\n                        section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n\r\n\r\n                        function ghostLine() {\r\n                            if (disposable_ghosts.length > 1) {\r\n                                var past_sphere = disposable_ghosts[disposable_ghosts.length - 2]\r\n                                var actual_sphere = disposable_ghosts[disposable_ghosts.length - 1]\r\n                                \r\n                                var line = new BABYLON.Mesh.CreateLines(\"line\", [past_sphere.getAbsolutePosition(), actual_sphere.getAbsolutePosition()], scene, true);\r\n                                disposable_lines.push(line);\r\n                                disposable_stuff.push(line);\r\n                                section_infodisplay.logicManager.AddDisposableStuff(line)\r\n\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                        function ghostData(mesh) {\r\n                            var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                            miniplame.parent = mesh;\r\n                            miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                            miniplame.position.y = 0.7;\r\n                            var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                            var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                            button1.width = 1;\r\n                            button1.height = 1;\r\n                            button1.color = \"white\";\r\n                            button1.fontSize = 50;\r\n                            button1.fontStyle = \"bold\"\r\n                            button1.background = \"#00000066\"\r\n                            button1.textBlock.text = data.display_Velocity.toString() + \" m/s\";\r\n\r\n                            var dataToshow = 1;\r\n\r\n                            button1.onPointerUpObservable.add(function () {\r\n                                switch (dataToshow) {\r\n                                    case 1: dataToshow = 2\r\n                                        button1.textBlock.text = data.display_Time.toString() + \" segs\";\r\n                                        break;\r\n                                    case 2: dataToshow = 3\r\n                                        button1.textBlock.text = data.display_Distance.toString() + \" mts\";\r\n                                        break;\r\n                                    case 3: dataToshow = 1\r\n                                        button1.textBlock.text = data.display_Velocity.toString() + \" m/s\";\r\n                                        break;\r\n\r\n                                    default:\r\n                                        break;\r\n                                }\r\n\r\n\r\n\r\n\r\n                            });\r\n                            advancedTexture.addControl(button1);\r\n\r\n\r\n                            //LOOK TEST WITH QUATERNIONS\r\n\r\n                            var look = function (mesh, pos) {\r\n                                var dv = pos.subtract(mesh.position);\r\n                                var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                            };\r\n\r\n\r\n\r\n                            //scene.registerBeforeRender(function () {\r\n                            //look(miniplame, camera.position);\r\n                            //    })\r\n\r\n\r\n\r\n                        }\r\n\r\n\r\n                        ghostData(ghost_sphere);\r\n                        ghostLine();\r\n\r\n\r\n                    }\r\n\r\n\r\n                    function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                        var tick = 0;\r\n                        var deltaTime = 0\r\n                        var refreshsteps = Math.round((time / refreshRate))\r\n                        var actualstep = 0;\r\n\r\n                        //tick = 1000 milisecs = 1 seg aprox 15 to 20 per frame\r\n                        //timer * 1000 = time to milisecs\r\n                        //aceleration = vel/tiempo alcuadrado\r\n                        // vel(multiplier)\r\n                        //multiplier= CurrentTime/maxTime\r\n                        //tickTimer= tick++\r\n                        var currentTime = 0;\r\n\r\n                        var multiplier = function () {\r\n\r\n                            var value = currentTime / (time * 1000)\r\n\r\n                            return value;\r\n                        }\r\n\r\n                        var transformForce = function (mesh, vec) {\r\n                            var mymatrix = new BABYLON.Matrix();\r\n                            mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                            return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                        };\r\n\r\n                        var accelObs = scene.onBeforeRenderObservable.add(() => {\r\n                            deltaTime = (scene.deltaTime);\r\n\r\n                            currentTime += deltaTime;\r\n\r\n                            if (mesh.physicsImpostor) {\r\n                                // mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(obj_Velocity*multiplier()));\r\n                                mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity * multiplier()))));\r\n                            }\r\n\r\n                            if (currentTime >= time * 1000) {\r\n                                deltaTime = 0;\r\n                                // if(mesh.physicsImpostor){\r\n                                //     mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                //    }\r\n                                scene.onBeforeRenderObservable.remove(accelObs);\r\n                            }\r\n                        })\r\n\r\n\r\n\r\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= refreshRate * 1000) {\r\n\r\n\r\n\r\n                                if (actualstep <= refreshsteps) {\r\n\r\n                                    //code to refresh here\r\n\r\n                                    tick = 0;\r\n\r\n\r\n                                    display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                    display_Distance = (((obj_Accel * (display_Time * display_Time)) / 2)).toFixed(2).toString();\r\n\r\n\r\n                                    display_Velocity = (obj_Velocity * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                    exercise_datadisplay.setViewData\r\n                                        (\r\n                                            \"recorrido: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                            \"v: \" + display_Velocity + \" m/s\" + \"\\n\" +\r\n                                            \"t: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                            \"a: \" + obj_Accel + \" m/s^2\"\r\n                                        )\r\n\r\n                                    var info = { display_Distance, display_Time, display_Velocity }\r\n\r\n                                    ghosting(mesh, info)\r\n\r\n                                    //  if(mesh.physicsImpostor){\r\n                                    //      mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(display_Velocity));\r\n                                    //  }\r\n\r\n\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n                                    actualstep = 0;\r\n                                    tick = 0;\r\n                                    if (mesh.physicsImpostor) {\r\n                                        mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                    }\r\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\r\n                                }\r\n                                actualstep++\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n\r\n                    RefreshDataInMilisecs(obj_Time, 0.25)\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                function CalculateDistance() {\r\n                    //obj_Distance=((obj_Velocity*obj_Time)/2).toFixed(2);\r\n                    obj_Distance = ((obj_Accel * (obj_Time * obj_Time)) / 2).toFixed(2);\r\n\r\n                }\r\n\r\n\r\n                function CalculateFinalVel() {\r\n                    obj_Velocity = (obj_Accel * obj_Time).toFixed(2);\r\n\r\n                }\r\n\r\n\r\n                var CalculateAccel = function (value) {\r\n\r\n                    obj_Accel = Math.floor(value * 10) / 10\r\n                    CalculateFinalVel();\r\n                    CalculateDistance();\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var CalculateVelocidad = function (value) {\r\n\r\n                    obj_Velocity = Math.floor(value * 10) / 10\r\n                    CalculateDistance();\r\n\r\n\r\n\r\n                }\r\n\r\n                var CalculateTime = function (value) {\r\n\r\n                    obj_Time = Math.floor(value * 10) / 10\r\n                    CalculateFinalVel();\r\n                    CalculateDistance();\r\n\r\n                }\r\n\r\n\r\n                var displayFValue = function (value) {\r\n\r\n                    return Math.floor(value * 10) / 10;\r\n\r\n                }\r\n\r\n\r\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n                controlSlider.addSlider(\"Aceleracion\", CalculateAccel, \"m/s^2\", 1, 10, 1, displayFValue);\r\n                controlSlider.addSlider(\"Tiempo\", CalculateTime, \"segs\", 1, 5, 1, displayFValue);\r\n\r\n                exercise_control.controlPanel.addGroup(controlSlider);\r\n                exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    activate();\r\n\r\n                });\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            function exercise3Logic() {\r\n\r\n\r\n\r\n                var carmodel = scene.getMeshByName(\"carBox3\")\r\n\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n                var impulseMagnitude = 5;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n\r\n                var obj_Distance = 1;\r\n                var obj_Time = 1\r\n                var obj_Velocity = 1;\r\n                var obj_Accel = 1\r\n\r\n                var display_Distance = 0;\r\n                var display_Time = 0;\r\n                var display_Velocity = 0;\r\n                var display_Accel = 0\r\n\r\n\r\n\r\n\r\n                var disposable_ghosts = []\r\n                var disposable_lines = []\r\n\r\n                function activate() {\r\n\r\n                    if (disposable_ghosts) {\r\n                        disposable_ghosts.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                        disposable_ghosts = []\r\n\r\n\r\n                    }\r\n\r\n                    if (disposable_lines) {\r\n                        disposable_lines.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                        disposable_lines = []\r\n                    }\r\n                    //fireball(obj_Velocity)\r\n\r\n                    limitTime(carmodel);\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                function limitTime(mesh) {\r\n\r\n\r\n\r\n                    function ghosting(mesh, data) {\r\n\r\n\r\n                        var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                        ghost_sphere.visibility = 0.5;\r\n                        ghost_sphere.position = mesh.position;\r\n                        disposable_stuff.push(ghost_sphere)\r\n                        disposable_ghosts.push(ghost_sphere)\r\n                        section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n\r\n\r\n\r\n                        function ghostLine() {\r\n                            if (disposable_ghosts.length > 1) {\r\n                                var past_sphere = disposable_ghosts[disposable_ghosts.length - 2]\r\n                                var actual_sphere = disposable_ghosts[disposable_ghosts.length - 1]\r\n                                \r\n                                var line = new BABYLON.Mesh.CreateLines(\"line\", [past_sphere.getAbsolutePosition(), actual_sphere.getAbsolutePosition()], scene, true);\r\n                                disposable_lines.push(line);\r\n                                disposable_stuff.push(line);\r\n                                section_infodisplay.logicManager.AddDisposableStuff(line)\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                        function ghostData(mesh) {\r\n                            var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                            miniplame.parent = mesh;\r\n                            miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                            miniplame.position.y = 0.7;\r\n                            var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                            var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                            button1.width = 1;\r\n                            button1.height = 1;\r\n                            button1.color = \"white\";\r\n                            button1.fontSize = 50;\r\n                            button1.fontStyle = \"bold\"\r\n                            button1.background = \"#00000066\"\r\n                            button1.textBlock.text = data.display_Velocity.toString() + \" m/s\";\r\n\r\n                            var dataToshow = 1;\r\n\r\n                            button1.onPointerUpObservable.add(function () {\r\n                                switch (dataToshow) {\r\n                                    case 1: dataToshow = 2\r\n                                        button1.textBlock.text = data.display_Time.toString() + \" segs\";\r\n                                        break;\r\n                                    case 2: dataToshow = 3\r\n                                        button1.textBlock.text = data.display_Distance.toString() + \" mts\";\r\n                                        break;\r\n                                    case 3: dataToshow = 1\r\n                                        button1.textBlock.text = data.display_Velocity.toString() + \" m/s\";\r\n                                        break;\r\n\r\n                                    default:\r\n                                        break;\r\n                                }\r\n\r\n\r\n\r\n\r\n                            });\r\n                            advancedTexture.addControl(button1);\r\n\r\n\r\n                            //LOOK TEST WITH QUATERNIONS\r\n\r\n                            var look = function (mesh, pos) {\r\n                                var dv = pos.subtract(mesh.position);\r\n                                var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                            };\r\n\r\n\r\n\r\n                            //scene.registerBeforeRender(function () {\r\n                            //look(miniplame, camera.position);\r\n                            //    })\r\n\r\n\r\n\r\n                        }\r\n\r\n\r\n                        ghostData(ghost_sphere);\r\n                        ghostLine();\r\n\r\n\r\n                    }\r\n\r\n\r\n                    function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                        var tick = 0;\r\n                        var deltaTime = 0\r\n                        var refreshsteps = Math.round((time / refreshRate))\r\n                        var actualstep = 0;\r\n\r\n                        //tick = 1000 milisecs = 1 seg aprox 15 to 20 per frame\r\n                        //timer * 1000 = time to milisecs\r\n                        //aceleration = vel/tiempo alcuadrado\r\n                        // vel(multiplier)\r\n                        //multiplier= CurrentTime/maxTime\r\n                        //tickTimer= tick++\r\n                        var currentTime = 0;\r\n\r\n                        var multiplier = function () {\r\n\r\n                            var value = currentTime / (time * 1000)\r\n\r\n                            return value;\r\n                        }\r\n\r\n                        var transformForce = function (mesh, vec) {\r\n                            var mymatrix = new BABYLON.Matrix();\r\n                            mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                            return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                        };\r\n\r\n                        var accelObs = scene.onBeforeRenderObservable.add(() => {\r\n                            deltaTime = (scene.deltaTime);\r\n\r\n                            currentTime += deltaTime;\r\n\r\n                            if (mesh.physicsImpostor) {\r\n                                // mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(obj_Velocity*multiplier()));\r\n                                mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity * multiplier()))));\r\n                            }\r\n\r\n                            if (currentTime >= time * 1000) {\r\n                                deltaTime = 0;\r\n                                // if(mesh.physicsImpostor){\r\n                                //     mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                //    }\r\n                                scene.onBeforeRenderObservable.remove(accelObs);\r\n                            }\r\n                        })\r\n\r\n\r\n\r\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= refreshRate * 1000) {\r\n\r\n\r\n\r\n                                if (actualstep <= refreshsteps) {\r\n\r\n                                    //code to refresh here\r\n\r\n                                    tick = 0;\r\n\r\n\r\n                                    display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                    display_Distance = (((obj_Accel * (display_Time * display_Time)) / 2)).toFixed(2).toString();\r\n\r\n\r\n                                    display_Velocity = (obj_Velocity * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                    exercise_datadisplay.setViewData\r\n                                        (\r\n                                            \"recorrido: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                            \"v: \" + display_Velocity + \" m/s\" + \"\\n\" +\r\n                                            \"t: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                            \"a: \" + obj_Accel + \" m/s^2\"\r\n                                        )\r\n\r\n                                    var info = { display_Distance, display_Time, display_Velocity }\r\n\r\n                                    ghosting(mesh, info)\r\n\r\n                                    //  if(mesh.physicsImpostor){\r\n                                    //      mesh.physicsImpostor.setLinearVelocity(impulseDirection.scale(display_Velocity));\r\n                                    //  }\r\n\r\n\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n                                    actualstep = 0;\r\n                                    tick = 0;\r\n                                    if (mesh.physicsImpostor) {\r\n                                        mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                    }\r\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\r\n                                }\r\n                                actualstep++\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n\r\n                    RefreshDataInMilisecs(obj_Time, 0.25)\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                function CalculateDistance() {\r\n                    //obj_Distance=((obj_Velocity*obj_Time)/2).toFixed(2);\r\n                    obj_Distance = ((obj_Accel * (obj_Time * obj_Time)) / 2).toFixed(2);\r\n\r\n                }\r\n\r\n\r\n                function CalculateFinalVel() {\r\n                    obj_Velocity = (obj_Accel * obj_Time).toFixed(2);\r\n\r\n                }\r\n\r\n\r\n                var CalculateAccel = function (value) {\r\n\r\n                    obj_Accel = Math.floor(value * 10) / 10\r\n                    CalculateFinalVel();\r\n                    CalculateDistance();\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var CalculateVelocidad = function (value) {\r\n\r\n                    obj_Velocity = Math.floor(value * 10) / 10\r\n                    CalculateDistance();\r\n\r\n\r\n\r\n                }\r\n\r\n                var CalculateTime = function (value) {\r\n\r\n                    obj_Time = Math.floor(value * 10) / 10\r\n                    CalculateFinalVel();\r\n                    CalculateDistance();\r\n\r\n                }\r\n\r\n\r\n                var displayFValue = function (value) {\r\n\r\n                    return Math.floor(value * 10) / 10;\r\n\r\n                }\r\n\r\n\r\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n                controlSlider.addSlider(\"Aceleracion\", CalculateAccel, \"m/s^2\", 1, 10, 1, displayFValue);\r\n                controlSlider.addSlider(\"Tiempo\", CalculateTime, \"segs\", 1, 5, 1, displayFValue);\r\n\r\n                exercise_control.controlPanel.addGroup(controlSlider);\r\n                exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    activate();\r\n\r\n                });\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            quiz1.addLogic(exercise1Logic)\r\n            quiz1.addModels(quiz1_models)\r\n\r\n\r\n            quiz2.addLogic(exercise2Logic)\r\n            quiz2.addModels(quiz2_models)\r\n\r\n\r\n\r\n            quiz3.addLogic(exercise3Logic)\r\n            quiz3.addModels(quiz3_models)\r\n\r\n\r\n\r\n            resource_manager.addExercise(quiz1);\r\n            resource_manager.addExercise(quiz2);\r\n            resource_manager.addExercise(quiz3);\r\n\r\n\r\n            resource_manager.Start(loaded_exercise_index)\r\n\r\n        }\r\n\r\n        var loader = new BABYLON.AssetsManager(scene);\r\n\r\n        loader.onFinish = function () {\r\n    \r\n            engine.runRenderLoop(() => {\r\n                if (scene) {\r\n                    window.document.title = engine.getFps().toFixed() + \" fps\";\r\n                    scene.render();\r\n    \r\n                }\r\n            });\r\n        };\r\n    \r\n        scene.executeWhenReady(function () {\r\n    \r\n            engine.hideLoadingUI();\r\n    \r\n            if (document.getElementById(\"xr-button\")) {\r\n                let XRbutton = document.getElementById(\"xr-button\");\r\n    \r\n                XRbutton.addEventListener(\"click\", async function () {\r\n    \r\n                    if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\r\n    \r\n                        xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\r\n                        xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\r\n                        await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\r\n    \r\n                    } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\r\n                        await xr.baseExperience.exitXRAsync()\r\n                    }\r\n                });\r\n    \r\n            }\r\n    \r\n    \r\n            if (document.getElementById(\"fullscreen-button\")) {\r\n                let button = document.getElementById(\"fullscreen-button\")\r\n    \r\n                button.addEventListener(\"click\", async function () {\r\n                    //engine.enterFullScreen(true);\r\n    \r\n                    engine.switchFullscreen(false);\r\n                })\r\n            }\r\n    \r\n        });\r\n    \r\n    \r\n        loader.load();\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth='xl'>\r\n\r\n                {/*<WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />*/}\r\n\r\n\r\n                <Box width=\"100%\" p={1} my={0.5}>\r\n                    <BabylonScene onSceneMount={onSceneMount} />\r\n                </Box>\r\n\r\n\r\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\r\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\r\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\r\n                    </Button>\r\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\r\n                        <Typography variant=\"h6\">pantalla completa</Typography>\r\n                    </Button>\r\n                </Container>\r\n\r\n\r\n\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ExercisePage","export default __webpack_public_path__ + \"static/media/card1.4464c206.PNG\";","export default __webpack_public_path__ + \"static/media/card2.42169476.PNG\";","export default __webpack_public_path__ + \"static/media/card3.2a9e17bc.PNG\";","export default __webpack_public_path__ + \"static/media/card4.c834f31b.PNG\";","export default __webpack_public_path__ + \"static/media/alert2.2455318f.png\";","export default __webpack_public_path__ + \"static/media/cardboard.ca4cc733.png\";","import React, { Component, useRef } from 'react'\r\nimport Main from '../../WebLayout/Main';\r\nimport * as BABYLON from 'babylonjs';\r\nimport BabylonScene from '../../BabylonScene/'; // import the component above linking to file we just created.\r\nimport * as GUI from 'babylonjs-gui';\r\nimport 'babylonjs-loaders';\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box'\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport { Timer } from \"easytimer.js\";\r\n\r\n\r\nimport { Container, Button, duration } from '@material-ui/core';\r\n\r\nimport { useAuth } from '../../Contexts/AuthContext'\r\n\r\n\r\nimport * as Ground from '../../BabylonScene/components/Ground'\r\n\r\nimport * as Exercise from '../../BabylonScene/components/exercise'\r\n\r\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\r\n\r\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\r\n\r\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\r\n\r\n//import WebCam from '../../EmotionRecognition_Components/WebCam'\r\n//import * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\r\n\r\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\r\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\r\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\r\n\r\nimport XRDisplayPlane from '../../FisicARtivo_Components/XRDisplayPlane';\r\n\r\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\r\n\r\nimport card1 from '../exercise_1_4/resources/card1.PNG'\r\nimport card2 from '../exercise_1_4/resources/card2.PNG'\r\nimport card3 from '../exercise_1_4/resources/card3.PNG'\r\nimport card4 from '../exercise_1_4/resources/card4.PNG'\r\nimport alert2 from '../exercise_1_4/resources/alert2.png'\r\nimport cardboard from '../exercise_1_4/resources/cardboard.png'\r\n\r\nclass ExercisePage extends Component {\r\n    render() {\r\n        return (\r\n            <Main data={GetMainContent} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imagebox: {\r\n        //backgroundImage: 'url(' + drawerImage + ')',   \r\n        height: '100%',\r\n        width: '60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    card: {\r\n        height: '100%',\r\n\r\n        flexDirection: 'column',\r\n    },\r\n    media: {\r\n        height: 400,\r\n\r\n    },\r\n    babylonbuttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n\r\n    },\r\n}));\r\n\r\nfunction GetMainContent() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { currentUser } = useAuth();\r\n\r\n    //const webcam = useRef({});\r\n\r\n    var exerciseData = {\r\n        id: 'exercise_1_4',\r\n        generalTime: '00:00',\r\n        totalErrors: 0,\r\n        isCompleted: false,\r\n        quizes: {\r\n            quiz_1: {\r\n                id: 'quiz_1',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_2: {\r\n                id: 'quiz_2',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_3: {\r\n                id: 'quiz_3',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    DataCapture.setCurrentUser(currentUser);\r\n\r\n    DataCapture.setExerciseData(exerciseData);\r\n\r\n    DataCapture.checkUserExerciseData(exerciseData.id);\r\n\r\n    DataCapture.globalTimer.start();\r\n\r\n    //EmotionsAPI.setCurrentUser(currentUser);\r\n\r\n    //EmotionsAPI.loadModels();\r\n\r\n    /*async function takeCapture() {\r\n        webcam.current.takeCapture();\r\n    }\r\n    async function stopCamera() {\r\n        webcam.current.stopCamera();\r\n    }\r\n\r\n    async function startCamera() {\r\n        webcam.current.startCamera();\r\n    }*/\r\n\r\n    var onSceneMount = (e: SceneEventArgs) => {\r\n        const { canvas, scene, engine } = e;\r\n\r\n        engine.displayLoadingUI();\r\n\r\n        const QuizTimer = new Timer();\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\r\n        const camera_initialPos = new BABYLON.Vector3(-4, 1.5, 0);\r\n        const camera_initialTarget = new BABYLON.Vector3(0, 1, 0);\r\n        const camera_speed = 0.7;\r\n        const camera_angularSensibility = 1200;\r\n\r\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(camera_initialTarget);\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, false);\r\n\r\n        camera.speed = camera_speed;\r\n        camera.angularSensibility = camera_angularSensibility;\r\n        camera.inertia = .5;\r\n\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 0.7;\r\n\r\n        // Light\r\n        //const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\r\n        //light.intensity = 0.9;\r\n\r\n        // Skybox\r\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\r\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\r\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n\r\n\r\n\r\n\r\n        // physics\r\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\r\n\r\n        var physicsEngine = scene.getPhysicsEngine();\r\n        //physicsEngine.setSubTimeStep(1);\r\n\r\n\r\n        // Enable Collisions\r\n        scene.collisionsEnabled = true;\r\n\r\n        //Then apply collisions and gravity to the active camera\r\n        camera.checkCollisions = true;\r\n        camera.applyGravity = true;\r\n\r\n        //Set the ellipsoid around the camera (e.g. your player's size)\r\n        camera.ellipsoid = new BABYLON.Vector3(1, .8, 1);\r\n\r\n        var ground = Ground.createPlayGroundGigant(scene);\r\n\r\n\r\n        //var ground= Ground.createPlayGroundLarge(scene);\r\n\r\n        //finally, say which mesh will be collisionable\r\n        ground.checkCollisions = true;\r\n\r\n\r\n        //addSceneModels();\r\n        var xr = {};\r\n\r\n\r\n        async function XRmode() {\r\n\r\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\r\n\r\n            xr = await scene.createDefaultXRExperienceAsync({\r\n\r\n\r\n                disableDefaultUI: true,\r\n                //floorMeshes: [ground],\r\n                uiOptions: {\r\n\r\n                    sessionMode: \"immersive-ar\"\r\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\r\n                    , referenceSpaceType: \"local-floor\"\r\n                },\r\n                inputOptions: { doNotLoadControllerMeshes: false }\r\n            });\r\n\r\n\r\n\r\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\r\n                    // floor is at y === 2\r\n                    camera.y = 2;\r\n                \r\n                });*/\r\n\r\n\r\n\r\n          \r\n\r\n            xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\r\n                    ground.visibility = 0;\r\n                    skybox.isVisible = false;\r\n                    //GUI_controller.createXRGui();\r\n                    //stopCamera();\r\n                    //EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\r\n                    ground.visibility = 1;\r\n                    skybox.isVisible = true;\r\n                    //GUI_controller.createNormalGui();\r\n                    //startCamera();\r\n                    //EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n        }\r\n\r\n        XRmode();\r\n\r\n\r\n\r\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\r\n        gizmoManager.selectMode(0);\r\n\r\n        var pickedMesh = null;\r\n        var attachedMesh = null;\r\n        var pressed = null\r\n\r\n        //observables generales globales para picking meshes\r\n\r\n        scene.onPointerObservable.addOnce(pointerinfo => {\r\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\r\n                QuizTimer.start();\r\n            }\r\n        })\r\n\r\n        scene.onPointerObservable.add((pointerInfo) => {\r\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n\r\n            //if (pointerInfo.type === 4) {\r\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\r\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\r\n            // }\r\n            //}\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n\r\n                    scene.constantlyUpdateMeshUnderPointer = true;\r\n\r\n                    pressed = true;\r\n\r\n                    attachedMesh = pickedMesh;\r\n\r\n                    gizmoManager.attachToMesh(attachedMesh);\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                    attachedMesh = null;\r\n                    gizmoManager.attachToMesh(null);\r\n                }\r\n\r\n            }\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\r\n\r\n                scene.constantlyUpdateMeshUnderPointer = false;\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n\r\n                    // pickedMesh.physicsImpostor.wakeUp();\r\n                    pressed = false;\r\n                    //pickedMesh.physicsImpostor.dispose();\r\n                    //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\r\n\r\n                    pickedMesh = null;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scene.onBeforePhysicsObservable.add(() => {\r\n\r\n            if (pressed && pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\r\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n        scene.registerBeforeRender(() => {\r\n\r\n            /* if(xr) {\r\n                 if(xr.input.controllers.length) {\r\n         \r\n                     const c = xr.input.controllers[0];\r\n                     \r\n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\r\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\r\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\r\n                     laserPointer.position.copyFrom(c.pointer.position);\r\n                    \r\n                     laserPointer.parent = xr.baseExperience.container;\r\n                 }\r\n             }*/\r\n        })\r\n\r\n        //DATA DISPLAY COMPONENTS\r\n\r\n        var info_card1 = new ImageInfoCard(\"card1\", card1);\r\n        var info_card2 = new ImageInfoCard(\"card2\", card2);\r\n        var info_card3 = new ImageInfoCard(\"card3\", card3);\r\n        var info_card4 = new ImageInfoCard(\"card4\", card4);\r\n        var alert_card = new ImageInfoCard('alert', alert2);\r\n        var info_card5 = new ImageInfoCard(\"card5\", cardboard);\r\n\r\n\r\n        info_card1.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            demo_section();\r\n\r\n        })\r\n\r\n\r\n        info_card2.addLogic(() => {\r\n            demo_section();\r\n\r\n        });\r\n\r\n\r\n        info_card3.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            do_test_animation();\r\n            do_test_animation_down();\r\n\r\n        })\r\n\r\n        info_card4.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            demo_section2();\r\n\r\n        })\r\n\r\n        alert_card.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n\r\n        })\r\n\r\n        info_card5.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card5_exercises();\r\n\r\n        })\r\n\r\n\r\n        var section_infodisplay = InfoDisplay(scene, 2);\r\n        //var local_pos = new BABYLON.Vector3(0, 1, 0);\r\n\r\n        //section_infodisplay.displayPlane.position = local_pos; //position sphere relative to world\r\n\r\n        section_infodisplay.addCard(info_card1);\r\n        section_infodisplay.addCard(info_card2);\r\n        section_infodisplay.addCard(info_card3);\r\n        section_infodisplay.addCard(info_card4);\r\n        section_infodisplay.addCard(alert_card);\r\n        section_infodisplay.addCard(info_card5);\r\n\r\n        section_infodisplay.Start(0);\r\n\r\n\r\n\r\n        //declarate initial values \r\n\r\n\r\n        var loaded_exercise_index = 0;\r\n\r\n\r\n        function demo_section() {\r\n\r\n            var defaultmeshes = [];\r\n\r\n            async function load_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var applemodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"colored apple.gltf\", scene));\r\n\r\n                var applemesh = applemodel.meshes;\r\n\r\n                applemesh[0].scaling.scaleInPlace(0.15);\r\n                applemesh[0].position.set(-1.5, 10, 0);\r\n\r\n\r\n\r\n                var apple_collider = BABYLON.MeshBuilder.CreateBox(\"cannon\", { height: applemesh[1].height, width: applemesh[1].width, depth: applemesh[1].depth }, scene);\r\n\r\n                attachToCollider(applemesh, 0, apple_collider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(apple_collider, 90);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(applemesh);\r\n                defaultmeshes.push(apple_collider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(applemesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(apple_collider)\r\n\r\n\r\n            }\r\n\r\n            load_models();\r\n\r\n        }\r\n\r\n        function demo_section2() {\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n            var defaultmeshes = [];\r\n            var disposable_items = []\r\n\r\n\r\n            var obj_Distance = 1;\r\n            var obj_Time = 1;\r\n            var obj_Velocity = 5;\r\n\r\n            var max_time = 0\r\n            var max_height = 0\r\n\r\n            var display_Distance = 0;\r\n            var display_Time = 0;\r\n            var display_Velocity = 0;\r\n\r\n            var ball;\r\n            //var root = new BABYLON.TransformNode(\"root\");\r\n\r\n\r\n            var CoT = new BABYLON.TransformNode(\"base_pos\", scene);\r\n            CoT.position.set(0, 0, 1)\r\n            //var transformscale = CoT.scaling.scaleInPlace(0.2);\r\n\r\n            // CoT.position.y = 1;\r\n            //  CoT.position.x = 0.3;\r\n            //CoT.parent = root; //Definido como componente hijo del cañón\r\n\r\n            var direction_CoT = new BABYLON.TransformNode(\"direction_coT\", scene);\r\n            direction_CoT.position.set(0, 1, -.2)\r\n            direction_CoT.parent = CoT;\r\n\r\n            function activate() {\r\n\r\n                if (disposable_items) {\r\n                    disposable_items.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                }\r\n\r\n                calculateDistance();\r\n                CalculateMaxheightTime();\r\n                CalculateMaxheight();\r\n\r\n                fireball(obj_Velocity)\r\n\r\n\r\n\r\n            }\r\n\r\n            function disposeAll() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n            }\r\n\r\n            function disposeghosts() {\r\n\r\n                if (disposable_items) {\r\n                    disposable_items.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_items = []\r\n\r\n                }\r\n\r\n            }\r\n\r\n            function prepare() {\r\n\r\n                ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 20, diameter: 0.2 }, scene)\r\n                ball.position = CoT.getAbsolutePosition();\r\n\r\n                var material = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                material.diffuseTexture = new BABYLON.Texture(\"../textures/football.jpg\", scene);\r\n                material.diffuseTexture.uScale = 1.2;\r\n                material.diffuseTexture.VScale = 1.2;\r\n                material.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0.5, restitution: 0.3 },\r\n                    scene);\r\n\r\n                ball.material = material;\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(ball);\r\n                defaultmeshes.push(ball);\r\n\r\n            }\r\n\r\n            prepare();\r\n\r\n            function fireball(force) {\r\n\r\n\r\n                var dir = direction_CoT.getAbsolutePosition().subtract(CoT.getAbsolutePosition()); //Impulso inicial en dirección al cubo guía basado en la fuerza indicada en la variable: power\r\n\r\n\r\n                // ball direction with phisics impostor  \r\n\r\n\r\n                //ball.physicsImpostor.applyForce(dir.scale(force),cannontube.getAbsolutePosition());\r\n                //ball.physicsImpostor.applyImpulse(dir.scale(force),cannontube.getAbsolutePosition());\r\n                ball.physicsImpostor.setLinearVelocity(dir.scale(force * 1.37), CoT.getAbsolutePosition());\r\n\r\n\r\n\r\n                //window.setTimeout(function () { if (ball) ghosting(ball)}, 1000);\r\n\r\n                function RefreshGhosting(mesh, time, refreshRate) {\r\n\r\n                    var tick = 0;\r\n                    var refreshsteps = Math.round((time / refreshRate))\r\n                    var ghoststeps = (1 / refreshRate) - 1\r\n                    var actualstep = 0;\r\n\r\n                    function ghosting(mesh, data) {\r\n\r\n\r\n                        var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                        ghost_sphere.visibility = 0.5;\r\n                        ghost_sphere.position = mesh.position;\r\n                        loaded_meshes.push(ghost_sphere)\r\n                        disposable_items.push(ghost_sphere)\r\n                        section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n                        function ghostData(mesh) {\r\n                            var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                            miniplame.parent = mesh;\r\n                            miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                            miniplame.position.y = 0.7;\r\n                            var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                            var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                            button1.width = 1;\r\n                            button1.height = 1;\r\n                            button1.color = \"white\";\r\n                            button1.fontSize = 50;\r\n                            button1.fontStyle = \"bold\"\r\n                            button1.background = \"#00000066\"\r\n                            button1.textBlock.text = data.toString();\r\n\r\n                            button1.onPointerUpObservable.add(function () {\r\n\r\n                            });\r\n                            advancedTexture.addControl(button1);\r\n\r\n\r\n                            //LOOK TEST WITH QUATERNIONS\r\n\r\n                            var look = function (mesh, pos) {\r\n                                var dv = pos.subtract(mesh.position);\r\n                                var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                            };\r\n\r\n\r\n\r\n                        }\r\n\r\n\r\n                        ghostData(ghost_sphere);\r\n\r\n\r\n                    }\r\n\r\n                    var isMoving = false;\r\n                    var done_max_height = false;\r\n                    var done_up_points = false;\r\n                    var done_down_points = false;\r\n                    var fasttick = 0\r\n                    var initialVel = 0\r\n                    var initialPos = 0\r\n\r\n                    function check_initial_velocity(mesh) {\r\n\r\n                        if (mesh.physicsImpostor && initialVel == 0) {\r\n\r\n                            initialVel = mesh.physicsImpostor.getLinearVelocity().y;\r\n                        }\r\n                    }\r\n\r\n                    function check_initial_position(mesh) {\r\n                        if (mesh.physicsImpostor && initialPos == 0) {\r\n\r\n                            initialPos = mesh.position.y;\r\n                        }\r\n                    }\r\n\r\n                    check_initial_velocity(mesh);\r\n                    check_initial_position(mesh);\r\n\r\n                    function check_up_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                        //var refreshsteps= Math.round((1/refreshRate));\r\n                        var actualstep = 0;\r\n                        var tick = 0;\r\n                        //initial vel ejem = 9.8 m/s\r\n                        //reducir 9.8 con el tiempo con pasos\r\n                        //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                        //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n                        function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= 20) {\r\n\r\n                                if (!done_up_points) {\r\n                                    tick = 0;\r\n\r\n                                    if (mesh.physicsImpostor) {\r\n\r\n                                        var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n\r\n                                        if (actualstep + 1 <= refreshsteps) {\r\n                                            var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n                                            var ghost_vel_pos = (initialVel * vel_to_section).toFixed(2);\r\n\r\n                                            //console.log(ballvel +\" vs \"+ghost_vel_pos+ \" velsec \"+vel_to_section )\r\n\r\n\r\n                                            if (ballvel <= ghost_vel_pos) {\r\n\r\n                                                actualstep++;\r\n                                                var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n                                                //console.log(ballvel +\" vs \"+ghost_vel_pos )\r\n                                                //ghosting(mesh,display_Distance+\" mts\");\r\n                                                ghosting(mesh, ghost_vel_pos + \" m/s\");\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n\r\n                                    }\r\n\r\n                                } else {\r\n                                    tick = 0;\r\n                                    done_up_points = true;\r\n                                    scene.onBeforeRenderObservable.remove(tempObs);\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    check_up_points(mesh, refreshRate, ghoststeps);\r\n\r\n                    function check_down_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                        //var refreshsteps= Math.round((1/refreshRate));\r\n                        var actualstep = 0;\r\n                        var tick = 0;\r\n                        //initial vel ejem = 9.8 m/s\r\n                        //reducir 9.8 con el tiempo con pasos\r\n                        //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                        //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n                        function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= 20) {\r\n\r\n                                if (!done_down_points) {\r\n                                    tick = 0;\r\n\r\n                                    if (mesh.physicsImpostor) {\r\n\r\n                                        var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n\r\n                                        if (actualstep + 1 <= refreshsteps) {\r\n                                            var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n                                            var ghost_vel_pos = -(initialVel * vel_to_section).toFixed(2);\r\n\r\n                                            //console.log(ballvel +\" vs \"+ghost_vel_pos+ \" velsec \"+vel_to_section )\r\n\r\n                                            if (done_max_height && ballvel <= ghost_vel_pos) {\r\n\r\n                                                actualstep++;\r\n\r\n                                                //console.log(ballvel +\" vs \"+ghost_vel_pos)                                                        \r\n                                                var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n\r\n                                                //ghosting(mesh,display_Distance+\" mts\")\r\n                                                ghosting(mesh, ghost_vel_pos + \" m/s\")\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n\r\n                                    }\r\n\r\n                                } else {\r\n                                    tick = 0;\r\n                                    done_down_points = true;\r\n                                    scene.onBeforeRenderObservable.remove(tempObs);\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    check_down_points(mesh, refreshRate, ghoststeps);\r\n\r\n                    function check_max_height_point(mesh) {\r\n\r\n                        if (mesh.physicsImpostor) {\r\n\r\n                            var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n                            var ballpos = mesh.position.y;\r\n\r\n\r\n                            if (ballvel > 0) {\r\n                                isMoving = true\r\n                            }\r\n                            if (isMoving && !done_max_height) {\r\n\r\n\r\n                                if (ballvel <= 0.05) {\r\n\r\n\r\n                                    //ghosting(mesh,max_height +\" mts\")\r\n                                    ghosting(mesh, 0.0 + \" m/s\")\r\n\r\n                                    isMoving = false;\r\n                                    done_max_height = true;;\r\n\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    var temporalObsFast = scene.onBeforeRenderObservable.add(() => {\r\n                        fasttick += (scene.deltaTime);\r\n\r\n                        if (fasttick >= 20) {\r\n\r\n\r\n\r\n                            if (!done_max_height) {\r\n\r\n\r\n                                fasttick = 0;\r\n\r\n                                check_max_height_point(ball)\r\n\r\n                                //\r\n\r\n                            } else {\r\n\r\n\r\n                                fasttick = 0;\r\n                                done_max_height = true;\r\n                                scene.onBeforeRenderObservable.remove(temporalObsFast);\r\n                            }\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n\r\n\r\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                        tick += (scene.deltaTime);\r\n\r\n\r\n                        if (tick >= refreshRate * 1000) {\r\n                            actualstep++\r\n\r\n\r\n                            if (actualstep <= refreshsteps) {\r\n\r\n                                tick = 0;\r\n\r\n                                //code to refresh here  \r\n\r\n                                display_Distance = (max_height * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                display_Time = (max_time * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                display_Velocity = obj_Velocity;\r\n\r\n                                //ghosting(mesh,display_Distance);\r\n\r\n                                /*exercise_datadisplay.setViewData\r\n                                    (\r\n\r\n                                        // \"∆t de vuelo: \" +display_Time+\" segs\"+\"\\n\"+\r\n                                        //\"v: \"+display_Velocity+\" m/s\"\r\n                                        \"altura maxima: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                        \"tiempo de subida: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                        \"velocidad: \" + display_Velocity + \" m/s\"\r\n\r\n                                    )*/\r\n\r\n\r\n                                //\r\n\r\n                            } else {\r\n\r\n                                actualstep = 0;\r\n                                tick = 0;\r\n\r\n                                scene.onBeforeRenderObservable.remove(temporalObs);\r\n                            }\r\n\r\n                        }\r\n\r\n                    });\r\n\r\n\r\n\r\n                }\r\n\r\n                RefreshGhosting(ball, max_time, 0.25)\r\n\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            function CalculateMaxheightTime() {\r\n                max_time = (obj_Velocity / 9.81).toFixed(2);\r\n                //max_time= (max_height*(2/(obj_Velocity))).toFixed(2);\r\n            }\r\n\r\n\r\n            function CalculateMaxheight() {\r\n                //max_height = ((obj_Velocity/2)*max_time).toFixed(2);\r\n                max_height = (obj_Velocity * max_time - ((9.81 * (max_time * max_time)) / 2)).toFixed(2);\r\n            }\r\n\r\n\r\n            function calculateDistance() {\r\n                obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\r\n\r\n            }\r\n\r\n\r\n            var button = GUI.Button.CreateImageOnlyButton(\"but\", \"images/pressme.png\")\r\n            button.color = \"transparent\"\r\n\r\n            var test = new XRDisplayPlane(.5, .33, true, true, scene);\r\n\r\n            test.setScaleToInPixels(300, 160)\r\n            test.displayPlane.position.set(0, .5, 1);\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(test.displayPlane);\r\n\r\n            var switchmode = 1;\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        activate();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeghosts();\r\n                        disposeAll();\r\n                        prepare();\r\n                        disposeghosts();\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n            test.addControl(button);\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        function demo_section2_alt() {\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n            var defaultmeshes = [];\r\n            var disposable_items = []\r\n\r\n\r\n\r\n            async function load_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var applemodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"colored apple.gltf\", scene));\r\n\r\n                var applemesh = applemodel.meshes;\r\n\r\n                applemesh[0].scaling.scaleInPlace(0.15);\r\n                applemesh[0].position.set(-1.5, 10, 0);\r\n\r\n\r\n\r\n                var apple_collider = BABYLON.MeshBuilder.CreateBox(\"cannon\", { height: applemesh[1].height, width: applemesh[1].width, depth: applemesh[1].depth }, scene);\r\n\r\n                attachToCollider(applemesh, 0, apple_collider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(apple_collider, 90);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(applemesh);\r\n                defaultmeshes.push(apple_collider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(applemesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(apple_collider)\r\n\r\n\r\n            }\r\n\r\n            load_models();\r\n\r\n            async function prepare() {\r\n\r\n                load_models().then(() => {\r\n\r\n                    var cannontube = scene.getMeshByName(\"cannon\");\r\n                })\r\n\r\n\r\n            }\r\n\r\n\r\n            var obj_Distance = 1;\r\n            var obj_Time = 1;\r\n            var obj_Velocity = 10;\r\n\r\n            var max_time = 0\r\n            var max_height = 0\r\n\r\n            var display_Distance = 0;\r\n            var display_Time = 0;\r\n            var display_Velocity = 0;\r\n\r\n            //var root = new BABYLON.TransformNode(\"root\");\r\n\r\n\r\n            var CoT_up = new BABYLON.TransformNode(\"base_pos\", scene);\r\n            CoT_up.position.set(0, 1, -1)\r\n            //var transformscale = CoT.scaling.scaleInPlace(0.2);\r\n\r\n\r\n            // CoT.position.y = 1;\r\n            //  CoT.position.x = 0.3;\r\n            //CoT.parent = root; //Definido como componente hijo del cañón\r\n\r\n            var direction_CoT_up = new BABYLON.TransformNode(\"direction_coT\", scene);\r\n            direction_CoT_up.position.set(0, 1, 0)\r\n            direction_CoT_up.parent = CoT_up;\r\n\r\n\r\n\r\n            var CoT_down = new BABYLON.TransformNode(\"base_pos\", scene);\r\n            CoT_down.position.set(1, 10, 1)\r\n            //var transformscale = CoT.scaling.scaleInPlace(0.2);\r\n\r\n\r\n            // CoT.position.y = 1;\r\n            //  CoT.position.x = 0.3;\r\n            //CoT.parent = root; //Definido como componente hijo del cañón\r\n\r\n            var direction_CoT_down = new BABYLON.TransformNode(\"direction_coT\", scene);\r\n            direction_CoT_down.position.set(0, -1, 0)\r\n            direction_CoT_down.parent = CoT_up;\r\n\r\n\r\n            function activate() {\r\n\r\n                if (disposable_items) {\r\n                    disposable_items.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                }\r\n\r\n                calculateDistance();\r\n                CalculateMaxheightTime();\r\n                CalculateMaxheight();\r\n\r\n                //fireball_up(obj_Velocity)\r\n\r\n                //fireball_down(obj_Velocity)\r\n\r\n                create_up_ball()\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            function create_up_ball() {\r\n\r\n                var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 6, diameter: 0.2 }, scene)\r\n                ball.position = CoT_up.getAbsolutePosition();\r\n\r\n                var dir = direction_CoT_up.getAbsolutePosition().subtract(CoT_up.getAbsolutePosition()); //Impulso inicial en dirección al cubo guía basado en la fuerza indicada en la variable: power\r\n\r\n                ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: .1, friction: 0.5, restitution: 0.3 },\r\n                    scene);\r\n\r\n\r\n\r\n                var refreshrate = 1\r\n\r\n                var obj_Distance = 15;\r\n                var obj_Time = 3;\r\n                var obj_Velocity = 1;\r\n\r\n                var display_Distance = 0;\r\n                var display_Time = 0;\r\n                var display_Velocity = 0;\r\n\r\n\r\n                var vel_steps = [3, 2, 1, 0]\r\n                var vel_stamps = [30, 20, 10, 0]\r\n\r\n                var startpos = new BABYLON.Vector3(0, 0, 0)\r\n                var endpos = new BABYLON.Vector3(0, 20, 0)\r\n\r\n                function animation() {\r\n\r\n                    var animate = new BABYLON.Animation.CreateAndStartAnimation(\"anim\", ball, \"position\", 30, 100, startpos, endpos, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n                }\r\n\r\n\r\n                function activate() {\r\n\r\n                    ControlBallInMilisecs(obj_Time, refreshrate, ball)\r\n                }\r\n\r\n\r\n\r\n                function ControlBallInMilisecs(time, refreshRate, mesh) {\r\n\r\n                    var tick = 0;\r\n                    var refreshsteps = Math.round((time / refreshRate))\r\n                    var actualstep = 0;\r\n\r\n\r\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                        tick += (scene.deltaTime);\r\n\r\n                        if (tick >= refreshRate * 1000) {\r\n\r\n\r\n                            if (actualstep <= refreshsteps) {\r\n\r\n                                //code to refresh here\r\n\r\n                                tick = 0;\r\n\r\n                                display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\r\n\r\n                                if (!actualstep >= vel_steps.length) {\r\n                                    obj_Velocity = vel_steps[actualstep]\r\n                                    display_Velocity = vel_stamps[actualstep]\r\n\r\n                                }\r\n\r\n\r\n                                var info = { display_Distance, display_Time, display_Velocity }\r\n\r\n                                ghosting(mesh, info)\r\n\r\n                                if (mesh.physicsImpostor) {\r\n\r\n                                    ball.physicsImpostor.setLinearVelocity(dir.scale(obj_Velocity * 1.37), CoT_up.getAbsolutePosition());\r\n\r\n                                }\r\n\r\n\r\n\r\n                            } else {\r\n\r\n                                actualstep = 0;\r\n                                tick = 0;\r\n                                if (mesh.physicsImpostor) {\r\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                                }\r\n                                scene.onBeforeRenderObservable.remove(temporalObs);\r\n                            }\r\n                            actualstep++\r\n\r\n                        }\r\n\r\n                    });\r\n\r\n                    loaded_onBeforeRenderObservables.push(temporalObs);\r\n\r\n                }\r\n\r\n\r\n\r\n                function ghosting(mesh, data) {\r\n\r\n\r\n                    var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                    ghost_sphere.visibility = 0.5;\r\n                    ghost_sphere.position = mesh.position;\r\n                    loaded_meshes.push(ghost_sphere)\r\n                    disposable_items.push(ghost_sphere)\r\n                    section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n                    function ghostData(mesh) {\r\n                        var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.4, width: 1 });\r\n                        miniplame.parent = mesh;\r\n                        miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                        miniplame.position.y = 0.7;\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                        var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 50;\r\n                        button1.background = \"green\";\r\n                        button1.textBlock.text = data.display_Velocity.toString(); //<= checa esto\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n\r\n\r\n                        //LOOK TEST WITH QUATERNIONS\r\n\r\n                        var look = function (mesh, pos) {\r\n                            var dv = pos.subtract(mesh.position);\r\n                            var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                            mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                        };\r\n\r\n\r\n                        //scene.registerBeforeRender(function () {\r\n                        //look(miniplame, camera.position);\r\n                        //    })\r\n\r\n\r\n                    }\r\n\r\n\r\n                    ghostData(ghost_sphere);\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            function disposeAll() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n            }\r\n\r\n            function disposeghosts() {\r\n\r\n                if (disposable_items) {\r\n                    disposable_items.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_items = []\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n            function CalculateMaxheightTime() {\r\n                max_time = (obj_Velocity / 9.81).toFixed(2);\r\n                //max_time= (max_height*(2/(obj_Velocity))).toFixed(2);\r\n            }\r\n\r\n\r\n            function CalculateMaxheight() {\r\n                //max_height = ((obj_Velocity/2)*max_time).toFixed(2);\r\n                max_height = (obj_Velocity * max_time - ((9.81 * (max_time * max_time)) / 2)).toFixed(2);\r\n            }\r\n\r\n\r\n            function calculateDistance() {\r\n                obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\r\n\r\n            }\r\n\r\n\r\n            function fireball_up(force) {\r\n\r\n                var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 6, diameter: 0.2 }, scene)\r\n                ball.position = CoT_up.getAbsolutePosition();\r\n\r\n                var dir = direction_CoT_up.getAbsolutePosition().subtract(CoT_up.getAbsolutePosition()); //Impulso inicial en dirección al cubo guía basado en la fuerza indicada en la variable: power\r\n\r\n                ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0.5, restitution: 0.3 },\r\n                    scene);\r\n\r\n                // ball direction with phisics impostor  \r\n\r\n\r\n                //ball.physicsImpostor.applyForce(dir.scale(force),cannontube.getAbsolutePosition());\r\n                //ball.physicsImpostor.applyImpulse(dir.scale(force),cannontube.getAbsolutePosition());\r\n                ball.physicsImpostor.setLinearVelocity(dir.scale(force * 1.37), CoT_up.getAbsolutePosition());\r\n\r\n                window.setTimeout(function () { if (ball) ball.dispose(); }, 5000);\r\n\r\n                //window.setTimeout(function () { if (ball) ghosting(ball)}, 1000);\r\n\r\n                function RefreshGhosting(mesh, time, refreshRate) {\r\n\r\n                    var tick = 0;\r\n                    var refreshsteps = Math.round((time / refreshRate))\r\n                    var ghoststeps = (1 / refreshRate) - 1\r\n                    var actualstep = 0;\r\n\r\n                    function ghosting(mesh, data) {\r\n\r\n\r\n                        var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                        ghost_sphere.visibility = 0.5;\r\n                        ghost_sphere.position = mesh.position;\r\n                        loaded_meshes.push(ghost_sphere)\r\n                        disposable_items.push(ghost_sphere)\r\n                        section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n                        function ghostData(mesh) {\r\n                            var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.4, width: 1 });\r\n                            miniplame.parent = mesh;\r\n                            miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                            miniplame.position.y = 0.7;\r\n                            var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                            var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                            button1.width = 1;\r\n                            button1.height = 1;\r\n                            button1.color = \"white\";\r\n                            button1.fontSize = 50;\r\n                            button1.background = \"green\";\r\n                            button1.textBlock.text = data.toString();\r\n\r\n                            button1.onPointerUpObservable.add(function () {\r\n\r\n                            });\r\n                            advancedTexture.addControl(button1);\r\n\r\n\r\n                            //LOOK TEST WITH QUATERNIONS\r\n\r\n                            var look = function (mesh, pos) {\r\n                                var dv = pos.subtract(mesh.position);\r\n                                var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                            };\r\n\r\n\r\n                            //scene.registerBeforeRender(function () {\r\n                            //look(miniplame, camera.position);\r\n                            //    })\r\n\r\n\r\n                        }\r\n\r\n\r\n                        ghostData(ghost_sphere);\r\n\r\n\r\n                    }\r\n\r\n                    var isMoving = false;\r\n                    var done_max_height = false;\r\n                    var done_up_points = false;\r\n                    var done_down_points = false;\r\n                    var fasttick = 0\r\n                    var initialVel = 0\r\n                    var initialPos = 0\r\n\r\n                    function check_initial_velocity(mesh) {\r\n\r\n                        if (mesh.physicsImpostor && initialVel == 0) {\r\n\r\n                            initialVel = mesh.physicsImpostor.getLinearVelocity().y;\r\n                        }\r\n                    }\r\n\r\n                    function check_initial_position(mesh) {\r\n                        if (mesh.physicsImpostor && initialPos == 0) {\r\n\r\n                            initialPos = mesh.position.y;\r\n                        }\r\n                    }\r\n\r\n                    check_initial_velocity(mesh);\r\n                    check_initial_position(mesh);\r\n\r\n                    function check_up_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                        //var refreshsteps= Math.round((1/refreshRate));\r\n                        var actualstep = 0;\r\n                        var tick = 0;\r\n                        //initial vel ejem = 9.8 m/s\r\n                        //reducir 9.8 con el tiempo con pasos\r\n                        //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                        //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n                        function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= 20) {\r\n\r\n                                if (!done_up_points) {\r\n                                    tick = 0;\r\n\r\n                                    if (mesh.physicsImpostor) {\r\n\r\n                                        var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n\r\n                                        if (actualstep + 1 <= refreshsteps) {\r\n                                            var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n                                            var ghost_vel_pos = (initialVel * vel_to_section).toFixed(2);\r\n\r\n                                            //console.log(ballvel +\" vs \"+ghost_vel_pos+ \" velsec \"+vel_to_section )\r\n\r\n\r\n                                            if (ballvel <= ghost_vel_pos) {\r\n\r\n                                                actualstep++;\r\n                                                var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n                                                //console.log(ballvel +\" vs \"+ghost_vel_pos )\r\n                                                //ghosting(mesh,display_Distance+\" mts\");\r\n                                                ghosting(mesh, ghost_vel_pos + \" m/s\");\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n\r\n                                    }\r\n\r\n                                } else {\r\n                                    tick = 0;\r\n                                    done_up_points = true;\r\n                                    scene.onBeforeRenderObservable.remove(tempObs);\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    check_up_points(mesh, refreshRate, ghoststeps);\r\n\r\n                    function check_down_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                        //var refreshsteps= Math.round((1/refreshRate));\r\n                        var actualstep = 0;\r\n                        var tick = 0;\r\n                        //initial vel ejem = 9.8 m/s\r\n                        //reducir 9.8 con el tiempo con pasos\r\n                        //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                        //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n                        function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= 20) {\r\n\r\n                                if (!done_down_points) {\r\n                                    tick = 0;\r\n\r\n                                    if (mesh.physicsImpostor) {\r\n\r\n                                        var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n\r\n                                        if (actualstep + 1 <= refreshsteps) {\r\n                                            var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n                                            var ghost_vel_pos = -(initialVel * vel_to_section).toFixed(2);\r\n\r\n                                            //console.log(ballvel +\" vs \"+ghost_vel_pos+ \" velsec \"+vel_to_section )\r\n\r\n                                            if (done_max_height && ballvel <= ghost_vel_pos) {\r\n\r\n                                                actualstep++;\r\n\r\n                                                //console.log(ballvel +\" vs \"+ghost_vel_pos)                                                        \r\n                                                var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n\r\n                                                //ghosting(mesh,display_Distance+\" mts\")\r\n                                                //ghosting(mesh, ghost_vel_pos + \" m/s\")\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n\r\n                                    }\r\n\r\n                                } else {\r\n                                    tick = 0;\r\n                                    done_down_points = true;\r\n                                    scene.onBeforeRenderObservable.remove(tempObs);\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    check_down_points(mesh, refreshRate, ghoststeps);\r\n\r\n                    function check_max_height_point(mesh) {\r\n\r\n                        if (mesh.physicsImpostor) {\r\n\r\n                            var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n                            var ballpos = mesh.position.y;\r\n\r\n\r\n                            if (ballvel > 0) {\r\n                                isMoving = true\r\n                            }\r\n                            if (isMoving && !done_max_height) {\r\n\r\n\r\n                                if (ballvel <= 0.05) {\r\n\r\n\r\n                                    //ghosting(mesh,max_height +\" mts\")\r\n                                    ghosting(mesh, 0.0 + \" m/s\")\r\n\r\n                                    isMoving = false;\r\n                                    done_max_height = true;;\r\n\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    var temporalObsFast = scene.onBeforeRenderObservable.add(() => {\r\n                        fasttick += (scene.deltaTime);\r\n\r\n                        if (fasttick >= 20) {\r\n\r\n\r\n\r\n                            if (!done_max_height) {\r\n\r\n\r\n                                fasttick = 0;\r\n\r\n                                check_max_height_point(ball)\r\n\r\n                                //\r\n\r\n                            } else {\r\n\r\n\r\n                                fasttick = 0;\r\n                                done_max_height = true;\r\n                                scene.onBeforeRenderObservable.remove(temporalObsFast);\r\n                            }\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n\r\n\r\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                        tick += (scene.deltaTime);\r\n\r\n\r\n                        if (tick >= refreshRate * 1000) {\r\n                            actualstep++\r\n\r\n\r\n                            if (actualstep <= refreshsteps) {\r\n\r\n                                tick = 0;\r\n\r\n                                //code to refresh here  \r\n\r\n                                display_Distance = (max_height * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                display_Time = (max_time * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                display_Velocity = obj_Velocity;\r\n\r\n                                //ghosting(mesh,display_Distance);\r\n\r\n                                /*exercise_datadisplay.setViewData\r\n                                    (\r\n\r\n                                        // \"∆t de vuelo: \" +display_Time+\" segs\"+\"\\n\"+\r\n                                        //\"v: \"+display_Velocity+\" m/s\"\r\n                                        \"altura maxima: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                        \"tiempo de subida: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                        \"velocidad: \" + display_Velocity + \" m/s\"\r\n\r\n                                    )*/\r\n\r\n\r\n                                //\r\n\r\n                            } else {\r\n\r\n                                actualstep = 0;\r\n                                tick = 0;\r\n\r\n                                scene.onBeforeRenderObservable.remove(temporalObs);\r\n                            }\r\n\r\n                        }\r\n\r\n                    });\r\n\r\n\r\n\r\n                }\r\n\r\n                RefreshGhosting(ball, max_time, 0.25)\r\n\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            function fireball_down(force) {\r\n\r\n                var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 6, diameter: 0.2 }, scene)\r\n                ball.position = CoT_down.getAbsolutePosition();\r\n\r\n                var dir = direction_CoT_down.getAbsolutePosition().subtract(CoT_down.getAbsolutePosition()); //Impulso inicial en dirección al cubo guía basado en la fuerza indicada en la variable: power\r\n\r\n                ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0.5, restitution: 0.3 },\r\n                    scene);\r\n\r\n                // ball direction with phisics impostor  \r\n\r\n\r\n                //ball.physicsImpostor.applyForce(dir.scale(force),cannontube.getAbsolutePosition());\r\n                //ball.physicsImpostor.applyImpulse(dir.scale(force),cannontube.getAbsolutePosition());\r\n                //ball.physicsImpostor.setLinearVelocity(dir.scale(force * 1.37), CoT_down.getAbsolutePosition());\r\n\r\n                window.setTimeout(function () { if (ball) ball.dispose(); }, 5000);\r\n\r\n                //window.setTimeout(function () { if (ball) ghosting(ball)}, 1000);\r\n\r\n                function RefreshGhosting(mesh, time, refreshRate) {\r\n\r\n                    var tick = 0;\r\n                    var refreshsteps = Math.round((time / refreshRate))\r\n                    var ghoststeps = (1 / refreshRate) - 1\r\n                    var actualstep = 0;\r\n\r\n                    function ghosting(mesh, data) {\r\n\r\n\r\n                        var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                        ghost_sphere.visibility = 0.5;\r\n                        ghost_sphere.position = mesh.position;\r\n                        loaded_meshes.push(ghost_sphere)\r\n                        disposable_items.push(ghost_sphere)\r\n                        section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n                        function ghostData(mesh) {\r\n                            var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.4, width: 1 });\r\n                            miniplame.parent = mesh;\r\n                            miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                            miniplame.position.y = 0.7;\r\n                            var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                            var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                            button1.width = 1;\r\n                            button1.height = 1;\r\n                            button1.color = \"white\";\r\n                            button1.fontSize = 50;\r\n                            button1.background = \"green\";\r\n                            button1.textBlock.text = data.toString();\r\n\r\n                            button1.onPointerUpObservable.add(function () {\r\n\r\n                            });\r\n                            advancedTexture.addControl(button1);\r\n\r\n\r\n                            //LOOK TEST WITH QUATERNIONS\r\n\r\n                            var look = function (mesh, pos) {\r\n                                var dv = pos.subtract(mesh.position);\r\n                                var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                            };\r\n\r\n\r\n                            //scene.registerBeforeRender(function () {\r\n                            //look(miniplame, camera.position);\r\n                            //    })\r\n\r\n\r\n                        }\r\n\r\n\r\n                        ghostData(ghost_sphere);\r\n\r\n\r\n                    }\r\n\r\n                    var isMoving = false;\r\n                    var done_max_height = true;\r\n                    var done_up_points = false;\r\n                    var done_down_points = false;\r\n                    var fasttick = 0\r\n                    var initialVel = 0\r\n                    var initialPos = 0\r\n\r\n                    function check_initial_velocity(mesh) {\r\n\r\n                        if (mesh.physicsImpostor && initialVel == 0) {\r\n\r\n                            initialVel = mesh.physicsImpostor.getLinearVelocity().y;\r\n                        }\r\n                    }\r\n\r\n                    function check_initial_position(mesh) {\r\n                        if (mesh.physicsImpostor && initialPos == 0) {\r\n\r\n                            initialPos = mesh.position.y;\r\n                        }\r\n                    }\r\n\r\n                    check_initial_velocity(mesh);\r\n                    check_initial_position(mesh);\r\n\r\n\r\n\r\n                    function check_down_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                        //var refreshsteps= Math.round((1/refreshRate));\r\n                        var actualstep = 0;\r\n                        var tick = 0;\r\n                        //initial vel ejem = 9.8 m/s\r\n                        //reducir 9.8 con el tiempo con pasos\r\n                        //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                        //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n                        function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                            var result = (1 - refreshRate * actualstep);\r\n\r\n                            if (result > 1) {\r\n                                return 1;\r\n                            } else {\r\n                                return result;\r\n                            }\r\n\r\n                        }\r\n\r\n                        var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= 20) {\r\n\r\n                                if (!done_down_points) {\r\n                                    tick = 0;\r\n\r\n                                    if (mesh.physicsImpostor) {\r\n\r\n                                        var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n\r\n                                        if (actualstep + 1 <= refreshsteps) {\r\n                                            var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n                                            var ghost_vel_pos = -(initialVel * vel_to_section).toFixed(2);\r\n\r\n                                            //console.log(ballvel +\" vs \"+ghost_vel_pos+ \" velsec \"+vel_to_section )\r\n\r\n                                            if (done_max_height && ballvel <= ghost_vel_pos) {\r\n\r\n                                                actualstep++;\r\n\r\n                                                //console.log(ballvel +\" vs \"+ghost_vel_pos)                                                        \r\n                                                var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n\r\n                                                //ghosting(mesh,display_Distance+\" mts\")\r\n                                                ghosting(mesh, ghost_vel_pos + \" m/s\")\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n\r\n                                    }\r\n\r\n                                } else {\r\n                                    tick = 0;\r\n                                    done_down_points = true;\r\n                                    scene.onBeforeRenderObservable.remove(tempObs);\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    check_down_points(mesh, refreshRate, ghoststeps);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                RefreshGhosting(ball, max_time, 0.25)\r\n\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            var button = GUI.Button.CreateSimpleButton(\"but\", \"Presiona para ver animación\");\r\n\r\n            var test = new XRDisplayPlane(.5, .33, true, true, scene);\r\n\r\n            test.setScaleToInPixels(150, 80)\r\n            test.displayPlane.position.set(0, 1.7, 1);\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(test.displayPlane);\r\n\r\n            var switchmode = 1;\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        activate();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeghosts();\r\n                        disposeAll();\r\n                        prepare();\r\n                        disposeghosts();\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n            test.addControl(button);\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        function do_test_animation() {\r\n\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n            var defaultmeshes = [];\r\n            var disposable_items = []\r\n\r\n\r\n            var loaded_meshes = []\r\n            var disposable_ghosts = []\r\n            var disposable_clones = []\r\n            var disposable_lines = []\r\n            var disposable_panels = []\r\n            var loaded_onBeforeRenderObservables = []\r\n            var defaultmeshes = [];\r\n\r\n            var to_clone_model;\r\n            var mesh;\r\n            var frameRate = 10;\r\n\r\n\r\n\r\n            async function load_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var applemodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"colored apple.gltf\", scene));\r\n\r\n                var applemesh = applemodel.meshes;\r\n\r\n                applemesh[0].scaling.scaleInPlace(0.15);\r\n                applemesh[0].position.set(-.25, 10, -.2);\r\n\r\n\r\n\r\n                var apple_collider = BABYLON.MeshBuilder.CreateBox(\"apple_collider\", { height: applemesh[1].height, width: applemesh[1].width, depth: applemesh[1].depth }, scene);\r\n\r\n                attachToCollider(applemesh, 0, apple_collider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(apple_collider, 90);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(applemesh);\r\n                defaultmeshes.push(apple_collider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(applemesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(apple_collider)\r\n\r\n\r\n                //apple_collider.getAbsolutePosition().addInPlace(new BABYLON.Vector3(0,1,0))\r\n\r\n            }\r\n\r\n            async function prepare() {\r\n\r\n                load_models().then(() => {\r\n\r\n                    mesh = scene.getMeshByName(\"apple_collider\");\r\n\r\n\r\n                });\r\n\r\n\r\n            }\r\n\r\n\r\n            prepare();\r\n\r\n\r\n            function ghosting(mesh, data) {\r\n\r\n\r\n                to_clone_model = defaultmeshes[0];\r\n                var ghost_clone = to_clone_model[0].clone(\"bModel\");\r\n                ghost_clone.setParent(null)\r\n                //var ghost_sphere = ghost_model[0].createInstance(\"bModel\")\r\n\r\n                for (var child of ghost_clone.getChildMeshes()) {\r\n                    child.material = new BABYLON.StandardMaterial(\"mat\");\r\n                    child.material.alpha = 0.25;\r\n                    //child.material.diffuseTexture = new BABYLON.Texture(\"textures/speckles.jpg\");\r\n                }\r\n\r\n\r\n                ghost_clone.setAbsolutePosition(mesh.position);\r\n                ghost_clone.position.y -= 0.1\r\n\r\n\r\n                var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 12, diameter: .05 }, scene);\r\n                var material = new BABYLON.StandardMaterial(\"mat\");\r\n                material.diffuseColor = new BABYLON.Color4(0, 1, 0, 1)\r\n                //ghost_sphere.visibility = 1;\r\n                ghost_sphere.material = material;\r\n\r\n\r\n\r\n                ghost_sphere.setAbsolutePosition(mesh.position);\r\n                //ghost_sphere.position.set(mesh.position);\r\n\r\n\r\n                disposable_clones.push(ghost_clone)\r\n                disposable_ghosts.push(ghost_sphere)\r\n                section_infodisplay.logicManager.AddDisposableStuff(ghost_clone);\r\n                section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere);\r\n\r\n\r\n\r\n                function applyLine() {\r\n                    if (disposable_ghosts.length > 1) {\r\n                        var past_ghost = disposable_ghosts[disposable_ghosts.length - 2]\r\n                        var actual_ghost = disposable_ghosts[disposable_ghosts.length - 1]\r\n                       \r\n                        var line = new BABYLON.Mesh.CreateLines(\"line\", [past_ghost.getAbsolutePosition(), actual_ghost.getAbsolutePosition()], scene, true);\r\n                        disposable_lines.push(line);\r\n                        section_infodisplay.logicManager.AddDisposableStuff(line);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                function applyDataPanel(mesh) {\r\n\r\n                    var miniplane = BABYLON.MeshBuilder.CreatePlane(\"planes\", { height: .2, width: .5 }, scene);\r\n                    miniplane.setAbsolutePosition(mesh.position)\r\n                    miniplane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                    miniplane.position.x -= .5;\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplane, 400, 160);\r\n\r\n                    section_infodisplay.logicManager.AddTemporalGUI(miniplane)\r\n                    disposable_panels.push(miniplane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 50;\r\n                    button1.fontStyle = \"bold\"\r\n                    button1.background = \"#00000066\"\r\n                    button1.textBlock.text = \"Velocidad: \" + '\\n' + data.obj_Velocity.toString() + \" m/s\";\r\n\r\n                    var dataToshow = 1;\r\n\r\n                    button1.onPointerUpObservable.add(function () {\r\n                        switch (dataToshow) {\r\n                            case 1: dataToshow = 3\r\n                                button1.textBlock.text = \"Tiempo: \" + '\\n' + data.obj_Time.toString() + \" segs\";\r\n                                break;\r\n                            case 2: dataToshow = 3\r\n                                // button1.textBlock.text = \"Distancia: \" + '\\n' + data.obj_Distance.toString() + \" mts\";\r\n                                break;\r\n                            case 3: dataToshow = 1\r\n                                button1.textBlock.text = \"Velocidad: \" + '\\n' + data.obj_Velocity.toString() + \" m/s\";\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n\r\n\r\n                    //LOOK TEST WITH QUATERNIONS\r\n\r\n                    var look = function (mesh, pos) {\r\n                        var dv = pos.subtract(mesh.position);\r\n                        var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                        mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                    };\r\n\r\n                }\r\n\r\n\r\n                applyDataPanel(ghost_sphere);\r\n                applyLine();\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            function animation(mesh, onEnd, scene) {\r\n\r\n                var frameRate = 60; // <= X FRANES = 1 SEC\r\n\r\n                const ySlide = new BABYLON.Animation(\"ySlide\", \"position\", frameRate, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n                const keyFrames = [];\r\n\r\n                var duration = 25 // <= TOTAL LENGHT OF ANIMATION\r\n\r\n\r\n\r\n                let easingFunction = new BABYLON.ExponentialEase(2);\r\n                easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEIN);\r\n                ySlide.setEasingFunction(easingFunction);\r\n\r\n\r\n\r\n                keyFrames.push({\r\n                    frame: 0,\r\n                    value: mesh.getAbsolutePosition().add(new BABYLON.Vector3(0, 0, 0))\r\n                });\r\n\r\n                keyFrames.push({\r\n                    frame: 1 * duration,\r\n                    value: mesh.getAbsolutePosition().add(new BABYLON.Vector3(0, 1, 0))\r\n                });\r\n\r\n                keyFrames.push({\r\n                    frame: 2 * duration,\r\n                    value: mesh.getAbsolutePosition().add(new BABYLON.Vector3(0, 2, 0))\r\n                });\r\n\r\n                keyFrames.push({\r\n                    frame: 3 * duration,\r\n                    value: mesh.getAbsolutePosition().add(new BABYLON.Vector3(0, 3, 0))\r\n                });\r\n\r\n                ySlide.setKeys(keyFrames);\r\n\r\n\r\n                mesh.animations.push(ySlide);\r\n\r\n\r\n\r\n\r\n                var animevent = new BABYLON.AnimationEvent(keyFrames[0].frame, () => {\r\n                    var test_data = {}\r\n                    test_data.obj_Velocity = 30\r\n                    test_data.obj_Time = 0\r\n                    test_data.obj_Distance = 25\r\n                    ghosting(mesh, test_data)\r\n                })\r\n\r\n                var animevent1 = new BABYLON.AnimationEvent(keyFrames[1].frame, () => {\r\n                    var test_data = {}\r\n                    test_data.obj_Velocity = 20\r\n                    test_data.obj_Time = 1\r\n                    test_data.obj_Distance = 40\r\n                    ghosting(mesh, test_data)\r\n                })\r\n\r\n                var animevent2 = new BABYLON.AnimationEvent(keyFrames[2].frame, () => {\r\n                    var test_data = {}\r\n                    test_data.obj_Velocity = 10\r\n                    test_data.obj_Time = 2\r\n                    test_data.obj_Distance = 45\r\n                    ghosting(mesh, test_data)\r\n                })\r\n\r\n                var animevent3 = new BABYLON.AnimationEvent(keyFrames[3].frame, () => {\r\n                    var test_data = {}\r\n                    test_data.obj_Velocity = 0\r\n                    test_data.obj_Time = 3\r\n                    test_data.obj_Distance = 45\r\n                    ghosting(mesh, test_data)\r\n                })\r\n\r\n\r\n\r\n\r\n                ySlide.addEvent(animevent)\r\n                ySlide.addEvent(animevent1)\r\n                ySlide.addEvent(animevent2)\r\n                ySlide.addEvent(animevent3)\r\n\r\n                var animation = scene.beginAnimation(mesh, 0, keyFrames[keyFrames.length - 1].frame, false, 3.0, () => {\r\n                    onEnd();\r\n\r\n                });\r\n\r\n                // animation.speedRatio=2;\r\n\r\n            }\r\n\r\n            function onEnd() {\r\n                mesh.physicsImpostor.setMass(3)\r\n\r\n            }\r\n\r\n\r\n\r\n            function start() {\r\n\r\n\r\n                try {\r\n                    if (mesh) {\r\n                        mesh.physicsImpostor.setMass(0)\r\n                        animation(mesh, onEnd, scene)\r\n\r\n                    }\r\n\r\n\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            function disposeAll() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n            }\r\n\r\n            function disposeghosts() {\r\n\r\n\r\n                if (disposable_ghosts) {\r\n                    disposable_ghosts.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_ghosts = []\r\n\r\n                }\r\n\r\n                if (disposable_lines) {\r\n                    disposable_lines.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_lines = []\r\n                }\r\n\r\n\r\n                if (disposable_panels) {\r\n                    disposable_panels.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_panels = []\r\n                }\r\n\r\n\r\n                if (disposable_clones) {\r\n                    disposable_clones.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_clones = []\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            var button = GUI.Button.CreateImageOnlyButton(\"but\", \"images/pressme.png\")\r\n            button.color = \"transparent\"\r\n\r\n            var test = new XRDisplayPlane(.5, .33, true, true, scene);\r\n\r\n            test.setScaleToInPixels(300, 160)\r\n\r\n            test.displayPlane.position.set(-.25, .5, .3);\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(test.displayPlane);\r\n\r\n            var switchmode = 1;\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        start();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeghosts();\r\n                        disposeAll();\r\n                        prepare();\r\n                        disposeghosts();\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n            test.addControl(button);\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        function do_test_animation_down() {\r\n\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n            var defaultmeshes = [];\r\n            var disposable_items = []\r\n\r\n\r\n            var loaded_meshes = []\r\n            var disposable_ghosts = []\r\n            var disposable_clones = []\r\n            var disposable_lines = []\r\n            var disposable_panels = []\r\n            var loaded_onBeforeRenderObservables = []\r\n            var defaultmeshes = [];\r\n\r\n            var to_clone_model;\r\n            var mesh;\r\n\r\n\r\n\r\n\r\n            async function load_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var applemodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"colored apple.gltf\", scene));\r\n\r\n                var applemesh = applemodel.meshes;\r\n\r\n                applemesh[0].scaling.scaleInPlace(0.15);\r\n                applemesh[0].position.set(-.25, 10, -1.5);\r\n\r\n\r\n\r\n                var apple_collider = BABYLON.MeshBuilder.CreateBox(\"apple_collider3\", { height: applemesh[1].height, width: applemesh[1].width, depth: applemesh[1].depth }, scene);\r\n\r\n                attachToCollider(applemesh, 0, apple_collider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(apple_collider, 90);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(applemesh);\r\n                defaultmeshes.push(apple_collider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(applemesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(apple_collider)\r\n\r\n\r\n                //apple_collider.getAbsolutePosition().addInPlace(new BABYLON.Vector3(0,1,0))\r\n\r\n            }\r\n\r\n            async function prepare() {\r\n\r\n                load_models().then(() => {\r\n\r\n                    mesh = scene.getMeshByName(\"apple_collider3\");\r\n\r\n\r\n                });\r\n\r\n\r\n            }\r\n\r\n\r\n            prepare();\r\n\r\n\r\n            function ghosting(mesh, data) {\r\n\r\n\r\n                to_clone_model = defaultmeshes[0];\r\n                var ghost_clone = to_clone_model[0].clone(\"bModel\");\r\n                ghost_clone.setParent(null)\r\n                //var ghost_sphere = ghost_model[0].createInstance(\"bModel\")\r\n\r\n                for (var child of ghost_clone.getChildMeshes()) {\r\n                    child.material = new BABYLON.StandardMaterial(\"mat\");\r\n                    child.material.alpha = 0.25;\r\n                    //child.material.diffuseTexture = new BABYLON.Texture(\"textures/speckles.jpg\");\r\n                }\r\n\r\n\r\n                ghost_clone.setAbsolutePosition(mesh.position);\r\n                ghost_clone.position.y -= 0.1\r\n\r\n\r\n                var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 12, diameter: .05 }, scene);\r\n                var material = new BABYLON.StandardMaterial(\"mat\");\r\n                material.diffuseColor = new BABYLON.Color4(0, 1, 0, 1)\r\n                //ghost_sphere.visibility = 1;\r\n                ghost_sphere.material = material;\r\n\r\n\r\n\r\n                ghost_sphere.setAbsolutePosition(mesh.position);\r\n                //ghost_sphere.position.set(mesh.position);\r\n\r\n\r\n                disposable_clones.push(ghost_clone)\r\n                disposable_ghosts.push(ghost_sphere)\r\n                section_infodisplay.logicManager.AddDisposableStuff(ghost_clone);\r\n                section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere);\r\n\r\n\r\n\r\n                function applyLine() {\r\n                    if (disposable_ghosts.length > 1) {\r\n                        var past_ghost = disposable_ghosts[disposable_ghosts.length - 2]\r\n                        var actual_ghost = disposable_ghosts[disposable_ghosts.length - 1]\r\n                        \r\n                        var line = new BABYLON.Mesh.CreateLines(\"line\", [past_ghost.getAbsolutePosition(), actual_ghost.getAbsolutePosition()], scene, true);\r\n                        disposable_lines.push(line);\r\n                        section_infodisplay.logicManager.AddDisposableStuff(line);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                function applyDataPanel(mesh) {\r\n\r\n                    var miniplane = BABYLON.MeshBuilder.CreatePlane(\"planes\", { height: .2, width: .5 }, scene);\r\n                    miniplane.setAbsolutePosition(mesh.position)\r\n                    miniplane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                    miniplane.position.x -= .5;\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplane, 400, 160);\r\n\r\n                    section_infodisplay.logicManager.AddTemporalGUI(miniplane)\r\n                    disposable_panels.push(miniplane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 50;\r\n                    button1.fontStyle = \"bold\"\r\n                    button1.background = \"#00000066\"\r\n                    button1.textBlock.text = \"Velocidad: \" + '\\n' + data.obj_Velocity.toString() + \" m/s\";\r\n\r\n                    var dataToshow = 1;\r\n\r\n                    button1.onPointerUpObservable.add(function () {\r\n                        switch (dataToshow) {\r\n                            case 1: dataToshow = 3\r\n                                button1.textBlock.text = \"Tiempo: \" + '\\n' + data.obj_Time.toString() + \" segs\";\r\n                                break;\r\n                            case 2: dataToshow = 3\r\n                                // button1.textBlock.text = \"Distancia: \" + '\\n' + data.obj_Distance.toString() + \" mts\";\r\n                                break;\r\n                            case 3: dataToshow = 1\r\n                                button1.textBlock.text = \"Velocidad: \" + '\\n' + data.obj_Velocity.toString() + \" m/s\";\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n\r\n\r\n                    //LOOK TEST WITH QUATERNIONS\r\n\r\n                    var look = function (mesh, pos) {\r\n                        var dv = pos.subtract(mesh.position);\r\n                        var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                        mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                    };\r\n\r\n                }\r\n\r\n\r\n                applyDataPanel(ghost_sphere);\r\n                applyLine();\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            function animation(mesh, onEnd, scene) {\r\n\r\n                var frameRate = 60; // <= X FRANES = 1 SEC\r\n\r\n                const ySlide = new BABYLON.Animation(\"ySlide\", \"position\", frameRate, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n                const keyFrames = [];\r\n\r\n                var duration = 25 // <= TOTAL LENGHT OF ANIMATION\r\n\r\n                let easingFunction = new BABYLON.ExponentialEase(2);\r\n                easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEIN);\r\n                ySlide.setEasingFunction(easingFunction);\r\n\r\n\r\n                keyFrames.push({\r\n                    frame: 0,\r\n                    value: mesh.getAbsolutePosition().add(new BABYLON.Vector3(0, 3, 0))\r\n                });\r\n\r\n                keyFrames.push({\r\n                    frame: 1 * duration,\r\n                    value: mesh.getAbsolutePosition().add(new BABYLON.Vector3(0, 2, 0))\r\n                });\r\n\r\n                keyFrames.push({\r\n                    frame: 2 * duration,\r\n                    value: mesh.getAbsolutePosition().add(new BABYLON.Vector3(0, 1, 0))\r\n                });\r\n\r\n                keyFrames.push({\r\n                    frame: 3 * duration,\r\n                    value: mesh.getAbsolutePosition().add(new BABYLON.Vector3(0, 0, 0))\r\n                });\r\n\r\n                ySlide.setKeys(keyFrames);\r\n\r\n\r\n                mesh.animations.push(ySlide);\r\n\r\n\r\n\r\n\r\n                var test_data = {}\r\n\r\n                var animevent = new BABYLON.AnimationEvent(keyFrames[0].frame, () => {\r\n                    var test_data = {}\r\n                    test_data.obj_Velocity = 0\r\n                    test_data.obj_Time = 0\r\n                    test_data.obj_Distance = 0\r\n                    ghosting(mesh, test_data)\r\n                })\r\n\r\n                var animevent1 = new BABYLON.AnimationEvent(keyFrames[1].frame, () => {\r\n                    var test_data = {}\r\n                    test_data.obj_Velocity = 10\r\n                    test_data.obj_Time = 1\r\n                    test_data.obj_Distance = 25\r\n                    ghosting(mesh, test_data)\r\n                })\r\n\r\n                var animevent2 = new BABYLON.AnimationEvent(keyFrames[2].frame, () => {\r\n                    var test_data = {}\r\n                    test_data.obj_Velocity = 20\r\n                    test_data.obj_Time = 2\r\n                    test_data.obj_Distance = 40\r\n                    ghosting(mesh, test_data)\r\n                })\r\n\r\n                var animevent3 = new BABYLON.AnimationEvent(keyFrames[3].frame, () => {\r\n                    var test_data = {}\r\n                    test_data.obj_Velocity = 30\r\n                    test_data.obj_Time = 3\r\n                    test_data.obj_Distance = 45\r\n                    ghosting(mesh, test_data)\r\n                })\r\n\r\n\r\n\r\n\r\n                ySlide.addEvent(animevent)\r\n                ySlide.addEvent(animevent1)\r\n                ySlide.addEvent(animevent2)\r\n                ySlide.addEvent(animevent3)\r\n\r\n                var animation = scene.beginAnimation(mesh, 0, keyFrames[keyFrames.length - 1].frame, false, 3.0, () => {\r\n                    onEnd();\r\n\r\n                });\r\n\r\n                // animation.speedRatio=2;\r\n\r\n            }\r\n\r\n            function onEnd() {\r\n                mesh.physicsImpostor.setMass(3)\r\n\r\n            }\r\n\r\n\r\n\r\n            function start() {\r\n\r\n\r\n                try {\r\n                    if (mesh) {\r\n                        mesh.physicsImpostor.setMass(0)\r\n                        animation(mesh, onEnd, scene)\r\n\r\n                    }\r\n\r\n\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            function disposeAll() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n            }\r\n\r\n            function disposeghosts() {\r\n\r\n\r\n                if (disposable_ghosts) {\r\n                    disposable_ghosts.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_ghosts = []\r\n\r\n                }\r\n\r\n                if (disposable_lines) {\r\n                    disposable_lines.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_lines = []\r\n                }\r\n\r\n\r\n                if (disposable_panels) {\r\n                    disposable_panels.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_panels = []\r\n                }\r\n\r\n\r\n                if (disposable_clones) {\r\n                    disposable_clones.forEach(item => {\r\n                        item.dispose();\r\n                    })\r\n                    disposable_clones = []\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            var button = GUI.Button.CreateImageOnlyButton(\"but\", \"images/pressme.png\")\r\n            button.color = \"transparent\"\r\n\r\n            var test = new XRDisplayPlane(.5, .33, true, true, scene);\r\n\r\n            test.setScaleToInPixels(300, 160)\r\n            test.displayPlane.position.set(-.25, .5, -1.7);\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(test.displayPlane);\r\n\r\n            var switchmode = 1;\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        start();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeghosts();\r\n                        disposeAll();\r\n                        prepare();\r\n                        disposeghosts();\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n            test.addControl(button);\r\n\r\n\r\n\r\n        }\r\n\r\n        var OnscreenTimer = new Timer();\r\n        function card5_exercises() {\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n\r\n\r\n            var exercise_quizdisplay = XRQuizDisplay(scene, 1, true);\r\n            exercise_quizdisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_quizdisplay.displayPlane.position.x -= 0.3\r\n            exercise_quizdisplay.displayPlane.position.y += 0.5\r\n\r\n            var exercise_datadisplay = XRDinamicsDataDisplay(scene, 1, true)\r\n            exercise_datadisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_datadisplay.displayPlane.position.x -= 0.3\r\n            exercise_datadisplay.displayPlane.position.z -= 2.4\r\n            exercise_datadisplay.displayPlane.position.y += 0.4\r\n\r\n\r\n            exercise_datadisplay.addFormulaImage(\"/images/equ1-4.png\")\r\n\r\n\r\n            var exercise_control = XRControlDisplay(scene, 1, true)\r\n            exercise_control.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_control.displayPlane.position.x -= 0.3\r\n            exercise_control.displayPlane.position.z+=2.4\r\n            exercise_control.displayPlane.position.y+=0.4\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_quizdisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_datadisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_control.displayPlane);\r\n\r\n\r\n\r\n            exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index--\r\n    \r\n                if (loaded_exercise_index < 0) {\r\n                    loaded_exercise_index++;\r\n                } if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n    \r\n                }\r\n    \r\n            });\r\n    \r\n            exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\r\n    \r\n                loaded_exercise_index++;\r\n    \r\n                if (loaded_exercise_index > quizesList.length - 1) {\r\n                    loaded_exercise_index--;\r\n                }\r\n                if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n    \r\n                }\r\n    \r\n            });\r\n    \r\n            exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\r\n    \r\n                if (exercise_quizdisplay.getIsCorrect()) {\r\n    \r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n    \r\n                    DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\r\n                    //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\r\n                    DataCapture.getQuizByID(currentQuiz).isCompleted = true;\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n                    QuizTimer.reset();\r\n    \r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n    \r\n                    }else{\r\n                        exercise_quizdisplay.correctPanel.show();\r\n                    }\r\n    \r\n    \r\n    \r\n                } else {\r\n    \r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n    \r\n                    DataCapture.addTotalError(currentQuiz);\r\n                    DataCapture.addQuizErrorByID(currentQuiz);\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n    \r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n    \r\n                    }else{\r\n                        exercise_quizdisplay.incorrectPanel.show();\r\n                    }\r\n    \r\n                }\r\n            });\r\n    \r\n\r\n            exercise_control.button2.onPointerUpObservable.add(function () {\r\n\r\n                resource_manager.Reset();\r\n                QuizTimer.reset();\r\n\r\n            });\r\n\r\n\r\n            if (!OnscreenTimer.isRunning()) {\r\n                OnscreenTimer.start();\r\n            }\r\n\r\n            function isCompleted_Question_number() {\r\n\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                if (DataCapture.getQuizByID(currentQuiz).isCompleted) {\r\n                    return \" (Completada)\"\r\n                } else {\r\n                    return \"\"\r\n                }\r\n\r\n            }\r\n            function Check_Errors_number() {\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                return DataCapture.getQuizByID(currentQuiz).errors;\r\n            }\r\n            function Check_Timer_number() {\r\n\r\n                if (DataCapture.getExerciseData().isCompleted) {\r\n                    OnscreenTimer.pause();\r\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds) + \"\\n\" + \"Sección de preguntas finalizada!\"\r\n                } else {\r\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds)\r\n                }\r\n            }\r\n            function formatTime(time) {\r\n                if (time <= 9) {\r\n                    return \"0\" + time;\r\n                } else {\r\n                    return time;\r\n                }\r\n            }\r\n\r\n            var timer_errors_numbers = scene.onBeforeRenderObservable.add(() => {\r\n\r\n\r\n                exercise_quizdisplay.time_number.text = \"Tiempo: \" + Check_Timer_number();\r\n                exercise_quizdisplay.error_number.text = \"Errores: \" + Check_Errors_number();\r\n                exercise_quizdisplay.question_number.text = \"Pregunta: \" + (loaded_exercise_index + 1) + \"/\" + (quizesList.length) + isCompleted_Question_number();\r\n            });\r\n\r\n\r\n\r\n            // Excercise Manager constructor function\r\n\r\n\r\n            function manageStuff() {\r\n\r\n\r\n\r\n                function addExercise(exercise) {\r\n                    exercise_list.push(exercise)\r\n                    quizesList.push(exercise.quiz);\r\n                }\r\n\r\n                function LoadQuiz(number) {\r\n                    exercise_quizdisplay.loadquiz(quizesList[number])\r\n                }\r\n\r\n                function Start(number) {\r\n                    loaded_exercise_index = number;\r\n                    exercise_list[number].Load_Models().then(function (meshes) {\r\n                        ClearStuff();\r\n                        loaded_meshes = meshes;\r\n\r\n                        if (exercise_list[number].Load_Logic) {\r\n\r\n                            exercise_list[number].Load_Logic();\r\n                            LoadQuiz(number);\r\n                            QuizTimer.reset();\r\n                        }\r\n\r\n\r\n\r\n\r\n                    });\r\n                }\r\n\r\n                function Reset() {\r\n\r\n                    Start(loaded_exercise_index);\r\n\r\n                }\r\n\r\n                exercise_control.button2.onPointerUpObservable.add(function () {\r\n                    Reset();\r\n                });\r\n\r\n                function ClearStuff() {\r\n\r\n                    exercise_control.clearObservers();\r\n                    exercise_control.clearItems();\r\n                    exercise_datadisplay.clearViewData();\r\n\r\n\r\n                    console.log(\"reseteando\");\r\n                    if (loaded_onBeforeRenderObservables != undefined) {\r\n\r\n                        loaded_onBeforeRenderObservables.forEach(value => {\r\n\r\n                            scene.onBeforeRenderObservable.remove(value);\r\n                        });\r\n\r\n                    }\r\n                    if (loaded_meshes != undefined) {\r\n\r\n                        loaded_meshes.forEach(value => {\r\n\r\n                            if (Array.isArray(value)) {\r\n                                value.forEach(value => value.dispose());\r\n                            } else { value.dispose(); }\r\n                        });\r\n\r\n                        // addSceneModels();\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                var manager = {\r\n                    addExercise,\r\n                    LoadQuiz,\r\n                    Start,\r\n                    Reset,\r\n                    ClearStuff,\r\n                }\r\n\r\n                return manager;\r\n\r\n            }\r\n\r\n\r\n\r\n            var resource_manager = manageStuff();\r\n\r\n\r\n            var quiz1 = new Exercise.exercise(\r\n                \"1. Si se lanza la bola a una velocidad inicial de 12 m/s, ¿cual será su tiempo de subida?\",\r\n                [\"A) 1.00 segs\", \"B) 1.22 segs\", \"C) 12.00 segs\", \"D) 9,8 segs\"],\r\n                1,\r\n                [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n            var quiz2 = new Exercise.exercise(\r\n                \"2. Si el tiempo de subida de una bola fue de 0.51 segundos, ¿cual fue su velocidad inicial?\",\r\n                [\"A) 5.0 m/s\", \"B) 1.5 m/s\", \"C) 3 m/s\", \"D) 10 m/s\"], 0, [\"none\"]);\r\n\r\n            var quiz3 = new Exercise.exercise(\r\n                \"3. Si lanza la bola a una velocidad inicial de 7 m/s , ¿cual será su altura maxima?\",\r\n                [\"A) 7 m\", \"B) 7.5 m\", \"C) 2.5 m\", \"D) 5 m\"], 2, [\"none\"]);\r\n\r\n            var quiz2alt = new Exercise.exercise(\r\n                \"2. Si se deja caer un balon de futbol desde 3 metros de altura, ¿cual será su velocidad al impactar el suelo?\",\r\n                [\"A\", \"B\", \"C\", \"D\"], 2, [\"none\"]);\r\n\r\n            var quiz3alt = new Exercise.exercise(\r\n                \"3. Si una vola cae durante 3 segundos, ¿cual será su velocidad al impactar el suelo?\",\r\n                [\"A\", \"B\", \"C\", \"D\"], 3, [\"none\"]);\r\n\r\n\r\n            async function quiz1_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var cannonmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"cannonball.gltf\", scene));\r\n\r\n                var cannonmesh = cannonmodel.meshes;\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/cannon_tex.jpg\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color4.FromHexString(\"#8C7853\")\r\n                materialWood.diffuseTexture.uScale = 20.0;//Repeat 5 times on the Vertical Axes\r\n                materialWood.diffuseTexture.vScale = 20.0;//Repeat 5 times on the Horizontal Axes\r\n\r\n                cannonmesh[1].material = materialWood;\r\n\r\n\r\n                cannonmesh[0].scaling.scaleInPlace(0.15);\r\n                cannonmesh[0].position.set(-.5, .33, 0);\r\n\r\n\r\n\r\n\r\n                var cannoncolider = BABYLON.MeshBuilder.CreateBox(\"cannon\", { height: cannonmesh[1].height, width: cannonmesh[1].width, depth: cannonmesh[1].depth }, scene);\r\n\r\n                attachToCollider(cannonmesh, 0, cannoncolider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(cannoncolider, 90);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(cannonmesh);\r\n                defaultmeshes.push(cannoncolider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(cannonmesh)\r\n                section_infodisplay.logicManager.AddDisposableStuff(cannoncolider)\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function quiz2_models() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n\r\n            function exercise1Logic() {\r\n\r\n                var cannontube = scene.getMeshByName(\"cannon\");\r\n\r\n\r\n                var obj_Distance = 1;\r\n                var obj_Time = 1;\r\n                var obj_Velocity = 1;\r\n\r\n                var max_time = 0\r\n                var max_height = 0\r\n\r\n                var display_Distance = 0;\r\n                var display_Time = 0;\r\n                var display_Velocity = 0;\r\n\r\n\r\n\r\n\r\n                var CoT = new BABYLON.TransformNode(\"root\");\r\n                CoT.position.y = 1;\r\n                CoT.position.x = 0.3;\r\n                CoT.parent = cannontube; //Definido como componente hijo del cañón\r\n                var disposable_items = []\r\n\r\n                function activate() {\r\n\r\n                    if (disposable_items) {\r\n                        disposable_items.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                    }\r\n                    fireball(obj_Velocity)\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n                function fireball(force) {\r\n                    var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 6, diameter: 0.2 }, scene)\r\n                    var material = new BABYLON.StandardMaterial(\"ball_mat\", scene)\r\n                    material.diffuseColor = new BABYLON.Color4.FromHexString('#04001A')\r\n\r\n                    ball.material = material;\r\n\r\n                    ball.position = CoT.getAbsolutePosition();\r\n                    var dir = CoT.getAbsolutePosition().subtract(cannontube.getAbsolutePosition()); //Impulso inicial en dirección al cubo guía basado en la fuerza indicada en la variable: power\r\n\r\n                    ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0.5, restitution: 0.3 },\r\n                        scene);\r\n\r\n                    // ball direction with phisics impostor  \r\n\r\n\r\n                    //ball.physicsImpostor.applyForce(dir.scale(force),cannontube.getAbsolutePosition());\r\n                    //ball.physicsImpostor.applyImpulse(dir.scale(force),cannontube.getAbsolutePosition());\r\n                    ball.physicsImpostor.setLinearVelocity(dir.scale(force * 1.37), cannontube.getAbsolutePosition());\r\n\r\n                    window.setTimeout(function () { if (ball) ball.dispose(); }, 5000);\r\n\r\n                    //window.setTimeout(function () { if (ball) ghosting(ball)}, 1000);\r\n\r\n                    function RefreshGhosting(mesh, time, refreshRate) {\r\n\r\n                        var tick = 0;\r\n                        var refreshsteps = Math.round((time / refreshRate))\r\n                        var ghoststeps = (1 / refreshRate) - 1\r\n                        var actualstep = 0;\r\n\r\n                        function ghosting(mesh, data) {\r\n\r\n\r\n                            var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                            ghost_sphere.visibility = 0.5;\r\n                            ghost_sphere.position = mesh.position;\r\n                            loaded_meshes.push(ghost_sphere)\r\n                            disposable_items.push(ghost_sphere)\r\n                            section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n                            function ghostData(mesh) {\r\n                                var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                                miniplame.parent = mesh;\r\n                                miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                                miniplame.position.y = 0.7;\r\n                                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                                var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                                button1.width = 1;\r\n                                button1.height = 1;\r\n                                button1.color = \"white\";\r\n                                button1.fontSize = 50;\r\n                                button1.fontStyle = \"bold\"\r\n                                button1.background = \"#00000066\"\r\n                                button1.textBlock.text = data.toString();\r\n\r\n                                button1.onPointerUpObservable.add(function () {\r\n\r\n                                });\r\n                                advancedTexture.addControl(button1);\r\n\r\n\r\n                                //LOOK TEST WITH QUATERNIONS\r\n\r\n                                var look = function (mesh, pos) {\r\n                                    var dv = pos.subtract(mesh.position);\r\n                                    var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                    mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                                };\r\n\r\n\r\n\r\n                                //scene.registerBeforeRender(function () {\r\n                                //look(miniplame, camera.position);\r\n                                //    })\r\n\r\n\r\n\r\n                            }\r\n\r\n\r\n                            ghostData(ghost_sphere);\r\n\r\n\r\n                        }\r\n\r\n                        var isMoving = false;\r\n                        var done_max_height = false;\r\n                        var done_up_points = false;\r\n                        var done_down_points = false;\r\n                        var fasttick = 0\r\n                        var initialVel = 0\r\n                        var initialPos = 0\r\n\r\n                        function check_initial_velocity(mesh) {\r\n\r\n                            if (mesh.physicsImpostor && initialVel == 0) {\r\n\r\n                                initialVel = mesh.physicsImpostor.getLinearVelocity().y;\r\n                            }\r\n                        }\r\n\r\n                        function check_initial_position(mesh) {\r\n                            if (mesh.physicsImpostor && initialPos == 0) {\r\n\r\n                                initialPos = mesh.position.y;\r\n                            }\r\n                        }\r\n\r\n                        check_initial_velocity(mesh);\r\n                        check_initial_position(mesh);\r\n\r\n                        function check_up_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                            //var refreshsteps= Math.round((1/refreshRate));\r\n                            var actualstep = 0;\r\n                            var tick = 0;\r\n                            //initial vel ejem = 9.8 m/s\r\n                            //reducir 9.8 con el tiempo con pasos\r\n                            //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                            //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n                            function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                                var result = (1 - refreshRate * actualstep);\r\n\r\n                                if (result > 1) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return result;\r\n                                }\r\n\r\n                            }\r\n\r\n                            function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                                var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                                if (result > 1) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return result;\r\n                                }\r\n\r\n                            }\r\n\r\n                            var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                                tick += (scene.deltaTime);\r\n\r\n                                if (tick >= 20) {\r\n\r\n                                    if (!done_up_points) {\r\n                                        tick = 0;\r\n\r\n                                        if (mesh.physicsImpostor) {\r\n\r\n                                            var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n\r\n                                            if (actualstep + 1 <= refreshsteps) {\r\n                                                var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n                                                var ghost_vel_pos = (initialVel * vel_to_section).toFixed(2);\r\n\r\n                                                //console.log(ballvel +\" vs \"+ghost_vel_pos+ \" velsec \"+vel_to_section )\r\n\r\n\r\n                                                if (ballvel <= ghost_vel_pos) {\r\n\r\n                                                    actualstep++;\r\n                                                    var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n                                                    //console.log(ballvel +\" vs \"+ghost_vel_pos )\r\n                                                    //ghosting(mesh,display_Distance+\" mts\");\r\n                                                    ghosting(mesh, ghost_vel_pos + \" m/s\");\r\n\r\n\r\n                                                }\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n                                    } else {\r\n                                        tick = 0;\r\n                                        done_up_points = true;\r\n                                        scene.onBeforeRenderObservable.remove(tempObs);\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                        check_up_points(mesh, refreshRate, ghoststeps);\r\n\r\n                        function check_down_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                            //var refreshsteps= Math.round((1/refreshRate));\r\n                            var actualstep = 0;\r\n                            var tick = 0;\r\n                            //initial vel ejem = 9.8 m/s\r\n                            //reducir 9.8 con el tiempo con pasos\r\n                            //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                            //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n                            function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                                var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                                if (result > 1) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return result;\r\n                                }\r\n\r\n                            }\r\n\r\n                            function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                                var result = (1 - refreshRate * actualstep);\r\n\r\n                                if (result > 1) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return result;\r\n                                }\r\n\r\n                            }\r\n\r\n                            var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                                tick += (scene.deltaTime);\r\n\r\n                                if (tick >= 20) {\r\n\r\n                                    if (!done_down_points) {\r\n                                        tick = 0;\r\n\r\n                                        if (mesh.physicsImpostor) {\r\n\r\n                                            var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n\r\n                                            if (actualstep + 1 <= refreshsteps) {\r\n                                                var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n                                                var ghost_vel_pos = -(initialVel * vel_to_section).toFixed(2);\r\n\r\n                                                //console.log(ballvel +\" vs \"+ghost_vel_pos+ \" velsec \"+vel_to_section )\r\n\r\n                                                if (done_max_height && ballvel <= ghost_vel_pos) {\r\n\r\n                                                    actualstep++;\r\n\r\n                                                    //console.log(ballvel +\" vs \"+ghost_vel_pos)                                                        \r\n                                                    var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n\r\n                                                    //ghosting(mesh,display_Distance+\" mts\")\r\n                                                    ghosting(mesh, ghost_vel_pos + \" m/s\")\r\n\r\n\r\n                                                }\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n                                    } else {\r\n                                        tick = 0;\r\n                                        done_down_points = true;\r\n                                        scene.onBeforeRenderObservable.remove(tempObs);\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                        check_down_points(mesh, refreshRate, ghoststeps);\r\n\r\n                        function check_max_height_point(mesh) {\r\n\r\n                            if (mesh.physicsImpostor) {\r\n\r\n                                var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n                                var ballpos = mesh.position.y;\r\n\r\n\r\n                                if (ballvel > 0) {\r\n                                    isMoving = true\r\n                                }\r\n                                if (isMoving && !done_max_height) {\r\n\r\n\r\n                                    if (ballvel <= 0.05) {\r\n\r\n\r\n                                        //ghosting(mesh,max_height +\" mts\")\r\n                                        ghosting(mesh, 0.0 + \" m/s\")\r\n\r\n                                        isMoving = false;\r\n                                        done_max_height = true;;\r\n\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var temporalObsFast = scene.onBeforeRenderObservable.add(() => {\r\n                            fasttick += (scene.deltaTime);\r\n\r\n                            if (fasttick >= 20) {\r\n\r\n\r\n\r\n                                if (!done_max_height) {\r\n\r\n\r\n                                    fasttick = 0;\r\n\r\n                                    check_max_height_point(ball)\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n\r\n                                    fasttick = 0;\r\n                                    done_max_height = true;\r\n                                    scene.onBeforeRenderObservable.remove(temporalObsFast);\r\n                                }\r\n\r\n                            }\r\n\r\n                        })\r\n\r\n\r\n\r\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n\r\n                            if (tick >= refreshRate * 1000) {\r\n                                actualstep++\r\n\r\n\r\n                                if (actualstep <= refreshsteps) {\r\n\r\n                                    tick = 0;\r\n\r\n                                    //code to refresh here  \r\n\r\n                                    display_Distance = (max_height * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                    display_Time = (max_time * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                    display_Velocity = obj_Velocity;\r\n\r\n                                    //ghosting(mesh,display_Distance);\r\n\r\n                                    exercise_datadisplay.setViewData\r\n                                        (\r\n\r\n                                            // \"∆t de vuelo: \" +display_Time+\" segs\"+\"\\n\"+\r\n                                            //\"v: \"+display_Velocity+\" m/s\"\r\n                                            \"altura maxima: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                            \"tiempo de subida: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                            \"velocidad: \" + display_Velocity + \" m/s\"\r\n\r\n                                        )\r\n\r\n\r\n\r\n\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n                                    actualstep = 0;\r\n                                    tick = 0;\r\n\r\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n\r\n\r\n                    }\r\n\r\n                    RefreshGhosting(ball, max_time, 0.25)\r\n\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                function CalculateMaxheightTime() {\r\n                    max_time = (obj_Velocity / 9.81).toFixed(2);\r\n                    //max_time= (max_height*(2/(obj_Velocity))).toFixed(2);\r\n                }\r\n\r\n\r\n\r\n                function CalculateMaxheight() {\r\n                    //max_height = ((obj_Velocity/2)*max_time).toFixed(2);\r\n                    max_height = (obj_Velocity * max_time - ((9.81 * (max_time * max_time)) / 2)).toFixed(2);\r\n                }\r\n\r\n\r\n\r\n                function calculateDistance() {\r\n                    obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\r\n\r\n                }\r\n\r\n\r\n\r\n                var velocidad = function (value) {\r\n\r\n                    obj_Velocity = Math.floor(value * 10) / 10\r\n                    calculateDistance();\r\n                    CalculateMaxheightTime();\r\n                    CalculateMaxheight();\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n                var displayFValue = function (value) {\r\n\r\n                    return Math.floor(value * 10) / 10;\r\n\r\n                }\r\n\r\n\r\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n                controlSlider.addSlider(\"Velocidad inicial\", velocidad, \"m/s\", 1, 15, 1, displayFValue);\r\n\r\n                exercise_control.controlPanel.addGroup(controlSlider);\r\n                exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    activate();\r\n\r\n                });\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            function exercise2Logic() {\r\n\r\n                //var Root_CoT = scene.getMeshByName(\"cannon\");\r\n\r\n\r\n                var obj_Distance = 1;\r\n                var obj_Time = 1;\r\n                var obj_Velocity = 1;\r\n\r\n                var max_time = 0\r\n                var max_height = 0\r\n                var final_vel = 0\r\n\r\n                var display_Distance = 0;\r\n                var display_Time = 0;\r\n                var display_Velocity = 0;\r\n\r\n                var Root_CoT = new BABYLON.TransformNode(\"root\")\r\n\r\n\r\n                var CoT = new BABYLON.TransformNode(\"anchor\");\r\n                CoT.position.y = -1;\r\n                CoT.position.x = 0.3;\r\n                CoT.parent = Root_CoT; //Definido como componente hijo del cañón\r\n                var disposable_items = []\r\n\r\n                function activate() {\r\n\r\n                    if (disposable_items) {\r\n                        disposable_items.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                    }\r\n                    fireball(obj_Velocity)\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n                function fireball(force) {\r\n\r\n                    var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 6, diameter: 0.2 }, scene)\r\n                    var material = new BABYLON.StandardMaterial(\"ball_mat\", scene)\r\n                    material.diffuseColor = new BABYLON.Color4.FromHexString('#04001A')\r\n\r\n                    ball.material = material;\r\n\r\n                    ball.position = CoT.getAbsolutePosition();\r\n                    var dir = CoT.getAbsolutePosition().subtract(Root_CoT.getAbsolutePosition()); //Impulso inicial en dirección al cubo guía basado en la fuerza indicada en la variable: power\r\n\r\n                    ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0.5, restitution: 0.3 },\r\n                        scene);\r\n\r\n                    // ball direction with phisics impostor  \r\n\r\n\r\n                    //ball.physicsImpostor.applyForce(dir.scale(force),cannontube.getAbsolutePosition());\r\n                    //ball.physicsImpostor.applyImpulse(dir.scale(force),cannontube.getAbsolutePosition());\r\n                    ball.physicsImpostor.setLinearVelocity(dir.scale(force * 1.37), Root_CoT.getAbsolutePosition());\r\n\r\n                    window.setTimeout(function () { if (ball) ball.dispose(); }, 5000);\r\n\r\n                    //window.setTimeout(function () { if (ball) ghosting(ball)}, 1000);\r\n\r\n\r\n\r\n                    function RefreshGhosting(mesh, time, refreshRate) {\r\n\r\n                        var tick = 0;\r\n                        var refreshsteps = Math.round((time / refreshRate))\r\n                        var ghoststeps = (1 / refreshRate) - 1\r\n                        var actualstep = 0;\r\n                        var timer = 0\r\n\r\n                        function ghosting(mesh, data) {\r\n\r\n\r\n                            var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                            ghost_sphere.visibility = 0.5;\r\n                            ghost_sphere.position = mesh.position;\r\n                            loaded_meshes.push(ghost_sphere)\r\n                            disposable_items.push(ghost_sphere)\r\n                            section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n                            function ghostData(mesh) {\r\n                                var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                                miniplame.parent = mesh;\r\n                                miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                                miniplame.position.y = 0.5;\r\n                                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                                var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                                button1.width = 1;\r\n                                button1.height = 1;\r\n                                button1.color = \"white\";\r\n                                button1.fontSize = 50;\r\n                                button1.background = \"green\";\r\n                                button1.textBlock.text = data.toString();\r\n\r\n                                button1.onPointerUpObservable.add(function () {\r\n\r\n                                });\r\n                                advancedTexture.addControl(button1);\r\n\r\n\r\n                                //LOOK TEST WITH QUATERNIONS\r\n\r\n                                var look = function (mesh, pos) {\r\n                                    var dv = pos.subtract(mesh.position);\r\n                                    var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                    mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                                };\r\n\r\n\r\n\r\n                                //scene.registerBeforeRender(function () {\r\n                                //look(miniplame, camera.position);\r\n                                //    })\r\n\r\n\r\n\r\n                            }\r\n\r\n\r\n                            ghostData(ghost_sphere);\r\n\r\n\r\n                        }\r\n\r\n                        var isMoving = false;\r\n                        var done_final_height = false;\r\n                        var done_down_points = false;\r\n                        var fasttick = 0\r\n                        var initialVel = 0\r\n                        var initialPos = 0\r\n\r\n                        function check_initial_velocity(mesh) {\r\n\r\n                            if (mesh.physicsImpostor && initialVel == 0) {\r\n\r\n                                initialVel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n                            }\r\n                        }\r\n\r\n                        function check_initial_position(mesh) {\r\n                            if (mesh.physicsImpostor && initialPos == 0) {\r\n\r\n                                initialPos = mesh.position.y;\r\n                            }\r\n                        }\r\n\r\n                        check_initial_velocity(mesh);\r\n                        check_initial_position(mesh);\r\n\r\n\r\n                        function check_down_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                            //var refreshsteps= Math.round((1/refreshRate));\r\n                            var actualstep = 0;\r\n                            var tick = 0;\r\n                            //initial vel ejem = 9.8 m/s\r\n                            //reducir 9.8 con el tiempo con pasos\r\n                            //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                            //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n\r\n                            function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                                var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                                if (result > 1) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return result;\r\n                                }\r\n\r\n                            }\r\n\r\n                            function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                                var result = (1 - refreshRate * actualstep);\r\n\r\n                                if (result > 1) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return result;\r\n                                }\r\n\r\n                            }\r\n\r\n                            var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                                tick += (scene.deltaTime);\r\n                                timer += (scene.deltaTime);\r\n                                if (tick >= 20) {\r\n\r\n                                    if (!done_down_points) {\r\n                                        tick = 0;\r\n\r\n                                        if (mesh.physicsImpostor) {\r\n\r\n                                            var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n                                            if (actualstep + 1 <= refreshsteps) {\r\n\r\n                                                var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n\r\n                                                var ghost_vel_pos = -(final_vel * vel_to_section).toFixed(2);\r\n\r\n\r\n                                                console.log(\"vel real: \" + ballvel + \" vs vel calculada: \" + ghost_vel_pos + \" Seccion/dividor \" + vel_to_section)\r\n\r\n                                                //if (done_max_height && ballvel <= ghost_vel_pos) {\r\n                                                if (timer >= ((max_time * 1000) * vel_to_section)) {\r\n\r\n                                                    actualstep++;\r\n\r\n                                                    //console.log(ballvel +\" vs \"+ghost_vel_pos)                                                        \r\n                                                    //var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n                                                    console.log(\"ghosting step: \" + actualstep)\r\n                                                    ghosting(mesh, ghost_vel_pos + \" m/s\")\r\n\r\n\r\n                                                }\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n                                    } else {\r\n                                        tick = 0;\r\n                                        done_down_points = true;\r\n                                        scene.onBeforeRenderObservable.remove(tempObs);\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                        check_down_points(mesh, refreshRate, ghoststeps);\r\n\r\n                        function check_final_height_point(mesh) {\r\n\r\n                            if (mesh.physicsImpostor) {\r\n\r\n                                var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n                                isMoving = true\r\n\r\n                                if (isMoving) {\r\n\r\n                                    if (ballvel >= (-0.05) && ballvel <= (0.05)) {\r\n\r\n                                        ghosting(mesh, final_vel + \" m/s\")\r\n\r\n                                        isMoving = false;\r\n                                        done_final_height = true;;\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var temporalObsFast = scene.onBeforeRenderObservable.add(() => {\r\n                            fasttick += (scene.deltaTime);\r\n\r\n                            if (fasttick >= 20) {\r\n\r\n\r\n\r\n                                if (!done_final_height) {\r\n\r\n\r\n                                    fasttick = 0;\r\n\r\n                                    check_final_height_point(ball)\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n\r\n                                    fasttick = 0;\r\n                                    done_final_height = true;\r\n                                    scene.onBeforeRenderObservable.remove(temporalObsFast);\r\n                                }\r\n\r\n                            }\r\n\r\n                        })\r\n\r\n\r\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n\r\n                            if (tick >= refreshRate * 1000) {\r\n                                actualstep++\r\n\r\n\r\n                                if (actualstep <= refreshsteps) {\r\n\r\n                                    tick = 0;\r\n\r\n                                    //code to refresh here  \r\n\r\n\r\n                                    display_Distance = (max_height * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                    display_Time = (max_time * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                    display_Velocity = (final_vel * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                    //ghosting(mesh,display_Distance);\r\n\r\n                                    exercise_datadisplay.setViewData\r\n                                        (\r\n\r\n                                            // \"∆t de vuelo: \" +display_Time+\" segs\"+\"\\n\"+\r\n                                            //\"v: \"+display_Velocity+\" m/s\"\r\n                                            \"altura maxima: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                            \"tiempo de bajada: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                            \"velocidad: \" + display_Velocity + \" m/s\"\r\n\r\n                                        )\r\n\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n                                    actualstep = 0;\r\n                                    tick = 0;\r\n\r\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n\r\n                        ghosting(mesh, 0.0 + \" m/s\")\r\n                    }\r\n\r\n\r\n\r\n                    RefreshGhosting(ball, max_time, 0.25)\r\n\r\n\r\n                }\r\n\r\n\r\n                function CalculateFallTime(altura) {\r\n\r\n                    max_time = Math.sqrt((2 * altura) / 9.81).toFixed(2)\r\n\r\n                }\r\n\r\n                function CalculateImpactVelocity(altura) {\r\n\r\n                    final_vel = Math.sqrt((2 * 9.81) * altura).toFixed(2)\r\n                }\r\n\r\n\r\n                var CalculateMaxHeight = function (value) {\r\n                    var altura = Math.floor(value * 10) / 10;\r\n                    Root_CoT.position.y = altura + 1;\r\n\r\n                    max_height = altura;\r\n\r\n                    CalculateFallTime(altura);\r\n                    CalculateImpactVelocity(altura);\r\n\r\n                }\r\n\r\n\r\n                var displayFValue = function (value) {\r\n\r\n                    return Math.floor(value * 10) / 10;\r\n\r\n                }\r\n\r\n\r\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n                controlSlider.addSlider(\"Altura inicial\", CalculateMaxHeight, \"m\", 1, 15, 1, displayFValue);\r\n\r\n                exercise_control.controlPanel.addGroup(controlSlider);\r\n                exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    activate();\r\n\r\n                });\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n\r\n            }\r\n\r\n            function exercise3Logic() {\r\n\r\n                //var Root_CoT = scene.getMeshByName(\"cannon\");\r\n\r\n\r\n                var obj_Distance = 1;\r\n                var obj_Time = 1;\r\n                var obj_Velocity = 1;\r\n\r\n                var max_time = 0\r\n                var max_height = 0\r\n                var final_vel = 0\r\n\r\n                var display_Distance = 0;\r\n                var display_Time = 0;\r\n                var display_Velocity = 0;\r\n\r\n                var Root_CoT = new BABYLON.TransformNode(\"root\")\r\n\r\n\r\n                var CoT = new BABYLON.TransformNode(\"anchor\");\r\n                CoT.position.y = -1;\r\n                CoT.position.x = 0.3;\r\n                CoT.parent = Root_CoT; //Definido como componente hijo del cañón\r\n                var disposable_items = []\r\n\r\n                function activate() {\r\n\r\n                    if (disposable_items) {\r\n                        disposable_items.forEach(item => {\r\n                            item.dispose();\r\n                        })\r\n                    }\r\n                    fireball(obj_Velocity)\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n                function fireball(force) {\r\n\r\n                    var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 6, diameter: 0.2 }, scene)\r\n                    var material = new BABYLON.StandardMaterial(\"ball_mat\", scene)\r\n                    material.diffuseColor = new BABYLON.Color4.FromHexString('#04001A')\r\n\r\n                    ball.material = material;\r\n\r\n                    ball.position = CoT.getAbsolutePosition();\r\n                    var dir = CoT.getAbsolutePosition().subtract(Root_CoT.getAbsolutePosition()); //Impulso inicial en dirección al cubo guía basado en la fuerza indicada en la variable: power\r\n\r\n                    ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 1, friction: 0.5, restitution: 0.3 },\r\n                        scene);\r\n\r\n                    // ball direction with phisics impostor  \r\n\r\n\r\n                    //ball.physicsImpostor.applyForce(dir.scale(force),cannontube.getAbsolutePosition());\r\n                    //ball.physicsImpostor.applyImpulse(dir.scale(force),cannontube.getAbsolutePosition());\r\n                    ball.physicsImpostor.setLinearVelocity(dir.scale(force * 1.37), Root_CoT.getAbsolutePosition());\r\n\r\n                    window.setTimeout(function () { if (ball) ball.dispose(); }, 5000);\r\n\r\n                    //window.setTimeout(function () { if (ball) ghosting(ball)}, 1000);\r\n\r\n\r\n\r\n                    function RefreshGhosting(mesh, time, refreshRate) {\r\n\r\n                        var tick = 0;\r\n                        var refreshsteps = Math.round((time / refreshRate))\r\n                        var ghoststeps = (1 / refreshRate) - 1\r\n                        var actualstep = 0;\r\n                        var timer = 0\r\n\r\n                        function ghosting(mesh, data) {\r\n\r\n\r\n                            var ghost_sphere = BABYLON.MeshBuilder.CreateSphere('ghost_sphere', { segments: 6, diameter: 0.1 }, scene);\r\n                            ghost_sphere.visibility = 0.5;\r\n                            ghost_sphere.position = mesh.position;\r\n                            loaded_meshes.push(ghost_sphere)\r\n                            disposable_items.push(ghost_sphere)\r\n                            section_infodisplay.logicManager.AddDisposableStuff(ghost_sphere)\r\n\r\n\r\n                            function ghostData(mesh) {\r\n                                var miniplame = BABYLON.MeshBuilder.CreatePlane(\"plane\", { height: 0.2, width: .5 });\r\n                                miniplame.parent = mesh;\r\n                                miniplame.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n                                miniplame.position.y = 0.5;\r\n                                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(miniplame, 300, 100);\r\n\r\n                                var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Sin datos\");\r\n                                button1.width = 1;\r\n                                button1.height = 1;\r\n                                button1.color = \"white\";\r\n                                button1.fontSize = 50;\r\n                                button1.background = \"green\";\r\n                                button1.textBlock.text = data.toString();\r\n\r\n                                button1.onPointerUpObservable.add(function () {\r\n\r\n                                });\r\n                                advancedTexture.addControl(button1);\r\n\r\n\r\n                                //LOOK TEST WITH QUATERNIONS\r\n\r\n                                var look = function (mesh, pos) {\r\n                                    var dv = pos.subtract(mesh.position);\r\n                                    var yaw = -Math.atan2(dv.z, dv.x) - Math.PI / 2;\r\n                                    mesh.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(yaw, 0, 0);\r\n                                };\r\n\r\n\r\n\r\n                                //scene.registerBeforeRender(function () {\r\n                                //look(miniplame, camera.position);\r\n                                //    })\r\n\r\n\r\n\r\n                            }\r\n\r\n\r\n                            ghostData(ghost_sphere);\r\n\r\n\r\n                        }\r\n\r\n                        var isMoving = false;\r\n                        var done_final_height = false;\r\n                        var done_down_points = false;\r\n                        var fasttick = 0\r\n                        var initialVel = 0\r\n                        var initialPos = 0\r\n\r\n                        function check_initial_velocity(mesh) {\r\n\r\n                            if (mesh.physicsImpostor && initialVel == 0) {\r\n\r\n                                initialVel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n                            }\r\n                        }\r\n\r\n                        function check_initial_position(mesh) {\r\n                            if (mesh.physicsImpostor && initialPos == 0) {\r\n\r\n                                initialPos = mesh.position.y;\r\n                            }\r\n                        }\r\n\r\n                        check_initial_velocity(mesh);\r\n                        check_initial_position(mesh);\r\n\r\n\r\n                        function check_down_points(mesh, refreshRate, refreshsteps) {\r\n\r\n                            //var refreshsteps= Math.round((1/refreshRate));\r\n                            var actualstep = 0;\r\n                            var tick = 0;\r\n                            //initial vel ejem = 9.8 m/s\r\n                            //reducir 9.8 con el tiempo con pasos\r\n                            //paso 1 = 9.8*(1-0.25(refreshRate*refreshsteps) => 9.8(.75))\r\n                            //paso 2 = 9.8*(1-0.50(refreshRate*refreshsteps) => 9.8(.50))\r\n\r\n                            function vel_to_sections(refreshRate, actualstep) {\r\n\r\n                                var result = 1 - (1 - refreshRate * actualstep);\r\n\r\n                                if (result > 1) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return result;\r\n                                }\r\n\r\n                            }\r\n\r\n                            function pos_to_sections(refreshRate, actualstep) {\r\n\r\n                                var result = (1 - refreshRate * actualstep);\r\n\r\n                                if (result > 1) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return result;\r\n                                }\r\n\r\n                            }\r\n\r\n                            var tempObs = scene.onBeforeRenderObservable.add(() => {\r\n                                tick += (scene.deltaTime);\r\n                                timer += (scene.deltaTime);\r\n                                if (tick >= 20) {\r\n\r\n                                    if (!done_down_points) {\r\n                                        tick = 0;\r\n\r\n                                        if (mesh.physicsImpostor) {\r\n\r\n                                            //var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n\r\n                                            if (actualstep + 1 <= refreshsteps) {\r\n\r\n                                                var vel_to_section = vel_to_sections(refreshRate, actualstep + 1)\r\n\r\n                                                var ghost_vel_pos = -(final_vel * vel_to_section).toFixed(2);\r\n\r\n\r\n                                                //console.log(\"vel real: \"+ballvel +\" vs vel calculada: \"+ghost_vel_pos+ \" Seccion/dividor \"+vel_to_section )\r\n\r\n                                                //if (done_max_height && ballvel <= ghost_vel_pos) {\r\n                                                //if (  ballpos >= (max_height*vel_to_section)   ) {\r\n                                                if (timer >= ((max_time * 1000) * vel_to_section)) {\r\n\r\n                                                    actualstep++;\r\n\r\n                                                    //console.log(ballvel +\" vs \"+ghost_vel_pos)                                                        \r\n                                                    //var display_Distance = (max_height * pos_to_sections(refreshRate, actualstep)).toFixed(2);\r\n\r\n                                                    console.log(\"ghosting step: \" + actualstep)\r\n                                                    ghosting(mesh, ghost_vel_pos + \" m/s\")\r\n\r\n\r\n                                                }\r\n\r\n\r\n                                            }\r\n\r\n\r\n                                        }\r\n\r\n                                    } else {\r\n                                        tick = 0;\r\n                                        done_down_points = true;\r\n                                        scene.onBeforeRenderObservable.remove(tempObs);\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                        check_down_points(mesh, refreshRate, ghoststeps);\r\n\r\n                        function check_final_height_point(mesh) {\r\n\r\n                            if (mesh.physicsImpostor) {\r\n\r\n                                var ballvel = mesh.physicsImpostor.getLinearVelocity().y;\r\n\r\n                                isMoving = true\r\n\r\n                                if (isMoving) {\r\n\r\n                                    if (ballvel >= (-0.05) && ballvel <= (0.05)) {\r\n\r\n                                        ghosting(mesh, final_vel + \" m/s\")\r\n\r\n                                        isMoving = false;\r\n                                        done_final_height = true;;\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var temporalObsFast = scene.onBeforeRenderObservable.add(() => {\r\n                            fasttick += (scene.deltaTime);\r\n\r\n                            if (fasttick >= 20) {\r\n\r\n\r\n\r\n                                if (!done_final_height) {\r\n\r\n\r\n                                    fasttick = 0;\r\n\r\n                                    check_final_height_point(ball)\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n\r\n                                    fasttick = 0;\r\n                                    done_final_height = true;\r\n                                    scene.onBeforeRenderObservable.remove(temporalObsFast);\r\n                                }\r\n\r\n                            }\r\n\r\n                        })\r\n\r\n\r\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n\r\n                            if (tick >= refreshRate * 1000) {\r\n                                actualstep++\r\n\r\n\r\n                                if (actualstep <= refreshsteps) {\r\n\r\n                                    tick = 0;\r\n\r\n                                    //code to refresh here  \r\n\r\n\r\n                                    display_Distance = (max_height * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                    display_Time = (max_time * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                    display_Velocity = (final_vel * (actualstep / refreshsteps)).toFixed(2);\r\n\r\n                                    //ghosting(mesh,display_Distance);\r\n\r\n                                    exercise_datadisplay.setViewData\r\n                                        (\r\n\r\n                                            // \"∆t de vuelo: \" +display_Time+\" segs\"+\"\\n\"+\r\n                                            //\"v: \"+display_Velocity+\" m/s\"\r\n                                            \"altura maxima: \" + display_Distance + \" metros (m)\" + \"\\n\" +\r\n                                            \"tiempo de bajada: \" + display_Time + \" segs\" + \"\\n\" +\r\n                                            \"velocidad: \" + display_Velocity + \" m/s\"\r\n\r\n                                        )\r\n\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n                                    actualstep = 0;\r\n                                    tick = 0;\r\n\r\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n\r\n                        ghosting(mesh, 0.0 + \" m/s\")\r\n                    }\r\n\r\n\r\n                    RefreshGhosting(ball, max_time, 0.25)\r\n\r\n\r\n                }\r\n\r\n\r\n                function CalculateFallTime(value) {\r\n\r\n                    max_time = Math.floor(value * 10) / 10;\r\n                    CalculateImpactVelocity();\r\n                    CalculateMaxHeight();\r\n\r\n                }\r\n\r\n                function CalculateImpactVelocity() {\r\n\r\n                    final_vel = (max_time * 9.81).toFixed(2)\r\n                }\r\n\r\n\r\n                var CalculateMaxHeight = function () {\r\n\r\n                    max_height = (1 / 2 * 9.81 * (max_time * max_time)).toFixed(2);\r\n\r\n                    Root_CoT.position.y = max_height;\r\n\r\n                }\r\n\r\n\r\n                var displayFValue = function (value) {\r\n\r\n                    return Math.floor(value * 10) / 10;\r\n\r\n                }\r\n\r\n                var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\r\n\r\n                controlSlider.addSlider(\"tiempo de caida\", CalculateFallTime, \"m\", 1, 15, 1, displayFValue);\r\n\r\n                exercise_control.controlPanel.addGroup(controlSlider);\r\n                exercise_control.controlPanel.heightInPixels = 150;\r\n\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    activate();\r\n\r\n                });\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n\r\n            }\r\n\r\n\r\n            quiz1.addLogic(exercise1Logic)\r\n            quiz1.addModels(quiz1_models)\r\n\r\n            quiz2.addLogic(exercise1Logic);\r\n            quiz2.addModels(quiz1_models)\r\n\r\n\r\n            quiz3.addLogic(exercise1Logic);\r\n            quiz3.addModels(quiz1_models)\r\n\r\n\r\n\r\n            resource_manager.addExercise(quiz1);\r\n            resource_manager.addExercise(quiz2);\r\n            resource_manager.addExercise(quiz3);\r\n\r\n            resource_manager.Start(loaded_exercise_index)\r\n\r\n        }\r\n\r\n        var loader = new BABYLON.AssetsManager(scene);\r\n\r\n        loader.onFinish = function () {\r\n    \r\n            engine.runRenderLoop(() => {\r\n                if (scene) {\r\n                    window.document.title = engine.getFps().toFixed() + \" fps\";\r\n                    scene.render();\r\n    \r\n                }\r\n            });\r\n        };\r\n    \r\n        scene.executeWhenReady(function () {\r\n    \r\n            engine.hideLoadingUI();\r\n    \r\n            if (document.getElementById(\"xr-button\")) {\r\n                let XRbutton = document.getElementById(\"xr-button\");\r\n    \r\n                XRbutton.addEventListener(\"click\", async function () {\r\n    \r\n                    if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\r\n    \r\n                        xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\r\n                        xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\r\n                        await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\r\n    \r\n                    } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\r\n                        await xr.baseExperience.exitXRAsync()\r\n                    }\r\n                });\r\n    \r\n            }\r\n    \r\n    \r\n            if (document.getElementById(\"fullscreen-button\")) {\r\n                let button = document.getElementById(\"fullscreen-button\")\r\n    \r\n                button.addEventListener(\"click\", async function () {\r\n                    //engine.enterFullScreen(true);\r\n    \r\n                    engine.switchFullscreen(false);\r\n                })\r\n            }\r\n    \r\n        });\r\n    \r\n    \r\n        loader.load();\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth='xl'>\r\n\r\n                {/*<WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />*/}\r\n\r\n\r\n                <Box width=\"100%\" p={1} my={0.5}>\r\n                    <BabylonScene onSceneMount={onSceneMount} />\r\n                </Box>\r\n\r\n\r\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\r\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\r\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\r\n                    </Button>\r\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\r\n                        <Typography variant=\"h6\">pantalla completa</Typography>\r\n                    </Button>\r\n                </Container>\r\n\r\n\r\n\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ExercisePage","export default __webpack_public_path__ + \"static/media/card1.10966135.PNG\";","export default __webpack_public_path__ + \"static/media/card2.0a94d1ee.PNG\";","export default __webpack_public_path__ + \"static/media/card3.db6e80df.PNG\";","export default __webpack_public_path__ + \"static/media/card4.665751e5.PNG\";","export default __webpack_public_path__ + \"static/media/card5.aab91096.PNG\";","export default __webpack_public_path__ + \"static/media/card6.e8f3d1c9.PNG\";","export default __webpack_public_path__ + \"static/media/card7.5882385c.PNG\";","export default __webpack_public_path__ + \"static/media/alert2.2455318f.png\";","export default __webpack_public_path__ + \"static/media/cardboard.ca4cc733.png\";","import React, { Component, useRef } from 'react'\r\nimport Main from '../../WebLayout/Main';\r\nimport * as BABYLON from 'babylonjs';\r\nimport BabylonScene from '../../BabylonScene/'; // import the component above linking to file we just created.\r\nimport * as GUI from 'babylonjs-gui';\r\nimport 'babylonjs-loaders';\r\n\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box'\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nimport { Timer } from \"easytimer.js\";\r\n\r\n\r\n\r\nimport { Container, Button } from '@material-ui/core';\r\n\r\nimport { useAuth } from '../../Contexts/AuthContext'\r\n\r\n\r\nimport * as Ground from '../../BabylonScene/components/Ground'\r\n\r\nimport * as Exercise from '../../BabylonScene/components/exercise'\r\n\r\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\r\n\r\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\r\n\r\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\r\n\r\n//import WebCam from '../../EmotionRecognition_Components/WebCam'\r\n//import * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\r\n\r\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\r\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\r\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\r\n\r\nimport XRDisplayPlane from '../../FisicARtivo_Components/XRDisplayPlane';\r\n\r\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\r\n\r\nimport card1 from '../exercise_2_1/resources/card1.PNG'\r\nimport card2 from '../exercise_2_1/resources/card2.PNG'\r\nimport card3 from '../exercise_2_1/resources/card3.PNG'\r\nimport card4 from '../exercise_2_1/resources/card4.PNG'\r\nimport card5 from '../exercise_2_1/resources/card5.PNG'\r\nimport card6 from '../exercise_2_1/resources/card6.PNG'\r\nimport card7 from '../exercise_2_1/resources/card7.PNG'\r\nimport alert2 from '../exercise_2_1/resources/alert2.png'\r\nimport cardboard from '../exercise_2_1/resources/cardboard.png'\r\n\r\nclass ExercisePage extends Component {\r\n    render() {\r\n        return (\r\n            <Main data={GetMainContent} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imagebox: {\r\n        //backgroundImage: 'url(' + drawerImage + ')',   \r\n        height: '100%',\r\n        width: '60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    card: {\r\n        height: '100%',\r\n\r\n        flexDirection: 'column',\r\n    },\r\n    media: {\r\n        height: 400,\r\n\r\n    },\r\n    babylonbuttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n\r\n    },\r\n}));\r\n\r\nfunction GetMainContent() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { currentUser } = useAuth();\r\n\r\n    //const webcam = useRef({});\r\n\r\n    var exerciseData = {\r\n        id: 'exercise_2_1',\r\n        generalTime: '00:00',\r\n        totalErrors: 0,\r\n        isCompleted: false,\r\n        quizes: {\r\n            quiz_1: {\r\n                id: 'quiz_1',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_2: {\r\n                id: 'quiz_2',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_3: {\r\n                id: 'quiz_3',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    DataCapture.setCurrentUser(currentUser);\r\n\r\n    DataCapture.setExerciseData(exerciseData);\r\n\r\n    DataCapture.checkUserExerciseData(exerciseData.id);\r\n\r\n    DataCapture.globalTimer.start();\r\n\r\n    //EmotionsAPI.setCurrentUser(currentUser);\r\n\r\n    //EmotionsAPI.loadModels();\r\n\r\n    /*async function takeCapture() {\r\n        webcam.current.takeCapture();\r\n    }\r\n    async function stopCamera() {\r\n        webcam.current.stopCamera();\r\n    }\r\n\r\n    async function startCamera() {\r\n        webcam.current.startCamera();\r\n    }*/\r\n\r\n    var onSceneMount = (e: SceneEventArgs) => {\r\n        const { canvas, scene, engine } = e;\r\n\r\n        engine.displayLoadingUI();\r\n\r\n        const QuizTimer = new Timer();\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\r\n        const camera_initialPos = new BABYLON.Vector3(-4, .82, 0);\r\n        const camera_initialTarget = new BABYLON.Vector3(0, 1, 0);\r\n        const camera_speed = 0.7;\r\n        const camera_angularSensibility = 1200;\r\n\r\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(camera_initialTarget);\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, false);\r\n\r\n        camera.speed = camera_speed;\r\n        camera.angularSensibility = camera_angularSensibility;\r\n        camera.inertia = .5;\r\n\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        // const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        // light.intensity = 0.7;\r\n\r\n\r\n        // Light\r\n        const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\r\n        light.intensity = 0.9;\r\n\r\n        // Skybox\r\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\r\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\r\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n        skybox.material = skyboxMaterial;\r\n\r\n\r\n        // physics\r\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\r\n\r\n        var physicsEngine = scene.getPhysicsEngine();\r\n        //physicsEngine.setSubTimeStep(1);\r\n\r\n\r\n        // Enable Collisions\r\n        scene.collisionsEnabled = true;\r\n\r\n        //Then apply collisions and gravity to the active camera\r\n        camera.checkCollisions = true;\r\n        camera.applyGravity = true;\r\n\r\n        //Set the ellipsoid around the camera (e.g. your player's size)\r\n        camera.ellipsoid = new BABYLON.Vector3(.5, .8, .5);\r\n\r\n        var ground = Ground.createPlayGroundGigant(scene);\r\n\r\n\r\n        //var ground= Ground.createPlayGroundLarge(scene);\r\n\r\n        //finally, say which mesh will be collisionable\r\n        ground.checkCollisions = true;\r\n\r\n\r\n        //addSceneModels();\r\n        var xr = {};\r\n\r\n\r\n        async function XRmode() {\r\n\r\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\r\n\r\n            xr = await scene.createDefaultXRExperienceAsync({\r\n\r\n\r\n                disableDefaultUI: true,\r\n                //floorMeshes: [ground],\r\n                uiOptions: {\r\n\r\n                    sessionMode: \"immersive-ar\"\r\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\r\n                    , referenceSpaceType: \"local-floor\"\r\n                },\r\n                inputOptions: { doNotLoadControllerMeshes: false }\r\n            });\r\n\r\n\r\n\r\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\r\n                    // floor is at y === 2\r\n                    camera.y = 2;\r\n                \r\n                });*/\r\n\r\n\r\n\r\n            \r\n            xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\r\n                    ground.visibility = 0;\r\n                    skybox.isVisible = false;\r\n                    //GUI_controller.createXRGui();\r\n                    //stopCamera();\r\n                    //EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\r\n                    ground.visibility = 1;\r\n                    skybox.isVisible = true;\r\n                    //GUI_controller.createNormalGui();\r\n                    //startCamera();\r\n                    //EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n        }\r\n\r\n        XRmode();\r\n\r\n \r\n\r\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\r\n        gizmoManager.selectMode(0);\r\n\r\n\r\n        var pickedMesh = null;\r\n        var attachedMesh = null;\r\n        var pressed =null\r\n\r\n        //observables generales globales para picking meshes\r\n\r\n        scene.onPointerObservable.addOnce(pointerinfo => {\r\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\r\n                QuizTimer.start();\r\n            }\r\n        })\r\n\r\n        scene.onPointerObservable.add((pointerInfo) => {\r\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n\r\n            //if (pointerInfo.type === 4) {\r\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\r\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\r\n            // }\r\n            //}\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n\r\n                    scene.constantlyUpdateMeshUnderPointer = true;\r\n\r\n                    pressed = true;\r\n\r\n                    attachedMesh = pickedMesh;\r\n\r\n                    gizmoManager.attachToMesh(attachedMesh);\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                    attachedMesh = null;\r\n                    gizmoManager.attachToMesh(null);\r\n                }\r\n\r\n            }\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\r\n\r\n                scene.constantlyUpdateMeshUnderPointer = false;\r\n                \r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                   \r\n                    // pickedMesh.physicsImpostor.wakeUp();\r\n                    pressed = false;\r\n                    //pickedMesh.physicsImpostor.dispose();\r\n                    //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\r\n\r\n                    pickedMesh = null;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scene.onBeforePhysicsObservable.add(() => {\r\n            \r\n            if (pressed &&pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\r\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\r\n            }\r\n\r\n\r\n        });\r\n\r\n       \r\n        scene.registerBeforeRender(() => {\r\n\r\n            /* if(xr) {\r\n                 if(xr.input.controllers.length) {\r\n         \r\n                     const c = xr.input.controllers[0];\r\n                     \r\n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\r\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\r\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\r\n                     laserPointer.position.copyFrom(c.pointer.position);\r\n                    \r\n                     laserPointer.parent = xr.baseExperience.container;\r\n                 }\r\n             }*/\r\n        })\r\n\r\n\r\n        //DATA DISPLAY COMPONENTS\r\n\r\n        var info_card1 = new ImageInfoCard(\"card1\", card1);\r\n        var info_card2 = new ImageInfoCard(\"card2\", card2);\r\n        var info_card3 = new ImageInfoCard(\"card3\", card3);\r\n        var info_card4 = new ImageInfoCard(\"card4\", card4);\r\n        var info_card5 = new ImageInfoCard(\"card5\", card5);\r\n        var info_card6 = new ImageInfoCard(\"card5\", card6);\r\n        var alert_card = new ImageInfoCard('alert', alert2);\r\n        var info_card7 = new ImageInfoCard(\"card5\", card7);\r\n        var exercise_card = new ImageInfoCard('exercises', cardboard)\r\n\r\n\r\n        info_card1.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n        })\r\n\r\n\r\n        info_card2.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n        });\r\n\r\n\r\n        info_card3.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n        })\r\n\r\n        info_card4.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            solarsistem();\r\n        })\r\n\r\n        info_card5.addModels(createWoodBox)\r\n\r\n        info_card5.addLogic(() => {\r\n            // section_infodisplay.logicManager.ClearAll();\r\n            gravity_demo();\r\n\r\n        })\r\n\r\n\r\n        info_card6.addLogic(() => {\r\n            //section_infodisplay.logicManager.ClearAll();\r\n        })\r\n\r\n\r\n        info_card7.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n        })\r\n\r\n        exercise_card.addLogic(()=>{\r\n            section_infodisplay.logicManager.ClearAll();\r\n            exercise_card_exercises();\r\n        })\r\n\r\n\r\n\r\n        var section_infodisplay = InfoDisplay(scene, 2);\r\n        //var local_pos = new BABYLON.Vector3(0, 1, 0);\r\n\r\n        //section_infodisplay.displayPlane.position = local_pos; //position sphere relative to world\r\n\r\n        section_infodisplay.addCard(info_card1);\r\n        section_infodisplay.addCard(info_card2);\r\n        section_infodisplay.addCard(info_card3);\r\n        section_infodisplay.addCard(info_card4);\r\n        section_infodisplay.addCard(info_card5);\r\n        section_infodisplay.addCard(info_card6);\r\n        section_infodisplay.addCard(info_card7);\r\n        section_infodisplay.addCard(alert_card);\r\n        section_infodisplay.addCard(exercise_card);\r\n\r\n        section_infodisplay.Start(0);\r\n\r\n\r\n        //declarate initial values \r\n\r\n\r\n        var loaded_exercise_index = 0;\r\n\r\n        // CODE SNIPLET FOR CONTROL OF GLOBAL SCALE OF STUFF IN THE SCENE (SUPER IMPORTANT)\r\n\r\n        //rootTnode for rotation\r\n        const rootNode = new BABYLON.TransformNode(\"Root Container\", scene);\r\n\r\n\r\n        //rootNode.scaling = new Vector3(scale, scale, scale); <= code to scale everything \r\n        //rootNode.rotate(Vector3.Down(), (touchEvent.currentState - touchEvent.previousState) * 0.005); <= code to rotate everything\r\n\r\n        // TODO: Figure out why getFrontPosition stopped working\r\n        //box.position = (scene.activeCamera as TargetCamera).getFrontPosition(2);\r\n\r\n        //const cameraRay = scene.activeCamera.getForwardRay(1);\r\n        //rootNode.position = cameraRay.origin.add(cameraRay.direction.scale(cameraRay.length));\r\n        //rootNode.rotate(Vector3.Up(), 3.14159);        \r\n\r\n\r\n        const transformContainer = new BABYLON.TransformNode(\"Transform Container\", scene);\r\n        transformContainer.parent = rootNode;\r\n        var transformscale = transformContainer.scaling.scaleInPlace(0.2);\r\n        transformContainer.position.y = .4;\r\n\r\n        //mesh.parent = transformContainer;  <= code to add parenting to ALL MESHES to transformation container.\r\n\r\n        /// CODE SNIPLET FOR CONTROL OF GLOBAL SCALE OF STUFF IN THE SCENE (SUPER IMPORTANT)\r\n\r\n\r\n        function solarsistem() {\r\n\r\n            // sun sphere\r\n            var sun = BABYLON.Mesh.CreateSphere(\"sun\", 16, 4, scene);\r\n            sun.position = new BABYLON.Vector3(0, 0, 0);\r\n            var material = new BABYLON.StandardMaterial(\"sunmaterial\", scene);\r\n            sun.material = material;\r\n            sun.material.emissiveColor = new BABYLON.Color3(1, 1, 0);\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(sun)\r\n            sun.parent = transformContainer;\r\n\r\n\r\n            // sun light\r\n            var light0 = new BABYLON.PointLight(\"Omni0\", sun.position, scene);\r\n            light0.diffuse = new BABYLON.Color3(1, 1, 1);\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(light0)\r\n            light0.parent = transformContainer;\r\n\r\n            // planet\r\n            var planet = BABYLON.Mesh.CreateSphere(\"planet\", 16, 2, scene);\r\n            planet.parent = sun;\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(planet)\r\n            planet.parent = transformContainer;\r\n\r\n            var planetMaterial = new BABYLON.StandardMaterial(\"planetSurface\", scene);\r\n            planetMaterial.diffuseTexture = new BABYLON.Texture(\"textures/earth.jpg\", scene);\r\n            planet.material = planetMaterial\r\n            planet.material.diffuseColor = new BABYLON.Color3(1, 1, 1);\r\n            planet.material.specularColor = new BABYLON.Color3(0, 0, 0);\r\n\r\n            //An array to store the planet's position data\r\n            var planetPoints = [];\r\n\r\n            // moon\r\n            var moon = BABYLON.Mesh.CreateSphere(\"moon\", 16, 0.7, scene);\r\n            moon.translate(planet.position, 5, BABYLON.Space.WORLD);\r\n            moon.parent = planet;\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(moon)\r\n            //moon.parent=transformContainer;\r\n\r\n\r\n\r\n            var detail = 64;\r\n            var pieDiv = 2 / detail;\r\n            var divArray = [];\r\n            var radius = 10;\r\n            var ratio = 0.7;\r\n            var offset = { x: 0, y: 0 };\r\n\r\n            for (var i = 0; i < detail; i++) {\r\n                divArray.push(Math.PI * (pieDiv * i));\r\n            }\r\n\r\n            var newPath = [];\r\n            for (var i = 0; i < divArray.length; i++) {\r\n                newPath.push(new BABYLON.Vector3((radius * Math.cos(divArray[i]) + offset.x), (0 + offset.y), ((radius * ratio) * Math.sin(divArray[i]) + offset.x)));\r\n            }\r\n            newPath.push(newPath[0]);\r\n\r\n\r\n            var lines = BABYLON.MeshBuilder.CreateDashedLines(\"lines\", { points: newPath, dashNb: 500 }, scene);\r\n\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(lines)\r\n            lines.parent = transformContainer;\r\n\r\n\r\n            radius = 5;\r\n            newPath = [];\r\n            for (var i = 0; i < divArray.length; i++) {\r\n                newPath.push(new BABYLON.Vector3((radius * Math.cos(divArray[i]) + offset.x), (0 + offset.y), (radius * Math.sin(divArray[i]) + offset.x)));\r\n            }\r\n            newPath.push(newPath[0]);\r\n\r\n\r\n            var lines2 = BABYLON.MeshBuilder.CreateDashedLines(\"lines2\", { points: newPath, dashNb: 500 }, scene);\r\n\r\n            lines2.parent = planet;\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(lines2)\r\n            //lines2.parent=transformContainer;\r\n\r\n\r\n\r\n\r\n            function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(CoT)\r\n\r\n\r\n                //Shape profile in XY plane\r\n                const myShape = [];\r\n                const arrowRadius = 0.5;\r\n                var n = 30;\r\n                var deltaAngle = 2 * Math.PI / n\r\n                for (let i = 0; i <= n; i++) {\r\n                    myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                }\r\n                myShape.push(myShape[0]);  //close profile\r\n\r\n                const arrowHeadLength = 1.5;\r\n                const arrowHeadMaxSize = 1.5;\r\n                const arrowLength = 10;\r\n                const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                arrowDirection.normalize();\r\n\r\n                const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                const myPath = [];\r\n                myPath.push(arrowStart);\r\n                myPath.push(arrowBodyEnd);\r\n                myPath.push(arrowBodyEnd)\r\n                myPath.push(arrowHeadEnd);\r\n\r\n                const scaling = (index, distance) => {\r\n                    switch (index) {\r\n                        case 0:\r\n                        case 1:\r\n                            return 1\r\n                            break\r\n                        case 2:\r\n                            return arrowHeadMaxSize / arrowRadius\r\n                            break\r\n                        case 3:\r\n                            return 0\r\n                            break\r\n                    }\r\n                };\r\n\r\n                let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(arrow)\r\n\r\n                //arrow.scaling=transformscale\r\n\r\n                //arrow.scalingDeterminant=0.2\r\n\r\n                var button1 = {}\r\n\r\n                const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                    const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                    const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    const arrowStart = path[0];\r\n\r\n                    let arrowDirection = path[1].subtract(path[0]);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    path[1] = arrowBodyEnd;\r\n                    path[2] = arrowBodyEnd;\r\n                    path[3] = arrowHeadEnd;\r\n\r\n                    BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                    CoT.parent = arrow\r\n                    CoT.position = path[2];\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                if (mesh) {\r\n\r\n                    //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                    //arrow.parent =mesh;\r\n                    //CoT.parent =mesh;\r\n\r\n                    //arrow.parent= CoT;\r\n                    //CoT.scalingDeterminant=0.2;\r\n\r\n                    //arrow.parent =mesh;         \r\n                    //arrow.scaling = new BABYLON.Vector3(scale/mesh.scaling.x, scale/mesh.scaling.y, scale/mesh.scaling.z);       \r\n                    //arrow.scaling = new BABYLON.Vector3(scale / arrow.scaling.x, scale / arrow.scaling.y, scale / arrow.scaling.z);\r\n                    //arrow.position=arrowStart;   \r\n\r\n                    arrow.scaling = transformscale.multiplyByFloats(scale, scale, scale)\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var returnee = {\r\n                    arrow: arrow,\r\n                    headArrow: CoT,\r\n                    button: button1,\r\n\r\n                }\r\n\r\n\r\n                return returnee;\r\n            }\r\n\r\n\r\n\r\n            var arrow_earth = arrowForce(new BABYLON.Vector3(0, 0, 1), new BABYLON.Vector3(0, 0, 1), 0.50, .5, \"HOLA,\", planet, 0)\r\n\r\n            var arrow_sun = arrowForce(new BABYLON.Vector3(0, 0, 1), new BABYLON.Vector3(0, 0, 1), 0.50, .6, \"HOLA,\", sun, 0)\r\n\r\n\r\n            function info_GUI(meshParent, position, dataString) {\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 2,\r\n                    height: 2\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n\r\n                //plane.rotation.y= (270*(Math.PI/180))  \r\n\r\n                plane.parent = meshParent;\r\n                //plane.scalingDeterminant=length;\r\n\r\n                plane.position = position\r\n                //plane.lookAt(sun.getAbsolutePosition())\r\n\r\n                //plane.position.y = 2*length;\r\n\r\n                plane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\", dataString);\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.fontSize = 500;\r\n                button1.fontStyle = \"bold\"\r\n                button1.textBlock.color = \"white\"\r\n                button1.color = \"transparent\"\r\n                //button1.background = \"green\";\r\n\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    // alert(\"you did it!\");\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(plane);\r\n\r\n                return plane;\r\n\r\n            }\r\n\r\n            var earthMass = info_GUI(planet, new BABYLON.Vector3(0, 2, 0), \"M2\")\r\n\r\n            var sunMass = info_GUI(sun, new BABYLON.Vector3(0, 3, 0), \"M1\")\r\n\r\n            var force_earth = info_GUI(arrow_earth.headArrow, new BABYLON.Vector3(0, 2, 0), \"Fg\")\r\n\r\n            var force_sun = info_GUI(arrow_sun.headArrow, new BABYLON.Vector3(0, 2, 0), \"Fg\")\r\n\r\n\r\n\r\n\r\n\r\n            // Animations\r\n            var alpha = 0;\r\n            var other = 0\r\n            var lines;\r\n            var buffer = 0;\r\n            var max = 43;\r\n\r\n\r\n            var obs = scene.onBeforeRenderObservable.add(() => {\r\n\r\n                planet.position = new BABYLON.Vector3(10 * Math.sin(alpha), planet.parent.position.y, (10 * ratio) * Math.cos(alpha));\r\n                moon.position = new BABYLON.Vector3(5 * Math.sin(alpha), moon.parent.position.y, 5 * Math.cos(alpha));\r\n\r\n                alpha += 0.005;\r\n\r\n                other += 0.05;\r\n\r\n\r\n                // spin\r\n\r\n                arrow_earth.arrow.position = planet.getAbsolutePosition();\r\n                arrow_earth.arrow.lookAt(sun.getAbsolutePosition())\r\n                arrow_sun.arrow.position = sun.getAbsolutePosition();\r\n                arrow_sun.arrow.lookAt(planet.getAbsolutePosition())\r\n                //planet.rotate(BABYLON.Axis.Y, 0.005, BABYLON.Space.WORLD);\r\n                //planet.rotate(BABYLON.Axis.Y, 0.005, BABYLON.Space.LOCAL);\r\n                //moon.rotate(BABYLON.Axis.Y, -0.005, BABYLON.Space.LOCAL);\r\n\r\n                /*  if(planetPoints.length < max){        \r\n                          buffer+=1;\r\n                          \r\n                  \r\n          \r\n                  \r\n          \r\n                  console.log(planetPoints.length);\r\n                  if (buffer == 30) {            \r\n                      planetPoints.push(planet.position);\r\n                      if(lines){lines.dispose();}\r\n                      buffer = 0;\r\n                    lines = BABYLON.MeshBuilder.CreateDashedLines(\"lines\", {points: planetPoints, dashNb:400}, scene);\r\n                  }\r\n                  }*/\r\n\r\n\r\n            })\r\n\r\n            section_infodisplay.logicManager.AddObservables(obs)\r\n\r\n\r\n\r\n        }\r\n\r\n        function gravity_demo() {\r\n\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n            var logicbox_ = logicBox_GUI()\r\n\r\n            var panelforGravityControl = new XRDisplayPlane(1, 0.5, true, true, scene)\r\n             \r\n            var image = new GUI.Image(\"imagegrav\", \"/images/imggrav.png\");\r\n            image.zIndex=-1\r\n            image.width=1;\r\n            image.height=.47\r\n            image.verticalAlignment= GUI.Control.VERTICAL_ALIGNMENT_TOP\r\n            panelforGravityControl.addControl(image)\r\n            panelforGravityControl.addControl(logicbox_.grid);\r\n\r\n            panelforGravityControl.displayPlane.position =  new BABYLON.Vector3(-.5, .5, -.7);\r\n            section_infodisplay.logicManager.AddTemporalGUI(panelforGravityControl.displayPlane);\r\n\r\n            //var temp =section_infodisplay.getCurrentCard();\r\n            //temp.info_image_container.addControl(logicbox_.grid)\r\n\r\n            function logicBox_GUI() {\r\n\r\n\r\n                var grid = new GUI.Grid();\r\n                //grid.background = \"black\"\r\n\r\n                grid.width = 1;\r\n                grid.height = 0.5;\r\n                grid.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n                //grid.paddingTopInPixels = 20\r\n\r\n                //GUI_manager.addGUIelement(grid);\r\n                //GUI_manager.advancedTexture.addControl(grid)\r\n                //GUI_manager.createNormalGui()\r\n\r\n                grid.addColumnDefinition(50, true);\r\n                grid.addColumnDefinition(0.3);\r\n                grid.addColumnDefinition(50, true);\r\n                grid.addColumnDefinition(0.3);\r\n                grid.addColumnDefinition(50, true);\r\n                grid.addColumnDefinition(0.3);\r\n                grid.addColumnDefinition(50, true);\r\n                grid.addRowDefinition(1);\r\n               \r\n               \r\n                //var button = GUI.Button.CreateSimpleButton(\"but\", \"En la Tierra\");\r\n                var button = GUI.Button.CreateImageOnlyButton(\"but_1\", \"/images/entierra.png\")\r\n                //button.width = 0.2;\r\n                //button.height = \"40px\";\r\n                //button.image.widthInPixels = 150\r\n                button.image.horizontalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER\r\n                button.color = \"white\";\r\n                button.background = \"white\";\r\n\r\n                grid.addControl(button, 0, 1);\r\n\r\n                var button2 = GUI.Button.CreateImageOnlyButton(\"but_1\", \"/images/enluna.png\")\r\n\r\n                //button2.image.widthInPixels = 125\r\n                button2.image.horizontalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER\r\n                button2.color = \"white\";\r\n                button2.background = \"white\";\r\n\r\n                grid.addControl(button2, 0, 3);\r\n\r\n                var button3 = GUI.Button.CreateImageOnlyButton(\"but_1\", \"/images/enespacio.png\")\r\n\r\n                //button3.image.widthInPixels = 200\r\n                button3.image.horizontalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER\r\n                button3.color = \"white\";\r\n                button3.background = \"white\";\r\n\r\n                grid.addControl(button3, 0, 5);\r\n\r\n\r\n\r\n                return { grid, button, button2, button3 }\r\n\r\n            }\r\n\r\n\r\n            function logicbox1() {\r\n\r\n                var box = scene.getMeshByName(\"wood_box\");\r\n\r\n\r\n                //arrowdata();\r\n\r\n                var obj_force1 = 1;\r\n\r\n                var obj_mass = 10;\r\n\r\n                var gravity_force = 9.8;\r\n\r\n                var obj_totalforce = (obj_force1);\r\n\r\n                var obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.20, \"Masa:\" + \"\\n\" + obj_mass + \" Kg\", box, obj_mass);\r\n                var setAccel = displayNewtons(new BABYLON.Vector3(-1, 0, 0), 0.20, obj_mass * gravity_force, box, null)\r\n                var slider_control = SliderMass(box, new BABYLON.Vector3(0, 1.1, -1))\r\n\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n                    obj_totalforce = obj_force1;\r\n                    onDisplay_force = obj_totalforce;\r\n                    obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n\r\n                };\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n                var rotateGroup = new GUI.SliderGroup(\"Control de fuerza\", \"S\");\r\n                rotateGroup.addSlider(\"Fuerza\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n\r\n\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1_status = 2;\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n                        switch (button1_status) {\r\n                            case 1:\r\n                                slider_control.open();\r\n                                button1_status = 2;\r\n                                break;\r\n                            case 2:\r\n                                slider_control.close();\r\n                                button1_status = 1;\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n\r\n\r\n\r\n\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayNewtons(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", \"Peso: \" + \"\\n\" + data + \" N\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                function SliderMass(mesh, position) {\r\n\r\n                    var sliderplane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    sliderplane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    sliderplane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    sliderplane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    //sliderplane.scaling = new BABYLON.Vector3(scale/mesh.scaling.x, scale/mesh.scaling.y, scale/mesh.scaling.z);       \r\n\r\n                    //plane.position=middlepoint;\r\n                    sliderplane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTextureSlider = GUI.AdvancedDynamicTexture.CreateForMesh(sliderplane, 200, 200);\r\n\r\n                    var panel = new GUI.StackPanel();\r\n                    panel.width = \"220px\";\r\n                    panel.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n                    panel.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;\r\n                    advancedTextureSlider.addControl(panel);\r\n\r\n                    var header = new GUI.TextBlock();\r\n                    header.text = \"Editor de masa\";\r\n                    header.height = \"30px\";\r\n                    header.color = \"white\";\r\n                    panel.addControl(header);\r\n\r\n                    var slider = new GUI.Slider();\r\n                    slider.minimum = 0;\r\n                    slider.maximum = 50;\r\n                    slider.value = 0;\r\n                    slider.height = \"20px\";\r\n                    slider.width = \"200px\";\r\n\r\n                    slider.onValueChangedObservable.add(function (value) {\r\n                        value = displayMValue(value)\r\n                        //header.text = \"Masa: \" + value  + \" Kg\";\r\n\r\n                        setMass.textBlock.text = \"Masa: \" + \"\\n\" + value + \" Kg\";\r\n                        setAccel.textBlock.text = \"Peso: \" + \"\\n\" + (value * gravity_force).toFixed(2) + \" N\";\r\n                        mesh.physicsImpostor.mass = value;\r\n                        obj_mass = value;\r\n\r\n                    });\r\n                    panel.addControl(slider);\r\n\r\n                    function open() {\r\n\r\n\r\n                        var openKeys = [];\r\n                        openKeys.push({\r\n                            frame: 0,\r\n                            value: 0 //BABYLON.Vector2.Zero()\r\n                        });\r\n                        openKeys.push({\r\n                            frame: 10,\r\n                            value: 1 // new BABYLON.Vector2(1, 1)\r\n                        });\r\n\r\n                        var animationOpen = new BABYLON.Animation(\r\n                            'scaleAnimationOpen',\r\n                            'scaleX',\r\n                            30,\r\n                            BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n                            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n                        );\r\n                        animationOpen.setKeys(openKeys);\r\n\r\n                        let easingFunction = new BABYLON.BounceEase(1, 4);\r\n                        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n                        animationOpen.setEasingFunction(easingFunction);\r\n\r\n                        //container.animations.push(animationOpen);\r\n\r\n                        //scene.beginAnimation(container, 0, 100, false, 1);\r\n                        //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n                        scene.beginDirectAnimation(panel, [animationOpen], 0, 100, false, 1);\r\n\r\n                    }\r\n\r\n                    function close() {\r\n\r\n                        var keys = [];\r\n                        keys.push({\r\n                            frame: 0,\r\n                            value: 1\r\n                        });\r\n                        keys.push({\r\n                            frame: 10,\r\n                            value: 0\r\n                        });\r\n\r\n\r\n                        var animationClose = new BABYLON.Animation(\r\n                            'scaleAnimation',\r\n                            'scaleX',\r\n                            10,\r\n                            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n                            BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n                        );\r\n                        animationClose.setKeys(keys);\r\n\r\n                        let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n                        easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n                        animationClose.setEasingFunction(easingFunction);\r\n\r\n                        //container.animations.push(animationClose);\r\n\r\n                        //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n                        //menuPlane.dispose();\r\n                        //});\r\n\r\n                        scene.beginDirectAnimation(panel, [animationClose], 0, 100, false, 1);\r\n\r\n                    }\r\n\r\n                    var displayFValue = function (value) {\r\n\r\n                        return Math.floor(value * 10) / 10;\r\n\r\n                    }\r\n\r\n                    var displayMValue = function (value) {\r\n                        return Math.floor(value);\r\n                    }\r\n\r\n                    //close();\r\n\r\n                    var component = { sliderplane, open, close }\r\n\r\n                    return component;\r\n\r\n\r\n                }\r\n\r\n                logicbox_.button.onPointerUpObservable.add(() => {\r\n                    scene.getPhysicsEngine().setGravity(new BABYLON.Vector3(0, -9.81, 0));\r\n                    gravity_force = 9.8\r\n                    setAccel.textBlock.text = \"Peso: \" + \"\\n\" + (gravity_force * obj_mass).toFixed(2) + \" N\";\r\n                })\r\n\r\n\r\n                logicbox_.button2.onPointerUpObservable.add(() => {\r\n                    scene.getPhysicsEngine().setGravity(new BABYLON.Vector3(0, -1.6, 0));\r\n                    gravity_force = 1.6\r\n                    setAccel.textBlock.text = \"Peso: \" + \"\\n\" + (gravity_force * obj_mass).toFixed(2) + \" N\";\r\n                })\r\n\r\n                logicbox_.button3.onPointerUpObservable.add(() => {\r\n                    scene.getPhysicsEngine().setGravity(new BABYLON.Vector3(0, 0, 0));\r\n                    gravity_force = 0\r\n                    setAccel.textBlock.text = \"Peso: \" + \"\\n\" + (gravity_force * obj_mass).toFixed(2) + \" N\";\r\n                })\r\n\r\n\r\n\r\n\r\n                //button.\r\n\r\n\r\n\r\n                // OTHER IMPORTANT FUNCTIONS \r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            logicbox1();\r\n\r\n        }\r\n\r\n        async function createWoodBox() {\r\n\r\n            function rotatewithgrades(mesh, grades) {\r\n\r\n                mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n            }\r\n\r\n\r\n            var defaultmeshes = [];\r\n\r\n\r\n            var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n            materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n            materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n            var box = BABYLON.Mesh.CreateBox(\"wood_box\", 1, scene);\r\n            box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n            //box.position.set(-1.5,.33,0);\r\n            box.position = new BABYLON.Vector3(-.5, 0, 0);\r\n            box.material = materialWood;\r\n            box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n            box.XRPickable = true;\r\n\r\n            defaultmeshes.push(box);\r\n\r\n            return defaultmeshes;\r\n        }\r\n\r\n        function gravity_exercises() {\r\n\r\n            var itemList = [];\r\n\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n\r\n            var exercise_control = control();\r\n            var logicbox_ = logicBox_GUI()\r\n\r\n\r\n            function logicBox_GUI() {\r\n\r\n\r\n\r\n                var grid = new GUI.Grid();\r\n                //grid.background = \"black\"\r\n\r\n                grid.width = 1;\r\n                grid.height = \"169px\"\r\n                grid.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n                grid.paddingTopInPixels = 20\r\n\r\n                //GUI_manager.addGUIelement(grid);\r\n                //GUI_manager.advancedTexture.addControl(grid)\r\n                //GUI_manager.createNormalGui()\r\n\r\n                grid.addColumnDefinition(200, true);\r\n                grid.addColumnDefinition(0.3);\r\n                grid.addColumnDefinition(200, true);\r\n                grid.addColumnDefinition(0.3);\r\n                grid.addColumnDefinition(200, true);\r\n                grid.addColumnDefinition(0.3);\r\n                grid.addColumnDefinition(200, true);\r\n                grid.addRowDefinition(1);\r\n\r\n\r\n                //var button = GUI.Button.CreateSimpleButton(\"but\", \"En la Tierra\");\r\n                var button = GUI.Button.CreateImageOnlyButton(\"but_1\", \"/images/entierra.png\")\r\n                //button.width = 0.2;\r\n                //button.height = \"40px\";\r\n                button.image.widthInPixels = 150\r\n                button.image.horizontalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER\r\n                button.color = \"white\";\r\n                button.background = \"white\";\r\n\r\n                grid.addControl(button, 0, 1);\r\n\r\n                var button2 = GUI.Button.CreateImageOnlyButton(\"but_1\", \"/images/enluna.png\")\r\n\r\n                button2.image.widthInPixels = 125\r\n                button2.image.horizontalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER\r\n                button2.color = \"white\";\r\n                button2.background = \"white\";\r\n\r\n                grid.addControl(button2, 0, 3);\r\n\r\n                var button3 = GUI.Button.CreateImageOnlyButton(\"but_1\", \"/images/enespacio.png\")\r\n\r\n                button3.image.widthInPixels = 200\r\n                button3.image.horizontalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER\r\n                button3.color = \"white\";\r\n                button3.background = \"white\";\r\n\r\n                grid.addControl(button3, 0, 5);\r\n\r\n\r\n\r\n                return { grid, button, button2, button3 }\r\n\r\n            }\r\n\r\n            function control() {\r\n\r\n\r\n                var container = new GUI.Rectangle(\"container\")\r\n                container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n                container.width = 0.2;\r\n                container.height = 0.15;\r\n                //container.cornerRadius = 20;\r\n                //container.color = \"Orange\";\r\n                container.thickness = 0;\r\n                //container.background = \"green\";\r\n                container.paddingBottomInPixels = 15;\r\n                container.paddingLeftInPixels = 30;\r\n\r\n                //GUI_manager.advancedTexture.addControl(container);\r\n\r\n                var addStuffPanel = new GUI.StackPanel(\"panel\");\r\n                //container.addControl(addStuffPanel);    \r\n                addStuffPanel.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n                addStuffPanel.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n\r\n                var panel = new GUI.StackPanel(\"panel\");\r\n                container.addControl(panel);\r\n                panel.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\r\n                panel.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n\r\n\r\n                var controlPanel = new GUI.SelectionPanel(\"spi\");\r\n                controlPanel.width = 1;\r\n                controlPanel.height = \"1px\";\r\n                controlPanel.background = \"#1388AF\";\r\n                controlPanel.thickness = 0;\r\n                controlPanel.fontSize = 17;\r\n\r\n\r\n                controlPanel.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                controlPanel.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n\r\n                panel.addControl(controlPanel);\r\n\r\n\r\n                var button = GUI.Button.CreateSimpleButton(\"but\", \"Ejecutar\");\r\n                //button.width = 0.5;\r\n                button.height = \"40px\";\r\n                button.color = \"white\";\r\n                button.fontSize = 20;\r\n                button.background = \"#1388AF\";\r\n                //button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                //button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;               \r\n                //button.top = \"-10px\";\r\n\r\n                //button.onPointerClickObservable.add(ExecuteButton);\r\n                //panel.addControl(button);\r\n\r\n\r\n                var button2 = GUI.Button.CreateSimpleButton(\"but\", \"Reiniciar\");\r\n                //button.width = 0.5;\r\n                button2.height = \"80px\";\r\n                button2.color = \"white\";\r\n                button2.fontSize = 40;\r\n                button2.background = \"#1388AF\";\r\n                //button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n                //button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;               \r\n                //button.top = \"-10px\";\r\n\r\n                //button.onPointerClickObservable.add(ExecuteButton);\r\n                panel.addControl(button2);\r\n\r\n\r\n                function open() {\r\n\r\n\r\n                    var openKeys = [];\r\n                    openKeys.push({\r\n                        frame: 0,\r\n                        value: 0 //BABYLON.Vector2.Zero()\r\n                    });\r\n                    openKeys.push({\r\n                        frame: 10,\r\n                        value: 1 // new BABYLON.Vector2(1, 1)\r\n                    });\r\n\r\n                    var animationOpen = new BABYLON.Animation(\r\n                        'scaleAnimationOpen',\r\n                        'scaleX',\r\n                        30,\r\n                        BABYLON.Animation.ANIMATIONTYPE_FLOAT, //VECTOR2,\r\n                        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n                    );\r\n                    animationOpen.setKeys(openKeys);\r\n\r\n                    let easingFunction = new BABYLON.BounceEase(1, 4);\r\n                    easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT);\r\n                    animationOpen.setEasingFunction(easingFunction);\r\n\r\n                    //container.animations.push(animationOpen);\r\n\r\n                    //scene.beginAnimation(container, 0, 100, false, 1);\r\n                    //scene.beginDirectAnimation(container, [animationOpen], 0, openKeys[openKeys.length-1].frame, false, 1);\r\n                    scene.beginDirectAnimation(container, [animationOpen], 0, 100, false, 1);\r\n\r\n                }\r\n\r\n                function close() {\r\n\r\n\r\n                    var keys = [];\r\n                    keys.push({\r\n                        frame: 0,\r\n                        value: 1\r\n                    });\r\n                    keys.push({\r\n                        frame: 10,\r\n                        value: 0\r\n                    });\r\n\r\n\r\n                    var animationClose = new BABYLON.Animation(\r\n                        'scaleAnimation',\r\n                        'scaleX',\r\n                        10,\r\n                        BABYLON.Animation.ANIMATIONTYPE_FLOAT,\r\n                        BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT\r\n                    );\r\n                    animationClose.setKeys(keys);\r\n\r\n                    let easingFunction = new BABYLON.ExponentialEase(9.7); // BABYLON.QuarticEase()\r\n                    easingFunction.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEINOUT);\r\n                    animationClose.setEasingFunction(easingFunction);\r\n\r\n                    //container.animations.push(animationClose);\r\n\r\n                    //scene.beginAnimation(container, 0, 100, false, 1, () => {\r\n                    //menuPlane.dispose();\r\n                    //});\r\n\r\n                    scene.beginDirectAnimation(container, [animationClose], 0, 100, false, 1);\r\n\r\n                }\r\n\r\n                var observables_list = [];\r\n\r\n                function addObserver(params) {\r\n\r\n                    observables_list.push(params);\r\n\r\n                }\r\n\r\n                function removeObserver(number) {\r\n                    button.onPointerUpObservable.remove(observables_list[number])\r\n                    observables_list.splice(number, 1);\r\n                }\r\n\r\n                function clearObservers() {\r\n                    button.onPointerUpObservable.clear();\r\n                    observables_list = []\r\n                }\r\n\r\n                function clearItems() {\r\n\r\n                    controlPanel.height = \"2px\"\r\n                    var number = controlPanel.groups.length - 1;\r\n                    for (var i = 0; i <= number; i++) {\r\n                        controlPanel.removeGroup(i);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n\r\n                var control = {}\r\n                control.container = container;\r\n                control.open = open;\r\n                control.close = close;\r\n                control.button = button;\r\n                control.button2 = button2;\r\n                control.controlPanel = controlPanel;\r\n                control.addObserver = addObserver;\r\n                control.removeObserver = removeObserver;\r\n                control.clearObservers = clearObservers;\r\n                control.clearItems = clearItems;\r\n\r\n                return control;\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        var OnscreenTimer = new Timer();\r\n\r\n        function exercise_card_exercises() {\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var disposable_stuff = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n\r\n            var exercise_quizdisplay = XRQuizDisplay(scene, 1, true);\r\n            exercise_quizdisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_quizdisplay.displayPlane.position.x -= 0.3\r\n            exercise_quizdisplay.displayPlane.position.y += 0.5\r\n\r\n         \r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_quizdisplay.displayPlane);\r\n  \r\n\r\n            exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index--\r\n    \r\n                if (loaded_exercise_index < 0) {\r\n                    loaded_exercise_index++;\r\n                } if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n    \r\n                }\r\n    \r\n            });\r\n    \r\n            exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\r\n    \r\n                loaded_exercise_index++;\r\n    \r\n                if (loaded_exercise_index > quizesList.length - 1) {\r\n                    loaded_exercise_index--;\r\n                }\r\n                if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n    \r\n                }\r\n    \r\n            });\r\n    \r\n            exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\r\n    \r\n                if (exercise_quizdisplay.getIsCorrect()) {\r\n    \r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n    \r\n                    DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\r\n                    //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\r\n                    DataCapture.getQuizByID(currentQuiz).isCompleted = true;\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n                    QuizTimer.reset();\r\n    \r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n    \r\n                    }else{\r\n                        exercise_quizdisplay.correctPanel.show();\r\n                    }\r\n    \r\n    \r\n    \r\n                } else {\r\n    \r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n    \r\n                    DataCapture.addTotalError(currentQuiz);\r\n                    DataCapture.addQuizErrorByID(currentQuiz);\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n    \r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n    \r\n                    }else{\r\n                        exercise_quizdisplay.incorrectPanel.show();\r\n                    }\r\n    \r\n                }\r\n            });\r\n    \r\n\r\n              \r\n            if(!OnscreenTimer.isRunning()){\r\n                OnscreenTimer.start();\r\n                }\r\n        \r\n                function isCompleted_Question_number() {\r\n        \r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n        \r\n                    if (DataCapture.getQuizByID(currentQuiz).isCompleted) {\r\n                        return \" (Completada)\"\r\n                    } else {\r\n                        return \"\"\r\n                    }\r\n        \r\n                }\r\n                function Check_Errors_number() {\r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n        \r\n                    return DataCapture.getQuizByID(currentQuiz).errors;\r\n                }\r\n                function Check_Timer_number() {\r\n        \r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        OnscreenTimer.pause();\r\n                        return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds) + \"\\n\" + \"Sección de preguntas finalizada!\"\r\n                    } else {\r\n                        return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds)\r\n                    }\r\n                }\r\n                function formatTime(time) {\r\n                    if (time <= 9) {\r\n                        return \"0\" + time;\r\n                    } else {\r\n                        return time;\r\n                    }\r\n                }\r\n        \r\n                var timer_errors_numbers = scene.onBeforeRenderObservable.add(() => {\r\n        \r\n        \r\n                    exercise_quizdisplay.time_number.text = \"Tiempo: \" + Check_Timer_number();\r\n                    exercise_quizdisplay.error_number.text = \"Errores: \" + Check_Errors_number();\r\n                    exercise_quizdisplay.question_number.text = \"Pregunta: \" + (loaded_exercise_index + 1) + \"/\" + (quizesList.length) + isCompleted_Question_number();\r\n                });\r\n        \r\n\r\n           \r\n\r\n            // Excercise Manager constructor function\r\n\r\n\r\n            function manageStuff() {\r\n\r\n\r\n\r\n                function addExercise(exercise) {\r\n                    exercise_list.push(exercise)\r\n                    quizesList.push(exercise.quiz);\r\n                }\r\n\r\n                function LoadQuiz(number) {\r\n                    exercise_quizdisplay.loadquiz(quizesList[number])\r\n                }\r\n\r\n                function Start(number) {\r\n                    loaded_exercise_index = number;\r\n                    exercise_list[number].Load_Models().then(function (meshes) {\r\n                        ClearStuff();\r\n                        disposable_stuff = meshes;\r\n\r\n                        if (exercise_list[number].Load_Logic) {\r\n\r\n                            exercise_list[number].Load_Logic();\r\n                            LoadQuiz(number);\r\n                            QuizTimer.reset();\r\n                        }\r\n\r\n\r\n                    });\r\n                }\r\n\r\n                function Reset() {\r\n\r\n                    Start(loaded_exercise_index);\r\n                    camera.position = new BABYLON.Vector3(-8, 2, -3);\r\n                    camera.setTarget(camera_initialTarget);\r\n\r\n\r\n                }\r\n\r\n\r\n                function ClearStuff() {\r\n\r\n\r\n                    console.log(\"reseteando\");\r\n                    if (loaded_onBeforeRenderObservables != undefined) {\r\n\r\n                        loaded_onBeforeRenderObservables.forEach(value => {\r\n\r\n                            scene.onBeforeRenderObservable.remove(value);\r\n                        });\r\n\r\n                    }\r\n                    if (disposable_stuff != undefined) {\r\n\r\n                        disposable_stuff.forEach(value => {\r\n\r\n                            if (Array.isArray(value)) {\r\n                                value.forEach(value => value.dispose());\r\n                            } else { value.dispose(); }\r\n                        });\r\n\r\n                        // addSceneModels();\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                var manager = {\r\n                    addExercise,\r\n                    LoadQuiz,\r\n                    Start,\r\n                    Reset,\r\n                    ClearStuff,\r\n                }\r\n\r\n                return manager;\r\n\r\n            }\r\n\r\n\r\n            var resource_manager = manageStuff();\r\n\r\n\r\n            var quiz1 = new Exercise.exercise(\r\n                \"1. ¿cual es la magnitud fisica que se expresa la medida de interaccion mutua y simultanea entre dos cuerpos?\",\r\n                [\"A) La velocidad\", \"B) La fuerza\", \"C) La gravedad\", \"D) La masa\"],\r\n                1,\r\n                [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n\r\n\r\n            var quiz2 = new Exercise.exercise(\r\n                \"2. ¿en que unidad se expresa la masa de un objeto?\",\r\n                [\"A) Newtons (N)\", \"B) m/s \", \"C) Kilogramo (kg)\", \"D) 9.8m/s^2\"],\r\n                2,\r\n                [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n\r\n\r\n            var quiz3 = new Exercise.exercise(\r\n                \"3. ¿Cual de las siguientes opciones NO es una caracteristica del peso?\",\r\n                [\"A) Depende de la gravedad\", \"B) Necesita dirección\", \"C) se mide en Newtons (N)\", \"D) se mide en Kilogramos (Kg)\"],\r\n                3,\r\n                [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\r\n\r\n\r\n\r\n            async function quiz1_models() {\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n\r\n            function exercise1Logic() {\r\n\r\n\r\n            }\r\n\r\n                quiz1.addLogic(exercise1Logic)\r\n                quiz1.addModels(quiz1_models)\r\n\r\n                quiz2.addLogic(exercise1Logic)\r\n                quiz2.addModels(quiz1_models)\r\n\r\n                quiz3.addLogic(exercise1Logic)\r\n                quiz3.addModels(quiz1_models)\r\n\r\n\r\n                resource_manager.addExercise(quiz1);\r\n                resource_manager.addExercise(quiz2);\r\n                resource_manager.addExercise(quiz3);\r\n\r\n\r\n                resource_manager.Start(loaded_exercise_index)\r\n\r\n            \r\n        }\r\n\r\n\r\n\r\n        var loader = new BABYLON.AssetsManager(scene);\r\n\r\n        loader.onFinish = function () {\r\n    \r\n            engine.runRenderLoop(() => {\r\n                if (scene) {\r\n                    window.document.title = engine.getFps().toFixed() + \" fps\";\r\n                    scene.render();\r\n    \r\n                }\r\n            });\r\n        };\r\n    \r\n        scene.executeWhenReady(function () {\r\n    \r\n            engine.hideLoadingUI();\r\n    \r\n            if (document.getElementById(\"xr-button\")) {\r\n                let XRbutton = document.getElementById(\"xr-button\");\r\n    \r\n                XRbutton.addEventListener(\"click\", async function () {\r\n    \r\n                    if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\r\n    \r\n                        xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\r\n                        xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\r\n                        await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\r\n    \r\n                    } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\r\n                        await xr.baseExperience.exitXRAsync()\r\n                    }\r\n                });\r\n    \r\n            }\r\n    \r\n    \r\n            if (document.getElementById(\"fullscreen-button\")) {\r\n                let button = document.getElementById(\"fullscreen-button\")\r\n    \r\n                button.addEventListener(\"click\", async function () {\r\n                    //engine.enterFullScreen(true);\r\n    \r\n                    engine.switchFullscreen(false);\r\n                })\r\n            }\r\n    \r\n        });\r\n    \r\n    \r\n        loader.load();\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth='xl'>\r\n\r\n                {/*<WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />*/}\r\n\r\n\r\n                <Box width=\"100%\" p={1} my={0.5}>\r\n                    <BabylonScene onSceneMount={onSceneMount} />\r\n                </Box>\r\n\r\n\r\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\r\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\r\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\r\n                    </Button>\r\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\r\n                        <Typography variant=\"h6\">pantalla completa</Typography>\r\n                    </Button>\r\n                </Container>\r\n\r\n\r\n\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ExercisePage","export default __webpack_public_path__ + \"static/media/card1.a019a2cf.PNG\";","export default __webpack_public_path__ + \"static/media/card2.f92f0dad.PNG\";","export default __webpack_public_path__ + \"static/media/card3.439f1ca4.PNG\";","export default __webpack_public_path__ + \"static/media/alert2.2455318f.png\";","export default __webpack_public_path__ + \"static/media/cardboard.ca4cc733.png\";","import React, { Component, useRef } from 'react'\r\nimport Main from '../../WebLayout/Main';\r\nimport * as BABYLON from 'babylonjs';\r\nimport BabylonScene from '../../BabylonScene/'; // import the component above linking to file we just created.\r\nimport * as GUI from 'babylonjs-gui';\r\nimport 'babylonjs-loaders';\r\n\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nimport { Timer } from \"easytimer.js\";\r\n\r\n\r\n\r\nimport { Container, Button } from '@material-ui/core';\r\n\r\nimport { useAuth } from '../../Contexts/AuthContext'\r\n\r\n\r\nimport * as Ground from '../../BabylonScene/components/Ground'\r\n\r\nimport * as Exercise from '../../BabylonScene/components/exercise'\r\n\r\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\r\n\r\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\r\n\r\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\r\n\r\n//import WebCam from '../../EmotionRecognition_Components/WebCam'\r\n//import * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\r\n\r\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\r\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\r\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\r\n\r\nimport XRDisplayPlane from '../../FisicARtivo_Components/XRDisplayPlane';\r\n\r\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\r\n\r\nimport card1 from '../exercise_2_2/resources/card1.PNG'\r\nimport card2 from '../exercise_2_2/resources/card2.PNG'\r\nimport card3 from '../exercise_2_2/resources/card3.PNG'\r\nimport alert2 from '../exercise_2_2/resources/alert2.png'\r\nimport cardboard from '../exercise_2_2/resources/cardboard.png'\r\n\r\nclass ExercisePage extends Component {\r\n    render() {\r\n        return (\r\n            <Main data={GetMainContent} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imagebox: {\r\n        //backgroundImage: 'url(' + drawerImage + ')',   \r\n        height: '100%',\r\n        width: '60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    card: {\r\n        height: '100%',\r\n\r\n        flexDirection: 'column',\r\n    },\r\n    media: {\r\n        height: 400,\r\n\r\n    },\r\n    babylonbuttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n\r\n    },\r\n}));\r\n\r\nfunction GetMainContent() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { currentUser } = useAuth();\r\n\r\n    //const webcam = useRef({});\r\n\r\n    var exerciseData = {\r\n        id: 'exercise_2_2',\r\n        generalTime: '00:00',\r\n        totalErrors: 0,\r\n        isCompleted: false,\r\n        quizes: {\r\n            quiz_1: {\r\n                id: 'quiz_1',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_2: {\r\n                id: 'quiz_2',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_3: {\r\n                id: 'quiz_3',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    DataCapture.setCurrentUser(currentUser);\r\n\r\n    DataCapture.setExerciseData(exerciseData);\r\n\r\n    DataCapture.checkUserExerciseData(exerciseData.id);\r\n\r\n    DataCapture.globalTimer.start();\r\n\r\n    //EmotionsAPI.setCurrentUser(currentUser);\r\n\r\n    //EmotionsAPI.loadModels();\r\n\r\n    /*async function takeCapture() {\r\n        webcam.current.takeCapture();\r\n    }\r\n    async function stopCamera() {\r\n        webcam.current.stopCamera();\r\n    }\r\n\r\n    async function startCamera() {\r\n        webcam.current.startCamera();\r\n    }*/\r\n\r\n    var onSceneMount = (e: SceneEventArgs) => {\r\n        const { canvas, scene, engine } = e;\r\n\r\n        engine.displayLoadingUI();\r\n\r\n        const QuizTimer = new Timer();\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\r\n        const camera_initialPos = new BABYLON.Vector3(-4, 1.5, 0);\r\n        const camera_initialTarget = new BABYLON.Vector3(0, 1, 0);\r\n        const camera_speed = 0.7;\r\n        const camera_angularSensibility = 1200;\r\n\r\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(camera_initialTarget);\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, false);\r\n\r\n        camera.speed = camera_speed;\r\n        camera.angularSensibility = camera_angularSensibility;\r\n        camera.inertia = .5;\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 0.7;\r\n\r\n        // Light\r\n        //const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\r\n        //light.intensity = 0.9;\r\n\r\n        // Skybox\r\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\r\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\r\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n\r\n\r\n        // physics\r\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\r\n\r\n        var physicsEngine = scene.getPhysicsEngine();\r\n        //physicsEngine.setSubTimeStep(1);\r\n\r\n\r\n        // Enable Collisions\r\n        scene.collisionsEnabled = true;\r\n\r\n        //Then apply collisions and gravity to the active camera\r\n        camera.checkCollisions = true;\r\n        camera.applyGravity = true;\r\n\r\n        //Set the ellipsoid around the camera (e.g. your player's size)\r\n        camera.ellipsoid = new BABYLON.Vector3(1, .8, 1);\r\n\r\n        var ground = Ground.createPlayGroundGigant(scene);\r\n\r\n\r\n        //var ground= Ground.createPlayGroundLarge(scene);\r\n\r\n        //finally, say which mesh will be collisionable\r\n        ground.checkCollisions = true;\r\n\r\n\r\n        //addSceneModels();\r\n        var xr = {};\r\n\r\n\r\n        async function XRmode() {\r\n\r\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\r\n\r\n            xr = await scene.createDefaultXRExperienceAsync({\r\n\r\n\r\n                disableDefaultUI: true,\r\n                //floorMeshes: [ground],\r\n                uiOptions: {\r\n\r\n                    sessionMode: \"immersive-ar\"\r\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\r\n                    , referenceSpaceType: \"local-floor\"\r\n                },\r\n                inputOptions: { doNotLoadControllerMeshes: false }\r\n            });\r\n\r\n\r\n\r\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\r\n                    // floor is at y === 2\r\n                    camera.y = 2;\r\n                \r\n                });*/\r\n\r\n\r\n\r\n           \r\n\r\n\r\n            xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\r\n                    ground.visibility = 0;\r\n                    skybox.isVisible = false;\r\n                    //GUI_controller.createXRGui();\r\n                    //stopCamera();\r\n                    //EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\r\n                    ground.visibility = 1;\r\n                    skybox.isVisible = true;\r\n                    //GUI_controller.createNormalGui();\r\n                    //startCamera();\r\n                    //EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n        }\r\n\r\n        XRmode();\r\n\r\n\r\n\r\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\r\n        gizmoManager.selectMode(0);\r\n\r\n\r\n        var pickedMesh = null;\r\n        var attachedMesh = null;\r\n        var pressed = null\r\n\r\n        //observables generales globales para picking meshes\r\n\r\n        scene.onPointerObservable.addOnce(pointerinfo => {\r\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\r\n                QuizTimer.start();\r\n            }\r\n        })\r\n\r\n        scene.onPointerObservable.add((pointerInfo) => {\r\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n\r\n            //if (pointerInfo.type === 4) {\r\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\r\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\r\n            // }\r\n            //}\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n\r\n                    scene.constantlyUpdateMeshUnderPointer = true;\r\n\r\n                    pressed = true;\r\n\r\n                    attachedMesh = pickedMesh;\r\n\r\n                    gizmoManager.attachToMesh(attachedMesh);\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                    attachedMesh = null;\r\n                    gizmoManager.attachToMesh(null);\r\n                }\r\n\r\n            }\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\r\n\r\n                scene.constantlyUpdateMeshUnderPointer = false;\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n\r\n                    // pickedMesh.physicsImpostor.wakeUp();\r\n                    pressed = false;\r\n                    //pickedMesh.physicsImpostor.dispose();\r\n                    //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\r\n\r\n                    pickedMesh = null;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scene.onBeforePhysicsObservable.add(() => {\r\n\r\n            if (pressed && pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\r\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n\r\n        scene.registerBeforeRender(() => {\r\n\r\n            /* if(xr) {\r\n                 if(xr.input.controllers.length) {\r\n         \r\n                     const c = xr.input.controllers[0];\r\n                     \r\n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\r\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\r\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\r\n                     laserPointer.position.copyFrom(c.pointer.position);\r\n                    \r\n                     laserPointer.parent = xr.baseExperience.container;\r\n                 }\r\n             }*/\r\n        })\r\n\r\n\r\n        //DATA DISPLAY COMPONENTS\r\n\r\n        var info_card1 = new ImageInfoCard(\"card1\", card1);\r\n        var info_card2 = new ImageInfoCard(\"card2\", card2);\r\n        var info_card3 = new ImageInfoCard(\"card3\", card3);\r\n        var alert_card = new ImageInfoCard('alert', alert2);\r\n        var info_card4 = new ImageInfoCard(\"card4\", cardboard);\r\n\r\n\r\n\r\n        info_card1.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n        })\r\n\r\n\r\n        info_card2.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            logicbox1();\r\n        });\r\n\r\n\r\n\r\n        info_card3.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            logicbox2();\r\n        })\r\n\r\n\r\n        alert_card.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n        })\r\n\r\n\r\n\r\n        info_card4.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card4_exercises();\r\n        })\r\n\r\n\r\n\r\n        var section_infodisplay = InfoDisplay(scene, 2);\r\n        //var local_pos = new BABYLON.Vector3(0, 1, 0);\r\n\r\n        //section_infodisplay.displayPlane.position = local_pos; //position sphere relative to world\r\n\r\n        section_infodisplay.addCard(info_card1);\r\n        section_infodisplay.addCard(info_card2);\r\n        section_infodisplay.addCard(info_card3);\r\n        section_infodisplay.addCard(alert_card);\r\n        section_infodisplay.addCard(info_card4);\r\n\r\n        section_infodisplay.Start(0);\r\n\r\n\r\n        //declarate initial values \r\n\r\n\r\n        var loaded_exercise_index = 0;\r\n\r\n        // CODE SNIPLET FOR CONTROL OF GLOBAL SCALE OF STUFF IN THE SCENE (SUPER IMPORTANT)\r\n\r\n        //rootTnode for rotation\r\n        const rootNode = new BABYLON.TransformNode(\"Root Container\", scene);\r\n\r\n\r\n        //rootNode.scaling = new Vector3(scale, scale, scale); <= code to scale everything \r\n        //rootNode.rotate(Vector3.Down(), (touchEvent.currentState - touchEvent.previousState) * 0.005); <= code to rotate everything\r\n\r\n        // TODO: Figure out why getFrontPosition stopped working\r\n        //box.position = (scene.activeCamera as TargetCamera).getFrontPosition(2);\r\n\r\n        //const cameraRay = scene.activeCamera.getForwardRay(1);\r\n        //rootNode.position = cameraRay.origin.add(cameraRay.direction.scale(cameraRay.length));\r\n        //rootNode.rotate(Vector3.Up(), 3.14159);        \r\n\r\n\r\n        const transformContainer = new BABYLON.TransformNode(\"Transform Container\", scene);\r\n        transformContainer.parent = rootNode;\r\n        var transformscale = transformContainer.scaling.scaleInPlace(0.2);\r\n        transformContainer.position.y -= .2;\r\n\r\n        //mesh.parent = transformContainer;  <= code to add parenting to ALL MESHES to transformation container.\r\n\r\n        /// CODE SNIPLET FOR CONTROL OF GLOBAL SCALE OF STUFF IN THE SCENE (SUPER IMPORTANT)\r\n        var defaultmeshes = [];\r\n        var loaded_onBeforeRenderObservables = []\r\n\r\n\r\n\r\n        function logicbox2() {\r\n\r\n            var defaultmeshes = [];\r\n            var box;\r\n\r\n            var fisrtArrowStart = new BABYLON.Vector3(0, 0, -0.5);\r\n            var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n            //Impulse Settings\r\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n            var impulseMagnitude = 5;\r\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n            //arrowdata();\r\n            var obj_force1 = 15;\r\n            var obj_mass = 8;\r\n            var obj_totalforce = (obj_force1);\r\n\r\n            var obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n            var onDisplay_accel = \"?\"\r\n            var onDisplay_force = \"?\"\r\n            var onDisplay_mass = obj_mass;\r\n\r\n            var firstarrow;\r\n            var setMass;\r\n            var setAccel;\r\n\r\n\r\n            async function createStickManWithBox() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 5, friction: 10 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n                var stickman = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"stickman.gltf\", scene));\r\n\r\n                var stickmanmesh = stickman.meshes;\r\n\r\n                stickmanmesh[0].scaling.scaleInPlace(0.05);\r\n                stickmanmesh[0].position.set(-.5, .33, 0);\r\n\r\n\r\n                //busmeshes[0].rotationQuaternion=null;\r\n                //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n                //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n                //busmeshes[7].showBoundingBox = true;            \r\n\r\n                var stickmancollider = BABYLON.MeshBuilder.CreateBox(\"stickman\", { height: stickmanmesh[1].height, width: stickmanmesh[1].width, depth: stickmanmesh[1].depth }, scene);\r\n\r\n                attachToCollider(stickmanmesh, 0, stickmancollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(stickmancollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n                var materialRed = new BABYLON.StandardMaterial(\"redcolor\", scene)\r\n                materialRed.diffuseColor = new BABYLON.Color3.Red()\r\n                stickmanmesh[1].material = materialRed;\r\n\r\n                defaultmeshes.push(stickmanmesh);\r\n                defaultmeshes.push(stickmancollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(stickmanmesh);\r\n                section_infodisplay.logicManager.AddDisposableStuff(stickmancollider);\r\n\r\n\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"wood_box_1\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, 0);\r\n                box.material = materialWood;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n                defaultmeshes.push(box);\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n\r\n\r\n            }\r\n\r\n            function createAll() {\r\n\r\n                createStickManWithBox().then(() => {\r\n\r\n                    box = scene.getMeshByName(\"wood_box_1\");\r\n\r\n                    firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", box, obj_force1);\r\n                    setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", box, obj_mass);\r\n                    setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n                    setAccel.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = \"?\"\r\n                        setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n\r\n                    firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                        setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                        onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                    })\r\n\r\n                })\r\n\r\n\r\n\r\n            }\r\n\r\n            createAll();\r\n\r\n\r\n            function disposeAll() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n\r\n            }\r\n\r\n\r\n            function ExecuteButton() {\r\n\r\n\r\n                onDisplay_accel = (obj_accel).toFixed(3).toString();\r\n                setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                onDisplay_force = (obj_totalforce).toFixed(3).toString();\r\n\r\n                //RefreshDataInMilisecs(200,25)\r\n\r\n                firstarrow.activate();\r\n\r\n            }\r\n\r\n\r\n            var changeForce1 = function (force) {\r\n\r\n                obj_force1 = Math.floor(force);\r\n                obj_totalforce = obj_force1;\r\n                onDisplay_force = obj_totalforce;\r\n                obj_accel = getAccel(obj_totalforce, obj_mass);\r\n                firstarrow.editForce(obj_force1);\r\n                firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n            };\r\n\r\n            var displayDegreesValue = function (value) {\r\n                return BABYLON.Tools.ToDegrees(value) | 0;\r\n            }\r\n\r\n            var displayMValue = function (value) {\r\n                return Math.floor(value);\r\n            }\r\n\r\n            // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n            function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                //Shape profile in XY plane\r\n                const myShape = [];\r\n                const arrowRadius = 0.5;\r\n                var n = 30;\r\n                var deltaAngle = 2 * Math.PI / n\r\n                for (let i = 0; i <= n; i++) {\r\n                    myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                }\r\n                myShape.push(myShape[0]);  //close profile\r\n\r\n                const arrowHeadLength = 1.5;\r\n                const arrowHeadMaxSize = 1.5;\r\n                const arrowLength = 10;\r\n                const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                arrowDirection.normalize();\r\n\r\n                const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                const myPath = [];\r\n                myPath.push(arrowStart);\r\n                myPath.push(arrowBodyEnd);\r\n                myPath.push(arrowBodyEnd)\r\n                myPath.push(arrowHeadEnd);\r\n\r\n                const scaling = (index, distance) => {\r\n                    switch (index) {\r\n                        case 0:\r\n                        case 1:\r\n                            return 1\r\n                            break\r\n                        case 2:\r\n                            return arrowHeadMaxSize / arrowRadius\r\n                            break\r\n                        case 3:\r\n                            return 0\r\n                            break\r\n                    }\r\n                };\r\n\r\n                let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE }, scene);\r\n\r\n                //arrow.scalingDeterminant=0.2\r\n\r\n                var button1 = {}\r\n\r\n                const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                    const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                    const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    const arrowStart = path[0];\r\n\r\n                    let arrowDirection = path[1].subtract(path[0]);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    path[1] = arrowBodyEnd;\r\n                    path[2] = arrowBodyEnd;\r\n                    path[3] = arrowHeadEnd;\r\n\r\n                    BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                    var middlepoint = arrowBodyEnd;\r\n                    middlepoint.x = (middlepoint.x / 2)\r\n                    middlepoint.y = (middlepoint.y / 2)\r\n                    middlepoint.z = (middlepoint.z / 2)\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 3,\r\n                        height: 3\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = arrow;\r\n                    plane.scalingDeterminant = length;\r\n\r\n                    plane.position = middlepoint;\r\n                    plane.position.y = 2 * length;\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 3;\r\n                    button1.height = 3;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 400;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n                        impulsewTransform(mesh);\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n\r\n\r\n                }\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = arrowDirection;\r\n                var impulseMagnitude = force;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                var editForce = function (force) {\r\n                    impulseMagnitude = force;\r\n                }\r\n\r\n                var impulse = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                }\r\n\r\n                var impulsewTransform = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                }\r\n\r\n                arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                if (mesh) {\r\n\r\n                    //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                    //arrow.parent =mesh;\r\n                    //CoT.parent =mesh;\r\n\r\n                    //arrow.parent= CoT;\r\n                    //CoT.scalingDeterminant=0.2;\r\n\r\n                    arrow.parent = mesh;\r\n                    arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                    arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                function activate() {\r\n\r\n                    impulsewTransform(mesh);\r\n                }\r\n\r\n                var returnee = {\r\n                    activate: activate,\r\n                    button: button1,\r\n                    editForce: editForce,\r\n\r\n                }\r\n\r\n\r\n                return returnee;\r\n            }\r\n            function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                if (objmass == null) {\r\n\r\n                } else {\r\n                    mesh.physicsImpostor.mass = objmass;\r\n\r\n                }\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 1,\r\n                    height: 1\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n                plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                plane.parent = mesh;\r\n                //plane.scalingDeterminant=scale;\r\n                plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                //plane.position=middlepoint;\r\n                plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.color = \"white\";\r\n                button1.fontSize = 300;\r\n                button1.background = \"green\";\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    // alert(\"you did it!\");\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n                return button1;\r\n            }\r\n            function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 1,\r\n                    height: 1\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n                plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                plane.parent = mesh;\r\n                //plane.scalingDeterminant=scale;\r\n                plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                //plane.position=middlepoint;\r\n                plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.color = \"white\";\r\n                button1.fontSize = 300;\r\n                button1.background = \"green\";\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    //alert(\"you did it!\");\r\n                    //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n                return button1;\r\n            }\r\n\r\n            // OTHER IMPORTANT FUNCTIONS \r\n            var transformForce = function (mesh, vec) {\r\n                var mymatrix = new BABYLON.Matrix();\r\n                mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n            };\r\n\r\n            function getAccel(force, mass) {\r\n\r\n                if (mass == 0) {\r\n\r\n                    return 0;\r\n\r\n                } else {\r\n\r\n                    var accel = (force / mass)\r\n\r\n                    return accel\r\n                }\r\n\r\n            }\r\n\r\n\r\n            var button = GUI.Button.CreateImageOnlyButton(\"but\", \"images/pressme.png\")\r\n            button.color = \"transparent\"\r\n\r\n            //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n            var button_panel = new XRDisplayPlane(0.5, 0.3, true, true, scene)\r\n            button_panel.addControl(button);\r\n\r\n            button_panel.setScaleToInPixels(300, 160)\r\n            button_panel.displayPlane.position.set(-.25, .5, .5);\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(button_panel.displayPlane)\r\n\r\n\r\n            var switchmode = 1;\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        ExecuteButton();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeAll();\r\n                        createAll();\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        function logicbox1() {\r\n            var defaultmeshes = [];\r\n\r\n            var box;\r\n            var stickman;\r\n\r\n            var fisrtArrowStart = new BABYLON.Vector3(0, 0, -0.5);\r\n            var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n            var secondArrowStart = new BABYLON.Vector3(0, 0, 0.5);\r\n            var secondArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n            //Impulse Settings\r\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n            var impulseMagnitude = 5;\r\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n            //arrowdata();\r\n\r\n            var obj_force1 = 15;\r\n\r\n            var obj_mass = 8;\r\n\r\n            var obj_totalforce = (obj_force1);\r\n\r\n            var obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n            var onDisplay_accel = \"?\"\r\n            var onDisplay_force = \"?\"\r\n            var onDisplay_mass = obj_mass;\r\n\r\n            var firstarrow;\r\n            var secondarrow;\r\n            var setMass;\r\n            var setAccel;\r\n\r\n            async function createStickManWithBox2() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 5, }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                var stickman = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"stickman.gltf\", scene));\r\n\r\n                var stickmanmesh = stickman.meshes;\r\n\r\n                stickmanmesh[0].scaling.scaleInPlace(0.05);\r\n                stickmanmesh[0].position.set(-.5, .33, 0);\r\n\r\n\r\n                var stickmancollider = BABYLON.MeshBuilder.CreateBox(\"stickman2\", { height: stickmanmesh[1].height, width: stickmanmesh[1].width, depth: stickmanmesh[1].depth }, scene);\r\n\r\n                attachToCollider(stickmanmesh, 0, stickmancollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n                stickmancollider.physicsImpostor.friction = 1;\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(stickmancollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n                var materialRed = new BABYLON.StandardMaterial(\"redcolor\", scene)\r\n                materialRed.diffuseColor = new BABYLON.Color3.Red()\r\n                stickmanmesh[1].material = materialRed;\r\n\r\n                defaultmeshes.push(stickmanmesh);\r\n                defaultmeshes.push(stickmancollider);\r\n\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(stickmanmesh);\r\n                section_infodisplay.logicManager.AddDisposableStuff(stickmancollider);\r\n\r\n\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"wood_box_2\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, 0);\r\n                box.material = materialWood;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n\r\n                var tope = BABYLON.MeshBuilder.CreateBox(\"tope\", { width: 0.4, height: 0.4, depth: 2 }, scene)\r\n                tope.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                tope.position = new BABYLON.Vector3(-.5, 0, -1.10);\r\n                rotatewithgrades(tope, 90);\r\n\r\n                tope.physicsImpostor = new BABYLON.PhysicsImpostor(tope, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 100 }, scene);\r\n                tope.physicsImpostor.friction = 1\r\n\r\n\r\n                defaultmeshes.push(box);\r\n                defaultmeshes.push(tope);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n                section_infodisplay.logicManager.AddDisposableStuff(tope);\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            function createAll() {\r\n\r\n                createStickManWithBox2().then(() => {\r\n\r\n                    box = scene.getMeshByName(\"wood_box_2\");\r\n                    stickman = scene.getMeshByName(\"stickman2\");\r\n\r\n                    firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", 90, box, obj_force1);\r\n                    secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2, + obj_force1 + \" N\", -90, stickman, obj_force1);\r\n\r\n                    setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", box, obj_mass);\r\n                    setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n                    setAccel.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = \"?\"\r\n                        setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n\r\n                    firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                        setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                        onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                    })\r\n\r\n\r\n                })\r\n\r\n\r\n\r\n            }\r\n\r\n            createAll();\r\n\r\n\r\n\r\n            function ExecuteButton() {\r\n\r\n                onDisplay_accel = (obj_accel).toFixed(3).toString();\r\n                setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                onDisplay_force = (obj_totalforce).toFixed(3).toString();\r\n\r\n                //RefreshDataInMilisecs(200,25)\r\n                stickman = scene.getMeshByName(\"stickman2\");\r\n                firstarrow.activate();\r\n                if (stickman.physicsImpostor) {\r\n                    stickman.physicsImpostor.applyImpulse(transformForce(stickman, impulseDirection).scale(impulseMagnitude), stickman.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n                }\r\n\r\n            }\r\n\r\n            function disposeAll() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n\r\n            }\r\n\r\n\r\n\r\n            var changeForce1 = function (force) {\r\n\r\n                obj_force1 = Math.floor(force);\r\n                obj_totalforce = obj_force1;\r\n                onDisplay_force = obj_totalforce;\r\n                obj_accel = getAccel(obj_totalforce, obj_mass);\r\n                firstarrow.editForce(obj_force1);\r\n                firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n            };\r\n\r\n            var displayDegreesValue = function (value) {\r\n                return BABYLON.Tools.ToDegrees(value) | 0;\r\n            }\r\n\r\n            var displayMValue = function (value) {\r\n                return Math.floor(value);\r\n            }\r\n\r\n\r\n            // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n            function arrowForce(arrowStart, arrowDirection, scale, length, data, datarotation, mesh, force) {\r\n\r\n                var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                //Shape profile in XY plane\r\n                const myShape = [];\r\n                const arrowRadius = 0.5;\r\n                var n = 30;\r\n                var deltaAngle = 2 * Math.PI / n\r\n                for (let i = 0; i <= n; i++) {\r\n                    myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                }\r\n                myShape.push(myShape[0]);  //close profile\r\n\r\n                const arrowHeadLength = 1.5;\r\n                const arrowHeadMaxSize = 1.5;\r\n                const arrowLength = 10;\r\n                const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                arrowDirection.normalize();\r\n\r\n                const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                const myPath = [];\r\n                myPath.push(arrowStart);\r\n                myPath.push(arrowBodyEnd);\r\n                myPath.push(arrowBodyEnd)\r\n                myPath.push(arrowHeadEnd);\r\n\r\n                const scaling = (index, distance) => {\r\n                    switch (index) {\r\n                        case 0:\r\n                        case 1:\r\n                            return 1\r\n                            break\r\n                        case 2:\r\n                            return arrowHeadMaxSize / arrowRadius\r\n                            break\r\n                        case 3:\r\n                            return 0\r\n                            break\r\n                    }\r\n                };\r\n\r\n                let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE }, scene);\r\n\r\n                //arrow.scalingDeterminant=0.2\r\n\r\n                var button1 = {}\r\n\r\n                const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                    const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                    const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    const arrowStart = path[0];\r\n\r\n                    let arrowDirection = path[1].subtract(path[0]);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    path[1] = arrowBodyEnd;\r\n                    path[2] = arrowBodyEnd;\r\n                    path[3] = arrowHeadEnd;\r\n\r\n                    BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow }, scene);\r\n\r\n                    var middlepoint = arrowBodyEnd;\r\n                    middlepoint.x = (middlepoint.x / 2)\r\n                    middlepoint.y = (middlepoint.y / 2)\r\n                    middlepoint.z = (middlepoint.z / 2)\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 3,\r\n                        height: 3\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (datarotation * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = arrow;\r\n                    plane.scalingDeterminant = length;\r\n\r\n                    plane.position = middlepoint;\r\n                    plane.position.y = 2 * length;\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 3;\r\n                    button1.height = 3;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 400;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n                        impulsewTransform(mesh);\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n\r\n\r\n                }\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = arrowDirection;\r\n                var impulseMagnitude = force;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                var editForce = function (force) {\r\n                    impulseMagnitude = force;\r\n                }\r\n\r\n                var impulse = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                }\r\n\r\n                var impulsewTransform = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                }\r\n\r\n                arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                if (mesh) {\r\n\r\n                    //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                    //arrow.parent =mesh;\r\n                    //CoT.parent =mesh;\r\n\r\n                    //arrow.parent= CoT;\r\n                    //CoT.scalingDeterminant=0.2;\r\n\r\n                    arrow.parent = mesh;\r\n                    arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                    arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                function activate() {\r\n\r\n                    impulsewTransform(mesh);\r\n                }\r\n\r\n                var returnee = {\r\n                    activate: activate,\r\n                    button: button1,\r\n                    editForce: editForce,\r\n\r\n                }\r\n\r\n\r\n                return returnee;\r\n            }\r\n            function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                if (objmass == null) {\r\n\r\n                } else {\r\n                    mesh.physicsImpostor.mass = objmass;\r\n\r\n                }\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 1,\r\n                    height: 1\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n                plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                plane.parent = mesh;\r\n                //plane.scalingDeterminant=scale;\r\n                plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                //plane.position=middlepoint;\r\n                plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.color = \"white\";\r\n                button1.fontSize = 300;\r\n                button1.background = \"green\";\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    // alert(\"you did it!\");\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n                return button1;\r\n            }\r\n            function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 1,\r\n                    height: 1\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n                plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                plane.parent = mesh;\r\n                //plane.scalingDeterminant=scale;\r\n                plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                //plane.position=middlepoint;\r\n                plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.color = \"white\";\r\n                button1.fontSize = 300;\r\n                button1.background = \"green\";\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    //alert(\"you did it!\");\r\n                    //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n                return button1;\r\n            }\r\n\r\n            // OTHER IMPORTANT FUNCTIONS \r\n            var transformForce = function (mesh, vec) {\r\n                var mymatrix = new BABYLON.Matrix();\r\n                mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n            };\r\n\r\n            function getAccel(force, mass) {\r\n\r\n                if (mass == 0) {\r\n\r\n                    return 0;\r\n\r\n                } else {\r\n\r\n                    var accel = (force / mass)\r\n\r\n                    return accel\r\n                }\r\n\r\n            }\r\n\r\n\r\n            var button = GUI.Button.CreateImageOnlyButton(\"but\", \"images/pressme.png\")\r\n            button.color = \"transparent\"\r\n\r\n            //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n            var button_panel = new XRDisplayPlane(0.5, 0.3, true, true, scene)\r\n            button_panel.addControl(button);\r\n\r\n            button_panel.setScaleToInPixels(300, 160)\r\n            button_panel.displayPlane.position.set(-.25, .5, .5);\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(button_panel.displayPlane)\r\n            var switchmode = 1;\r\n\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        ExecuteButton();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeAll();\r\n                        createAll();\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        var OnscreenTimer = new Timer();\r\n\r\n        function card4_exercises() {\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n\r\n\r\n            var exercise_quizdisplay = XRQuizDisplay(scene, 1, true);\r\n            exercise_quizdisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_quizdisplay.displayPlane.position.x -= 0.3\r\n            exercise_quizdisplay.displayPlane.position.y += 0.5\r\n\r\n            //PROBANDO CONTAINERS SOBRE EL CARD MANAGER\r\n\r\n            //var exercise_quizdisplay = NormalQuizdisplay(scene);\r\n\r\n            //var temp = section_infodisplay.getCurrentCard();\r\n            //temp.info_image_container.addControl(exercise_quizdisplay.container)\r\n\r\n            //\r\n\r\n            var exercise_datadisplay = XRDinamicsDataDisplay(scene, 1, true)\r\n            exercise_datadisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_datadisplay.displayPlane.position.x -= 0.3\r\n            exercise_datadisplay.displayPlane.position.z -= 2.4\r\n            exercise_datadisplay.displayPlane.position.y += 0.4\r\n\r\n            var exercise_control = XRControlDisplay(scene, 1, true)\r\n            exercise_control.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_control.displayPlane.position.x -= 0.3\r\n            exercise_control.displayPlane.position.z += 2.4\r\n            exercise_control.displayPlane.position.y += 0.4\r\n\r\n            exercise_datadisplay.addFormulaImage(\"/images/equ2-1.png\")\r\n\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_quizdisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_datadisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_control.displayPlane);\r\n\r\n\r\n\r\n            exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index--\r\n\r\n                if (loaded_exercise_index < 0) {\r\n                    loaded_exercise_index++;\r\n                } if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n\r\n                }\r\n\r\n            });\r\n\r\n            exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index++;\r\n\r\n                if (loaded_exercise_index > quizesList.length - 1) {\r\n                    loaded_exercise_index--;\r\n                }\r\n                if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n\r\n                }\r\n\r\n            });\r\n\r\n            exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\r\n\r\n                if (exercise_quizdisplay.getIsCorrect()) {\r\n\r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                    DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\r\n                    //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\r\n                    DataCapture.getQuizByID(currentQuiz).isCompleted = true;\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n                    QuizTimer.reset();\r\n\r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n\r\n                    } else {\r\n                        exercise_quizdisplay.correctPanel.show();\r\n                    }\r\n\r\n\r\n\r\n                } else {\r\n\r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                    DataCapture.addTotalError(currentQuiz);\r\n                    DataCapture.addQuizErrorByID(currentQuiz);\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n\r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n\r\n                    } else {\r\n                        exercise_quizdisplay.incorrectPanel.show();\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            exercise_control.button2.onPointerUpObservable.add(function () {\r\n\r\n                resource_manager.Reset();\r\n                QuizTimer.reset();\r\n\r\n            });\r\n\r\n\r\n            if (!OnscreenTimer.isRunning()) {\r\n                OnscreenTimer.start();\r\n            }\r\n\r\n            function isCompleted_Question_number() {\r\n\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                if (DataCapture.getQuizByID(currentQuiz).isCompleted) {\r\n                    return \" (Completada)\"\r\n                } else {\r\n                    return \"\"\r\n                }\r\n\r\n            }\r\n            function Check_Errors_number() {\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                return DataCapture.getQuizByID(currentQuiz).errors;\r\n            }\r\n            function Check_Timer_number() {\r\n\r\n                if (DataCapture.getExerciseData().isCompleted) {\r\n                    OnscreenTimer.pause();\r\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds) + \"\\n\" + \"Sección de preguntas finalizada!\"\r\n                } else {\r\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds)\r\n                }\r\n            }\r\n            function formatTime(time) {\r\n                if (time <= 9) {\r\n                    return \"0\" + time;\r\n                } else {\r\n                    return time;\r\n                }\r\n            }\r\n\r\n            var timer_errors_numbers = scene.onBeforeRenderObservable.add(() => {\r\n\r\n\r\n                exercise_quizdisplay.time_number.text = \"Tiempo: \" + Check_Timer_number();\r\n                exercise_quizdisplay.error_number.text = \"Errores: \" + Check_Errors_number();\r\n                exercise_quizdisplay.question_number.text = \"Pregunta: \" + (loaded_exercise_index + 1) + \"/\" + (quizesList.length) + isCompleted_Question_number();\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n            // Excercise Manager constructor function\r\n\r\n\r\n            function manageStuff() {\r\n\r\n\r\n\r\n                function addExercise(exercise) {\r\n                    exercise_list.push(exercise)\r\n                    quizesList.push(exercise.quiz);\r\n                }\r\n\r\n                function LoadQuiz(number) {\r\n                    exercise_quizdisplay.loadquiz(quizesList[number])\r\n                }\r\n\r\n                function Start(number) {\r\n                    loaded_exercise_index = number;\r\n                    exercise_list[number].Load_Models().then(function (meshes) {\r\n                        ClearStuff();\r\n                        loaded_meshes = meshes;\r\n\r\n                        if (exercise_list[number].Load_Logic) {\r\n\r\n                            exercise_list[number].Load_Logic();\r\n                            LoadQuiz(number);\r\n                            QuizTimer.reset();\r\n                        }\r\n\r\n\r\n\r\n\r\n                    });\r\n                }\r\n\r\n                function Reset() {\r\n\r\n                    Start(loaded_exercise_index);\r\n\r\n\r\n                }\r\n\r\n                exercise_control.button2.onPointerUpObservable.add(function () {\r\n                    Reset();\r\n                });\r\n\r\n                function ClearStuff() {\r\n\r\n                    exercise_control.clearObservers();\r\n                    exercise_control.clearItems();\r\n                    exercise_datadisplay.clearViewData();\r\n\r\n\r\n                    console.log(\"reseteando\");\r\n                    if (loaded_onBeforeRenderObservables != undefined) {\r\n\r\n                        loaded_onBeforeRenderObservables.forEach(value => {\r\n\r\n                            scene.onBeforeRenderObservable.remove(value);\r\n                        });\r\n\r\n                    }\r\n                    if (loaded_meshes != undefined) {\r\n\r\n                        loaded_meshes.forEach(value => {\r\n\r\n                            if (Array.isArray(value)) {\r\n                                value.forEach(value => value.dispose());\r\n                            } else { value.dispose(); }\r\n                        });\r\n\r\n                        // addSceneModels();\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                var manager = {\r\n                    addExercise,\r\n                    LoadQuiz,\r\n                    Start,\r\n                    Reset,\r\n                    ClearStuff,\r\n                }\r\n\r\n                return manager;\r\n\r\n            }\r\n\r\n\r\n\r\n            var resource_manager = manageStuff();\r\n\r\n\r\n\r\n            var quiz1 = new Exercise.exercise(\r\n                \"1.- ¿Cual de las siguientes combinaciones de fuerzas hará que la caja se quede en reposo?\",\r\n                [\"A) -8N, +10N\", \"B) -5N, +5N\", \"C) -5N, +3N\", \"D) -7N, +9N\"],\r\n                1,\r\n                [\"\"]);\r\n\r\n            var quiz2 = new Exercise.exercise(\r\n                \"2.- ¿Cual de la siguiente suma de fuerzas hará que la caja se mueva hacia adelante?\",\r\n                [\"A) +2N, +10N\", \"B) +5N, +6N\", \"C) +8N, +12N\", \"D) +1N, +11N\"],\r\n                2,\r\n                [\"NOTA: recuerda que necesitas sumar todas las fuerzas.\"]);\r\n\r\n            var quiz3 = new Exercise.exercise(\r\n                \"3.- ¿Cual de las siguientes combinaciones de fuerzas hará que el auto retroceda?\",\r\n                [\"A) -8N, +3N\", \"B) -7N, +9N\", \"C) -5N, 12N\", \"D) -3N, +8N\"],\r\n                0,\r\n                [\"NOTA: recuerda que necesitas sumar todas las fuerzas.\"]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n            async function loadBlueCarModel() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 25 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"bluecar.glb\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.1);\r\n                carmesh[0].position.set(-.5, .33, 0);\r\n\r\n\r\n                //busmeshes[0].rotationQuaternion=null;\r\n                //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n                //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n                //busmeshes[7].showBoundingBox = true;            \r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh);\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider);\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function loadRedCardModel() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 25 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"redcar.gltf\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.1);\r\n                carmesh[0].position.set(-1.5, .33, 0);\r\n\r\n\r\n                //busmeshes[0].rotationQuaternion=null;\r\n                //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n                //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n                //busmeshes[7].showBoundingBox = true;            \r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox2\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh);\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider);\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function createWoodBox() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"wood_box\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, 0);\r\n                box.material = materialWood;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n                defaultmeshes.push(box);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n\r\n\r\n                return defaultmeshes;\r\n            }\r\n\r\n            async function createMetalBox() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var materialMetal = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                materialMetal.diffuseTexture = new BABYLON.Texture(\"../textures/metal_crate.png\", scene);\r\n                materialMetal.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"metal_box\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, 0);\r\n                box.material = materialMetal;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n\r\n                defaultmeshes.push(box);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n\r\n                return defaultmeshes;\r\n            }\r\n\r\n            async function create2Boxes() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var materialMetal = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                materialMetal.diffuseTexture = new BABYLON.Texture(\"../textures/metal_crate.png\", scene);\r\n                materialMetal.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"metal_box\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-1.5, 0, -0.5);\r\n                box.material = materialMetal;\r\n\r\n                box.XRPickable = true;\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box2 = BABYLON.Mesh.CreateBox(\"wood_box\", 1, scene);\r\n                //box2.scaling=new BABYLON.Vector3(0.4,0.4,0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box2.position = new BABYLON.Vector3(0, 0, 2.3);\r\n                box2.material = materialWood;\r\n\r\n                //var cyl = BABYLON.Mesh.CreateCylinder(\"cylinder\", 1, 1, 1, 16, 1, scene);\r\n                //var url = \"https://upload.wikimedia.org/wikipedia/commons/e/e8/Woven_green_rope.jpg\";\r\n                //cyl.material = new BABYLON.StandardMaterial(\"mat\", scene);\r\n                //cyl.material.diffuseTexture = new BABYLON.Texture(url, scene);\r\n                //cyl.setPivotMatrix(BABYLON.Matrix.Translation(0, -.5, 0));\r\n                //cyl.scaling= new BABYLON.Vector3(0.1,0.1,0.1);\r\n                //cyl.scaling.y =1\r\n                //cyl.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(1, 0, 0), (90*(Math.PI/180)) );\r\n\r\n\r\n                //box2.XRPickable=true;\r\n\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                //box2.physicsImpostor= new BABYLON.PhysicsImpostor(box2,BABYLON.PhysicsImpostor.BoxImpostor,{mass:5},scene);\r\n\r\n                box2.parent = box;\r\n\r\n\r\n                var tube = new BABYLON.MeshBuilder.CreateTube(\"tube\", { path: [new BABYLON.Vector3(0, 0, 0), new BABYLON.Vector3(0, 0, 2.3)], radius: .05 }, scene);\r\n\r\n                tube.material = new BABYLON.StandardMaterial(\"mat\", scene);\r\n                tube.material.diffuseTexture = new BABYLON.Texture(\"../textures/rope_texture.jpg\", scene);\r\n                tube.parent = box;\r\n\r\n\r\n                //var distanceJoint = new BABYLON.DistanceJoint({ maxDistance: 10 });\r\n                //box.physicsImpostor.addJoint(box2.physicsImpostor, distanceJoint); \r\n\r\n                //var joint1 = new BABYLON.PhysicsJoint(BABYLON.PhysicsJoint.LockJoint, {});             \r\n                //box2.physicsImpostor.addJoint(box.physicsImpostor, joint1); \r\n\r\n                defaultmeshes.push(box);\r\n                defaultmeshes.push(box2);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n                section_infodisplay.logicManager.AddDisposableStuff(box2);\r\n\r\n                return defaultmeshes;\r\n            }\r\n\r\n\r\n\r\n\r\n            function logicbox2() {\r\n\r\n                var box = scene.getMeshByName(\"wood_box\");\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, -1.5);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                var secondArrowStart = new BABYLON.Vector3(0, 0, 1.5);\r\n                var secondArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var obj_force1 = 1;\r\n                var obj_force2 = 2;\r\n\r\n                var obj_mass = 8;\r\n\r\n                var obj_totalforce = (obj_force1 - obj_force2);\r\n\r\n                function getTotalForce() {\r\n\r\n                    obj_totalforce = (obj_force1 - obj_force2);\r\n\r\n                    return obj_totalforce;\r\n                }\r\n\r\n                getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", box, obj_force1);\r\n                var secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2, + obj_force2 + \" N\", box, obj_force2);\r\n\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", box, obj_mass);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n\r\n                function ExecuteButton() {\r\n\r\n\r\n                    onDisplay_accel = getAccel(getTotalForce(), obj_mass).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = getTotalForce().toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n                    secondarrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    firstarrow.editForce(obj_force1);\r\n                    firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var changeForce2 = function (force) {\r\n\r\n                    obj_force2 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    secondarrow.editForce(obj_force2);\r\n                    secondarrow.button.textBlock.text = obj_force2 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var forceGroup = new GUI.SliderGroup(\"Suma de fuerzas\", \"S\");\r\n                forceGroup.addSlider(\"Fuerza negativa\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n                forceGroup.addSlider(\"Fuerza positiva\", changeForce2, \"N\", 0, 20, obj_force2, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(forceGroup);\r\n                exercise_control.controlPanel.heightInPixels = 160;\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                // OTHER IMPORTANT FUNCTIONS \r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            function logicbox3() {\r\n                var box = scene.getMeshByName(\"metal_box\");\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0 - .25, 1.5);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var secondArrowStart = new BABYLON.Vector3(0, 0, -1.5);\r\n                var secondArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                var thirdArrowStart = new BABYLON.Vector3(0, 0.25, 1.5);\r\n                var thirdArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var obj_force1 = 1;\r\n                var obj_force2 = 13;\r\n                var obj_force3 = 2;\r\n\r\n                var obj_mass = 15;\r\n\r\n                var obj_totalforce = (obj_force1 - obj_force2 + obj_force3);\r\n\r\n                function getTotalForce() {\r\n\r\n                    obj_totalforce = (obj_force1 - obj_force2 + obj_force3);\r\n\r\n                    return obj_totalforce;\r\n                }\r\n\r\n                getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", box, obj_force1);\r\n                var secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2, + obj_force2 + \" N\", box, obj_force2);\r\n                var thirdarrow = arrowForce(thirdArrowStart, thirdArrowDirection, 0.02, 2, + obj_force3 + \" N\", box, obj_force3);\r\n\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", box, obj_mass);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n\r\n                function ExecuteButton() {\r\n\r\n\r\n                    onDisplay_accel = getAccel(getTotalForce(), obj_mass).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = getTotalForce().toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n                    secondarrow.activate();\r\n                    thirdarrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                thirdarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force3, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force3).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    firstarrow.editForce(obj_force1);\r\n                    firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var changeForce3 = function (force) {\r\n\r\n                    obj_force3 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    thirdarrow.editForce(obj_force3);\r\n                    thirdarrow.button.textBlock.text = obj_force3 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var forceGroup = new GUI.SliderGroup(\"Suma de fuerzas\", \"S\");\r\n                forceGroup.addSlider(\"Fuerza positiva 1\", changeForce3, \"N\", 0, 20, obj_force3, displayMValue)\r\n                forceGroup.addSlider(\"Fuerza positiva 2\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(forceGroup);\r\n                exercise_control.controlPanel.heightInPixels = 160;\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                // OTHER IMPORTANT FUNCTIONS \r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            function logicbox4() {\r\n                var box = scene.getMeshByName(\"carBox1\");\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, -1.5);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                var secondArrowStart = new BABYLON.Vector3(0, 0, 1.5);\r\n                var secondArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var obj_force1 = 1;\r\n                var obj_force2 = 2;\r\n\r\n                var obj_mass = 4;\r\n\r\n                var obj_totalforce = (obj_force1 - obj_force2);\r\n\r\n                function getTotalForce() {\r\n\r\n                    obj_totalforce = (obj_force1 - obj_force2);\r\n\r\n                    return obj_totalforce;\r\n                }\r\n\r\n                getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", box, obj_force1);\r\n                var secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2, + obj_force2 + \" N\", box, obj_force2);\r\n\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", box, obj_mass);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n\r\n                function ExecuteButton() {\r\n\r\n\r\n                    onDisplay_accel = getAccel(getTotalForce(), obj_mass).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = getTotalForce().toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n                    secondarrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    firstarrow.editForce(obj_force1);\r\n                    firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var changeForce2 = function (force) {\r\n\r\n                    obj_force2 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    secondarrow.editForce(obj_force2);\r\n                    secondarrow.button.textBlock.text = obj_force2 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var forceGroup = new GUI.SliderGroup(\"Suma de fuerzas\", \"S\");\r\n                forceGroup.addSlider(\"Fuerza positiva\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n                forceGroup.addSlider(\"Fuerza negativa\", changeForce2, \"N\", 0, 20, obj_force2, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(forceGroup);\r\n                exercise_control.controlPanel.heightInPixels = 160;\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                // OTHER IMPORTANT FUNCTIONS \r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            quiz1.addModels(createWoodBox)\r\n            quiz1.addLogic(logicbox2)\r\n\r\n            quiz2.addModels(createMetalBox)\r\n            quiz2.addLogic(logicbox3)\r\n\r\n            quiz3.addModels(loadBlueCarModel)\r\n            quiz3.addLogic(logicbox4)\r\n\r\n\r\n            resource_manager.addExercise(quiz1);\r\n            resource_manager.addExercise(quiz2);\r\n            resource_manager.addExercise(quiz3);\r\n\r\n\r\n            resource_manager.Start(loaded_exercise_index)\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        var loader = new BABYLON.AssetsManager(scene);\r\n\r\n        loader.onFinish = function () {\r\n    \r\n            engine.runRenderLoop(() => {\r\n                if (scene) {\r\n                    window.document.title = engine.getFps().toFixed() + \" fps\";\r\n                    scene.render();\r\n    \r\n                }\r\n            });\r\n        };\r\n    \r\n        scene.executeWhenReady(function () {\r\n    \r\n            engine.hideLoadingUI();\r\n    \r\n            if (document.getElementById(\"xr-button\")) {\r\n                let XRbutton = document.getElementById(\"xr-button\");\r\n    \r\n                XRbutton.addEventListener(\"click\", async function () {\r\n    \r\n                    if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\r\n    \r\n                        xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\r\n                        xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\r\n                        await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\r\n    \r\n                    } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\r\n                        await xr.baseExperience.exitXRAsync()\r\n                    }\r\n                });\r\n    \r\n            }\r\n    \r\n    \r\n            if (document.getElementById(\"fullscreen-button\")) {\r\n                let button = document.getElementById(\"fullscreen-button\")\r\n    \r\n                button.addEventListener(\"click\", async function () {\r\n                    //engine.enterFullScreen(true);\r\n    \r\n                    engine.switchFullscreen(false);\r\n                })\r\n            }\r\n    \r\n        });\r\n    \r\n    \r\n        loader.load();\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth='xl'>\r\n\r\n                {/*<WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />*/}\r\n\r\n\r\n                <Box width=\"100%\" p={1} my={0.5}>\r\n                    <BabylonScene onSceneMount={onSceneMount} />\r\n                </Box>\r\n\r\n\r\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\r\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\r\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\r\n                    </Button>\r\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\r\n                        <Typography variant=\"h6\">pantalla completa</Typography>\r\n                    </Button>\r\n                </Container>\r\n\r\n\r\n\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ExercisePage","export default __webpack_public_path__ + \"static/media/card1.df54543e.PNG\";","export default __webpack_public_path__ + \"static/media/card2.a24eaad9.PNG\";","export default __webpack_public_path__ + \"static/media/card3.14b9823e.PNG\";","export default __webpack_public_path__ + \"static/media/alert2.2455318f.png\";","export default __webpack_public_path__ + \"static/media/cardboard.ca4cc733.png\";","import React, { Component, useRef } from 'react'\r\nimport Main from '../../WebLayout/Main';\r\nimport * as BABYLON from 'babylonjs';\r\nimport BabylonScene from '../../BabylonScene/'; // import the component above linking to file we just created.\r\nimport * as GUI from 'babylonjs-gui';\r\nimport 'babylonjs-loaders';\r\n\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box'\r\n\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nimport { Timer } from \"easytimer.js\";\r\n\r\n\r\nimport { Container, Button } from '@material-ui/core';\r\n\r\nimport { useAuth } from '../../Contexts/AuthContext'\r\n\r\n\r\nimport * as Ground from '../../BabylonScene/components/Ground'\r\n\r\nimport * as Exercise from '../../BabylonScene/components/exercise'\r\n\r\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\r\n\r\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\r\n\r\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\r\n\r\n//import WebCam from '../../EmotionRecognition_Components/WebCam'\r\n//import * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\r\n\r\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\r\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\r\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\r\n\r\nimport XRDisplayPlane from '../../FisicARtivo_Components/XRDisplayPlane';\r\n\r\nimport NormalQuizdisplay from '../../FisicARtivo_Components/NormalQuizDisplay'\r\n\r\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\r\n\r\nimport card1 from '../exercise_2_3/resources/card1.PNG'\r\nimport card2 from '../exercise_2_3/resources/card2.PNG'\r\nimport card3 from '../exercise_2_3/resources/card3.PNG'\r\nimport alert2 from  '../exercise_2_3/resources/alert2.png'\r\nimport cardboard from '../exercise_2_3/resources/cardboard.png'\r\n\r\nclass ExercisePage extends Component {\r\n    render() {\r\n        return (\r\n            <Main data={GetMainContent} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imagebox: {\r\n        //backgroundImage: 'url(' + drawerImage + ')',   \r\n        height: '100%',\r\n        width: '60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    card: {\r\n        height: '100%',\r\n\r\n        flexDirection: 'column',\r\n    },\r\n    media: {\r\n        height: 400,\r\n\r\n    },\r\n    babylonbuttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n\r\n    },\r\n}));\r\n\r\nfunction GetMainContent() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { currentUser } = useAuth();\r\n\r\n    //const webcam = useRef({});\r\n\r\n    var exerciseData ={\r\n        id:'exercise_2_3',\r\n        generalTime:'00:00',\r\n        totalErrors: 0,\r\n        isCompleted: false,\r\n        quizes:{\r\n            quiz_1:{\r\n                id:'quiz_1',\r\n                time:'00:00',\r\n                errors:0,\r\n                isCompleted:false\r\n            },\r\n            quiz_2:{\r\n                id:'quiz_2',\r\n                time:'00:00',\r\n                errors:0,\r\n                isCompleted:false\r\n            },\r\n            quiz_3:{\r\n                id:'quiz_3',\r\n                time:'00:00',\r\n                errors:0,\r\n                isCompleted:false\r\n            },\r\n            quiz_4:{\r\n                id:'quiz_4',\r\n                time:'00:00',\r\n                errors:0,\r\n                isCompleted:false\r\n            },\r\n            quiz_5:{\r\n                id:'quiz_5',\r\n                time:'00:00',\r\n                errors:0,\r\n                isCompleted:false\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    DataCapture.setCurrentUser(currentUser);\r\n\r\n    DataCapture.setExerciseData(exerciseData);\r\n\r\n    DataCapture.checkUserExerciseData(exerciseData.id);\r\n\r\n    DataCapture.globalTimer.start();\r\n\r\n    //EmotionsAPI.setCurrentUser(currentUser);\r\n\r\n    //EmotionsAPI.loadModels();\r\n\r\n    /*async function takeCapture() {\r\n        webcam.current.takeCapture();\r\n    }\r\n    async function stopCamera() {\r\n        webcam.current.stopCamera();\r\n    }\r\n\r\n    async function startCamera() {\r\n        webcam.current.startCamera();\r\n    }*/\r\n\r\n    var onSceneMount = (e: SceneEventArgs) => {\r\n        const { canvas, scene, engine } = e;\r\n\r\n        engine.displayLoadingUI();\r\n\r\n        const QuizTimer = new Timer();\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\r\n        const camera_initialPos = new BABYLON.Vector3(-4, 1.5, 0);\r\n        const camera_initialTarget = new BABYLON.Vector3(0, 1, 0);\r\n        const camera_speed = 0.7;\r\n        const camera_angularSensibility = 1200;\r\n\r\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(camera_initialTarget);\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, false);\r\n\r\n        camera.speed = camera_speed;\r\n        camera.angularSensibility = camera_angularSensibility;\r\n        camera.inertia=.5;\r\n\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 0.7;\r\n\r\n        // Light\r\n        //const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\r\n        //light.intensity = 0.9;\r\n\r\n        // Skybox\r\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\r\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\r\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n\r\n\r\n        // physics\r\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\r\n\r\n        var physicsEngine = scene.getPhysicsEngine();\r\n        //physicsEngine.setSubTimeStep(1);\r\n\r\n\r\n        // Enable Collisions\r\n        scene.collisionsEnabled = true;\r\n\r\n        //Then apply collisions and gravity to the active camera\r\n        camera.checkCollisions = true;\r\n        camera.applyGravity = true;\r\n\r\n        //Set the ellipsoid around the camera (e.g. your player's size)\r\n        camera.ellipsoid = new BABYLON.Vector3(1, .8, 1);\r\n\r\n        var ground = Ground.createPlayGroundGigant(scene);\r\n\r\n\r\n        //var ground= Ground.createPlayGroundLarge(scene);\r\n\r\n        //finally, say which mesh will be collisionable\r\n        ground.checkCollisions = true;\r\n\r\n\r\n        //addSceneModels();\r\n        var xr = {};\r\n\r\n\r\n        async function XRmode() {\r\n\r\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\r\n\r\n            xr = await scene.createDefaultXRExperienceAsync({\r\n\r\n\r\n                disableDefaultUI: true,\r\n                //floorMeshes: [ground],\r\n                uiOptions: {\r\n\r\n                    sessionMode: \"immersive-ar\"\r\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\r\n                    , referenceSpaceType: \"local-floor\"\r\n                },\r\n                inputOptions: { doNotLoadControllerMeshes: false }\r\n            });\r\n\r\n\r\n\r\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\r\n                    // floor is at y === 2\r\n                    camera.y = 2;\r\n                \r\n                });*/\r\n\r\n\r\n\r\n          \r\n\r\n           \r\n            xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\r\n                    ground.visibility = 0;\r\n                    skybox.isVisible = false;\r\n                    //GUI_controller.createXRGui();\r\n                    //stopCamera();\r\n                    //EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\r\n                    ground.visibility = 1;\r\n                    skybox.isVisible = true;\r\n                    //GUI_controller.createNormalGui();\r\n                    //startCamera();\r\n                    //EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n        }\r\n\r\n        XRmode();\r\n\r\n     \r\n\r\n\r\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\r\n        gizmoManager.selectMode(0);\r\n\r\n\r\n        var pickedMesh = null;\r\n        var attachedMesh = null;\r\n        var pressed =null\r\n\r\n        //observables generales globales para picking meshes\r\n\r\n        scene.onPointerObservable.addOnce(pointerinfo => {\r\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\r\n                QuizTimer.start();\r\n            }\r\n        })\r\n\r\n        scene.onPointerObservable.add((pointerInfo) => {\r\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n\r\n            //if (pointerInfo.type === 4) {\r\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\r\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\r\n            // }\r\n            //}\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n\r\n                    scene.constantlyUpdateMeshUnderPointer = true;\r\n\r\n                    pressed = true;\r\n\r\n                    attachedMesh = pickedMesh;\r\n\r\n                    gizmoManager.attachToMesh(attachedMesh);\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                    attachedMesh = null;\r\n                    gizmoManager.attachToMesh(null);\r\n                }\r\n\r\n            }\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\r\n\r\n                scene.constantlyUpdateMeshUnderPointer = false;\r\n                \r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                   \r\n                    // pickedMesh.physicsImpostor.wakeUp();\r\n                    pressed = false;\r\n                    //pickedMesh.physicsImpostor.dispose();\r\n                    //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\r\n\r\n                    pickedMesh = null;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scene.onBeforePhysicsObservable.add(() => {\r\n            \r\n            if (pressed &&pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\r\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\r\n            }\r\n\r\n\r\n        });\r\n\r\n       \r\n\r\n        scene.registerBeforeRender(() => {\r\n\r\n            /* if(xr) {\r\n                 if(xr.input.controllers.length) {\r\n         \r\n                     const c = xr.input.controllers[0];\r\n                     \r\n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\r\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\r\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\r\n                     laserPointer.position.copyFrom(c.pointer.position);\r\n                    \r\n                     laserPointer.parent = xr.baseExperience.container;\r\n                 }\r\n             }*/\r\n        })\r\n\r\n        //DATA DISPLAY COMPONENTS\r\n\r\n        var info_card1 = new ImageInfoCard(\"card1\", card1);\r\n        var info_card2 = new ImageInfoCard(\"card2\", card2);\r\n        var info_card3 = new ImageInfoCard(\"card3\", card3);\r\n        var alert_card = new ImageInfoCard('alert', alert2);\r\n        var info_card4 = new ImageInfoCard(\"card4\", cardboard);\r\n\r\n\r\n        info_card1.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            logicbox1();\r\n        })\r\n\r\n\r\n        info_card2.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            logicbox2();\r\n           \r\n        });\r\n\r\n\r\n        alert_card.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n\r\n        })\r\n\r\n\r\n        info_card4.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card4_exercises();\r\n\r\n        })\r\n\r\n\r\n        var section_infodisplay = InfoDisplay(scene, 2);\r\n        //var local_pos = new BABYLON.Vector3(0, 1, 0);\r\n\r\n        //section_infodisplay.displayPlane.position = local_pos; //position sphere relative to world\r\n\r\n        section_infodisplay.addCard(info_card1);\r\n        section_infodisplay.addCard(info_card2);\r\n        section_infodisplay.addCard(info_card3);\r\n        section_infodisplay.addCard(alert_card);\r\n        section_infodisplay.addCard(info_card4);\r\n       \r\n\r\n        section_infodisplay.Start(0);\r\n\r\n\r\n\r\n        //declarate initial values \r\n\r\n\r\n        var loaded_exercise_index = 0;\r\n\r\n        \r\n        function logicbox1() {\r\n\r\n            var defaultmeshes = [];\r\n            var box;\r\n\r\n            var fisrtArrowStart = new BABYLON.Vector3(0, 0, 1.5);\r\n            var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n            //Impulse Settings\r\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n            var impulseMagnitude = 5;\r\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n            //arrowdata();\r\n            var obj_force1 = 15;\r\n            var obj_mass = 8;\r\n            var obj_totalforce = (obj_force1);\r\n\r\n            var obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n            var onDisplay_accel = \"?\"\r\n            var onDisplay_force = \"?\"\r\n            var onDisplay_mass = obj_mass;\r\n\r\n            var firstarrow;\r\n            var setMass;\r\n            var setAccel;\r\n\r\n\r\n            async function createStickManWithBox() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 5, friction: 10 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"wood_box_1\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, 0);\r\n                box.material = materialWood;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n                defaultmeshes.push(box);\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n\r\n\r\n            }\r\n\r\n            function createAll() {\r\n\r\n                createStickManWithBox().then(() => {\r\n\r\n                    box = scene.getMeshByName(\"wood_box_1\");\r\n\r\n                    firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2,\"Fuerza: \" + obj_force1 + \" N\", box, obj_force1);\r\n                    setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15,\"Masa: \"+ obj_mass + \" Kg\", box, obj_mass);\r\n                    setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\" , box, null)\r\n\r\n                    setAccel.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = (\"Aceleracion:\"+\"\\n\"+\"?\")\r\n                        setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n\r\n                    firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                        setAccel.textBlock.text = \"Aceleracion:\"+\"\\n\"+ onDisplay_accel + \" m/s^2\";\r\n\r\n                        onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                    })\r\n\r\n                })\r\n\r\n\r\n\r\n            }\r\n\r\n            createAll();\r\n\r\n\r\n            function disposeAll() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n\r\n            }\r\n\r\n\r\n            function ExecuteButton() {\r\n\r\n\r\n                onDisplay_accel = (obj_accel).toFixed(3).toString();\r\n                setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                onDisplay_force = (obj_totalforce).toFixed(3).toString();\r\n\r\n                //RefreshDataInMilisecs(200,25)\r\n\r\n                firstarrow.activate();\r\n\r\n            }\r\n\r\n\r\n            var changeForce1 = function (force) {\r\n\r\n                obj_force1 = Math.floor(force);\r\n                obj_totalforce = obj_force1;\r\n                onDisplay_force = obj_totalforce;\r\n                obj_accel = getAccel(obj_totalforce, obj_mass);\r\n                firstarrow.editForce(obj_force1);\r\n                firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n            };\r\n\r\n            var displayDegreesValue = function (value) {\r\n                return BABYLON.Tools.ToDegrees(value) | 0;\r\n            }\r\n\r\n            var displayMValue = function (value) {\r\n                return Math.floor(value);\r\n            }\r\n\r\n            // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n            function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                //Shape profile in XY plane\r\n                const myShape = [];\r\n                const arrowRadius = 0.5;\r\n                var n = 30;\r\n                var deltaAngle = 2 * Math.PI / n\r\n                for (let i = 0; i <= n; i++) {\r\n                    myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                }\r\n                myShape.push(myShape[0]);  //close profile\r\n\r\n                const arrowHeadLength = 1.5;\r\n                const arrowHeadMaxSize = 1.5;\r\n                const arrowLength = 10;\r\n                const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                arrowDirection.normalize();\r\n\r\n                const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                const myPath = [];\r\n                myPath.push(arrowStart);\r\n                myPath.push(arrowBodyEnd);\r\n                myPath.push(arrowBodyEnd)\r\n                myPath.push(arrowHeadEnd);\r\n\r\n                const scaling = (index, distance) => {\r\n                    switch (index) {\r\n                        case 0:\r\n                        case 1:\r\n                            return 1\r\n                            break\r\n                        case 2:\r\n                            return arrowHeadMaxSize / arrowRadius\r\n                            break\r\n                        case 3:\r\n                            return 0\r\n                            break\r\n                    }\r\n                };\r\n\r\n                let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE }, scene);\r\n\r\n                //arrow.scalingDeterminant=0.2\r\n\r\n                var button1 = {}\r\n\r\n                const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                    const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                    const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    const arrowStart = path[0];\r\n\r\n                    let arrowDirection = path[1].subtract(path[0]);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    path[1] = arrowBodyEnd;\r\n                    path[2] = arrowBodyEnd;\r\n                    path[3] = arrowHeadEnd;\r\n\r\n                    BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                    var middlepoint = arrowBodyEnd;\r\n                    middlepoint.x = (middlepoint.x / 2)\r\n                    middlepoint.y = (middlepoint.y / 2)\r\n                    middlepoint.z = (middlepoint.z / 2)\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 4,\r\n                        height: 4\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = arrow;\r\n                    plane.scalingDeterminant = length;\r\n\r\n                    plane.position = middlepoint;\r\n                    plane.position.y = 2 * length;\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n                        impulsewTransform(mesh);\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n\r\n\r\n                }\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = arrowDirection;\r\n                var impulseMagnitude = force;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                var editForce = function (force) {\r\n                    impulseMagnitude = force;\r\n                }\r\n\r\n                var impulse = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                }\r\n\r\n                var impulsewTransform = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                }\r\n\r\n                arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                if (mesh) {\r\n\r\n                    //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                    //arrow.parent =mesh;\r\n                    //CoT.parent =mesh;\r\n\r\n                    //arrow.parent= CoT;\r\n                    //CoT.scalingDeterminant=0.2;\r\n\r\n                    arrow.parent = mesh;\r\n                    arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                    arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                function activate() {\r\n\r\n                    impulsewTransform(mesh);\r\n                }\r\n\r\n                var returnee = {\r\n                    activate: activate,\r\n                    button: button1,\r\n                    editForce: editForce,\r\n\r\n                }\r\n\r\n\r\n                return returnee;\r\n            }\r\n            function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                if (objmass == null) {\r\n\r\n                } else {\r\n                    mesh.physicsImpostor.mass = objmass;\r\n\r\n                }\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 1,\r\n                    height: 1\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n                plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                plane.parent = mesh;\r\n                //plane.scalingDeterminant=scale;\r\n                plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                //plane.position=middlepoint;\r\n                plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.color = \"white\";\r\n                button1.fontSize = 300;\r\n                button1.background = \"green\";\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    // alert(\"you did it!\");\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n                return button1;\r\n            }\r\n            function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 2.5,\r\n                    height: 1.5\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n                plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                plane.parent = mesh;\r\n                //plane.scalingDeterminant=scale;\r\n                plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                //plane.position=middlepoint;\r\n                plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n                advancedTexture.scaleTo(300, 200)\r\n\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\",\"Aceleracion:\"+\"\\n\"+ data + \" m/s^2\");\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.color = \"white\";\r\n                button1.fontSize = 42;\r\n                button1.background = \"green\";\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    //alert(\"you did it!\");\r\n                    //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n                return button1;\r\n            }\r\n\r\n            // OTHER IMPORTANT FUNCTIONS \r\n            var transformForce = function (mesh, vec) {\r\n                var mymatrix = new BABYLON.Matrix();\r\n                mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n            };\r\n\r\n            function getAccel(force, mass) {\r\n\r\n                if (mass == 0) {\r\n\r\n                    return 0;\r\n\r\n                } else {\r\n\r\n                    var accel = (force / mass)\r\n\r\n                    return accel\r\n                }\r\n\r\n            }\r\n\r\n            \r\n            var button = GUI.Button.CreateImageOnlyButton(\"but\",\"images/pressme.png\")\r\n            button.color=\"transparent\"\r\n\r\n              //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n              var button_panel = new XRDisplayPlane(0.5, 0.3, true, true, scene)\r\n              button_panel.addControl(button);\r\n              button_panel.setScaleToInPixels(300, 160)\r\n              button_panel.displayPlane.position.set(-.25, .5, .5);\r\n  \r\n              section_infodisplay.logicManager.AddTemporalGUI(button_panel.displayPlane)\r\n  \r\n\r\n            var switchmode = 1;\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        ExecuteButton();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeAll();\r\n                        createAll();\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n          \r\n\r\n\r\n        }\r\n\r\n        function logicbox2() {\r\n\r\n            var defaultmeshes = [];\r\n            var box;\r\n            var box2;\r\n\r\n\r\n            var fisrtArrowStart = new BABYLON.Vector3(0, 0, -.5);\r\n            var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n            var secondArrowStart = new BABYLON.Vector3(0, 0, .5);\r\n            var secondArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n            //Impulse Settings\r\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n            var impulseMagnitude = 5;\r\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n            //fisrt box\r\n            var obj_force1 = 20;\r\n            var obj_force2 = 20;\r\n            var obj_mass = 8;\r\n            var obj_totalforce = (obj_force1-obj_force2);\r\n\r\n            var obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n            \r\n            var onDisplay_accel = \"?\"\r\n            var onDisplay_force = \"?\"\r\n            var onDisplay_mass = obj_mass;\r\n\r\n            //second box\r\n\r\n            var obj_force1_2 = 60;\r\n            var obj_force2_2 = 20;\r\n            var obj_mass_2 = 30;\r\n            var obj_totalforce_2 = (obj_force1_2-obj_force2_2);\r\n\r\n            var obj_accel_2 = getAccel(obj_totalforce_2, obj_mass_2);\r\n\r\n            \r\n            var onDisplay_accel_2 = \"?\"\r\n            var onDisplay_force_2 = \"?\"\r\n            var onDisplay_mass_2 = obj_mass_2;\r\n\r\n            //\r\n\r\n\r\n            var firstarrow;\r\n            var secondarrow;\r\n            \r\n            var firstarrow2;\r\n            var secondarrow2;\r\n\r\n            var setMass;\r\n            var setAccel;\r\n\r\n            var setMass2;\r\n            var setAccel2;\r\n\r\n\r\n            async function create2Boxes() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 5, friction: 10 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"wood_box_1\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, 1.25);\r\n                box.material = materialWood;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n                defaultmeshes.push(box);\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n\r\n                var materialfloor = new BABYLON.StandardMaterial(\"floor\", scene);\r\n                materialfloor.diffuseTexture = new BABYLON.Texture(\"../textures/floor.png\", scene);\r\n                materialfloor.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box2 = BABYLON.Mesh.CreateBox(\"wood_box_2\", 1, scene);\r\n                box2.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box2.position = new BABYLON.Vector3(-.5, 0, -1.25);\r\n                box2.material = materialfloor;\r\n                box2.physicsImpostor = new BABYLON.PhysicsImpostor(box2, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box2.XRPickable = true;\r\n\r\n                defaultmeshes.push(box2);\r\n                section_infodisplay.logicManager.AddDisposableStuff(box2);\r\n\r\n\r\n            }\r\n\r\n            function createAll() {\r\n\r\n                create2Boxes().then(() => {\r\n\r\n                    box = scene.getMeshByName(\"wood_box_1\");\r\n\r\n                    box2 = scene.getMeshByName(\"wood_box_2\");\r\n\r\n                    firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2,\"Fuerza: \" + obj_force1 + \" N\", box, obj_force1);\r\n                    secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2,\"Fuerza: \" + obj_force2 + \" N\", box, obj_force2);\r\n                    setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15,\"Masa: \"+ obj_mass + \" Kg\", box, obj_mass);\r\n                    setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\" , box, null)\r\n\r\n                    firstarrow2 = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2,\"Fuerza: \" + obj_force1_2 + \" N\", box2, obj_force1_2);\r\n                    secondarrow2 = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2,\"Fuerza: \" + obj_force2_2 + \" N\", box2, obj_force2_2);\r\n                    setMass2 = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15,\"Masa: \"+ obj_mass_2 + \" Kg\", box2, obj_mass_2);\r\n                    setAccel2 = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\" , box2, null)\r\n\r\n\r\n\r\n                    setAccel.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = (\"Aceleracion:\"+\"\\n\"+\"?\")\r\n                        setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n\r\n                    firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                        setAccel.textBlock.text = \"Aceleracion:\"+\"\\n\"+ onDisplay_accel + \" m/s^2\";\r\n\r\n                        onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                    })\r\n\r\n                    secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                        setAccel.textBlock.text = \"Aceleracion:\"+\"\\n\"+ onDisplay_accel + \" m/s^2\";\r\n\r\n                        onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                    })\r\n\r\n                    \r\n\r\n                    setAccel2.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel_2 = (\"Aceleracion:\"+\"\\n\"+\"?\")\r\n                        setAccel2.textBlock.text = onDisplay_accel_2 + \" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n\r\n                    firstarrow2.button.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel_2 = (getAccel(obj_force1_2, obj_mass_2)).toFixed(3).toString();\r\n                        setAccel2.textBlock.text = \"Aceleracion:\"+\"\\n\"+ onDisplay_accel_2 + \" m/s^2\";\r\n\r\n                        onDisplay_force_2 = (obj_force1_2).toFixed(3).toString();\r\n\r\n\r\n                    })\r\n\r\n                    secondarrow2.button.onPointerUpObservable.add(function () {\r\n\r\n                        onDisplay_accel_2 = (getAccel(obj_force2_2, obj_mass_2)).toFixed(3).toString();\r\n                        setAccel2.textBlock.text = \"Aceleracion:\"+\"\\n\"+ onDisplay_accel_2 + \" m/s^2\";\r\n\r\n                        onDisplay_force_2 = (obj_force2_2).toFixed(3).toString();\r\n\r\n\r\n                    })\r\n\r\n                })\r\n\r\n\r\n\r\n            }\r\n\r\n            createAll();\r\n\r\n\r\n            function disposeAll() {\r\n\r\n                if (defaultmeshes.length > 0) {\r\n\r\n                    defaultmeshes.forEach(value => {\r\n\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(value => value.dispose());\r\n                        } else { value.dispose(); }\r\n                    });\r\n\r\n\r\n                }\r\n                defaultmeshes = [];\r\n\r\n            }\r\n\r\n\r\n            function ExecuteButton() {\r\n\r\n\r\n                onDisplay_accel = (obj_accel).toFixed(3).toString();\r\n                setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                onDisplay_force = (obj_totalforce).toFixed(3).toString();\r\n\r\n                onDisplay_accel_2 = (obj_accel_2).toFixed(3).toString();\r\n                setAccel2.textBlock.text = onDisplay_accel_2 + \" m/s^2\";\r\n\r\n                onDisplay_force_2 = (obj_totalforce_2).toFixed(3).toString();\r\n\r\n                //RefreshDataInMilisecs(200,25)\r\n\r\n                firstarrow.activate();\r\n                secondarrow.activate();\r\n\r\n                firstarrow2.activate();\r\n                secondarrow2.activate();\r\n                \r\n\r\n            }\r\n\r\n\r\n            // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n            function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                //Shape profile in XY plane\r\n                const myShape = [];\r\n                const arrowRadius = 0.5;\r\n                var n = 30;\r\n                var deltaAngle = 2 * Math.PI / n\r\n                for (let i = 0; i <= n; i++) {\r\n                    myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                }\r\n                myShape.push(myShape[0]);  //close profile\r\n\r\n                const arrowHeadLength = 1.5;\r\n                const arrowHeadMaxSize = 1.5;\r\n                const arrowLength = 10;\r\n                const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                arrowDirection.normalize();\r\n\r\n                const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                const myPath = [];\r\n                myPath.push(arrowStart);\r\n                myPath.push(arrowBodyEnd);\r\n                myPath.push(arrowBodyEnd)\r\n                myPath.push(arrowHeadEnd);\r\n\r\n                const scaling = (index, distance) => {\r\n                    switch (index) {\r\n                        case 0:\r\n                        case 1:\r\n                            return 1\r\n                            break\r\n                        case 2:\r\n                            return arrowHeadMaxSize / arrowRadius\r\n                            break\r\n                        case 3:\r\n                            return 0\r\n                            break\r\n                    }\r\n                };\r\n\r\n                let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE }, scene);\r\n\r\n                //arrow.scalingDeterminant=0.2\r\n\r\n                var button1 = {}\r\n\r\n                const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                    const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                    const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    const arrowStart = path[0];\r\n\r\n                    let arrowDirection = path[1].subtract(path[0]);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    path[1] = arrowBodyEnd;\r\n                    path[2] = arrowBodyEnd;\r\n                    path[3] = arrowHeadEnd;\r\n\r\n                    BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                    var middlepoint = arrowBodyEnd;\r\n                    middlepoint.x = (middlepoint.x / 2)\r\n                    middlepoint.y = (middlepoint.y / 2)\r\n                    middlepoint.z = (middlepoint.z / 2)\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 4,\r\n                        height: 4\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = arrow;\r\n                    plane.scalingDeterminant = length;\r\n\r\n                    plane.position = middlepoint;\r\n                    plane.position.y = 2 * length;\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n                        impulsewTransform(mesh);\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n\r\n\r\n                }\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = arrowDirection;\r\n                var impulseMagnitude = force;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                var editForce = function (force) {\r\n                    impulseMagnitude = force;\r\n                }\r\n\r\n                var impulse = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                }\r\n\r\n                var impulsewTransform = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                }\r\n\r\n                arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                if (mesh) {\r\n\r\n                    //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                    //arrow.parent =mesh;\r\n                    //CoT.parent =mesh;\r\n\r\n                    //arrow.parent= CoT;\r\n                    //CoT.scalingDeterminant=0.2;\r\n\r\n                    arrow.parent = mesh;\r\n                    arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                    arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                function activate() {\r\n\r\n                    impulsewTransform(mesh);\r\n                }\r\n\r\n                var returnee = {\r\n                    activate: activate,\r\n                    button: button1,\r\n                    editForce: editForce,\r\n\r\n                }\r\n\r\n\r\n                return returnee;\r\n            }\r\n            function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                if (objmass == null) {\r\n\r\n                } else {\r\n                    mesh.physicsImpostor.mass = objmass;\r\n\r\n                }\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 1,\r\n                    height: 1\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n                plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                plane.parent = mesh;\r\n                //plane.scalingDeterminant=scale;\r\n                plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                //plane.position=middlepoint;\r\n                plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.color = \"white\";\r\n                button1.fontSize = 300;\r\n                button1.background = \"green\";\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    // alert(\"you did it!\");\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n                return button1;\r\n            }\r\n            function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                // GUI\r\n\r\n                var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                    width: 2.5,\r\n                    height: 1.5\r\n                }, scene);\r\n\r\n                plane.nonXREditable = true;\r\n\r\n                //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                //plane.position = local_pos; //position sphere relative to world\r\n                plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                plane.parent = mesh;\r\n                //plane.scalingDeterminant=scale;\r\n                plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                //plane.position=middlepoint;\r\n                plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n                advancedTexture.scaleTo(300, 200)\r\n\r\n\r\n                var button1 = GUI.Button.CreateSimpleButton(\"but1\",\"Aceleracion:\"+\"\\n\"+ data + \" m/s^2\");\r\n                button1.width = 1;\r\n                button1.height = 1;\r\n                button1.color = \"white\";\r\n                button1.fontSize = 42;\r\n                button1.background = \"green\";\r\n                button1.onPointerUpObservable.add(function () {\r\n\r\n                    //alert(\"you did it!\");\r\n                    //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n                advancedTexture.addControl(button1);\r\n                //\r\n                return button1;\r\n            }\r\n\r\n            // OTHER IMPORTANT FUNCTIONS \r\n            var transformForce = function (mesh, vec) {\r\n                var mymatrix = new BABYLON.Matrix();\r\n                mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n            };\r\n\r\n            function getAccel(force, mass) {\r\n\r\n                if (mass == 0) {\r\n\r\n                    return 0;\r\n\r\n                } else {\r\n\r\n                    var accel = (force / mass)\r\n\r\n                    return accel\r\n                }\r\n\r\n            }\r\n\r\n             \r\n            var button = GUI.Button.CreateImageOnlyButton(\"but\",\"images/pressme.png\")\r\n            button.color=\"transparent\"\r\n\r\n              //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n              var button_panel = new XRDisplayPlane(0.5, 0.3, true, true, scene)\r\n              button_panel.addControl(button);\r\n              button_panel.setScaleToInPixels(300, 160)\r\n              button_panel.displayPlane.position.set(-.25, .5, 0);\r\n  \r\n              section_infodisplay.logicManager.AddTemporalGUI(button_panel.displayPlane)\r\n\r\n            var switchmode = 1;\r\n            button.onPointerUpObservable.add(() => {\r\n                switch (switchmode) {\r\n                    case 1:\r\n                        ExecuteButton();\r\n                        switchmode = 2;\r\n                        break;\r\n                    case 2:\r\n                        disposeAll();\r\n                        createAll();\r\n                        switchmode = 1;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        var OnscreenTimer = new Timer();\r\n        function card4_exercises() {\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n\r\n\r\n            var exercise_quizdisplay = XRQuizDisplay(scene, 1, true);\r\n            exercise_quizdisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_quizdisplay.displayPlane.position.x-=0.3\r\n            exercise_quizdisplay.displayPlane.position.y+=0.5\r\n           \r\n\r\n            //PROBANDO CONTAINERS SOBRE EL CARD MANAGER\r\n           \r\n            //var exercise_quizdisplay = NormalQuizdisplay(scene);\r\n\r\n            //var temp = section_infodisplay.getCurrentCard();\r\n            //temp.info_image_container.addControl(exercise_quizdisplay.container)\r\n\r\n            //\r\n\r\n            var exercise_datadisplay = XRDinamicsDataDisplay(scene, 1, true)\r\n            exercise_datadisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_datadisplay.displayPlane.position.x-=0.3\r\n            exercise_datadisplay.displayPlane.position.z-=2.4\r\n            exercise_datadisplay.displayPlane.position.y+=0.4\r\n           \r\n            var exercise_control = XRControlDisplay(scene, 1, true)\r\n            exercise_control.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_control.displayPlane.position.x-=0.3\r\n            exercise_control.displayPlane.position.z+=2.4\r\n            exercise_control.displayPlane.position.y+=0.4\r\n\r\n                 \r\n            exercise_datadisplay.addFormulaImage(\"/images/equ2-1.png\")\r\n\r\n            \r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_quizdisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_datadisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_control.displayPlane);\r\n\r\n\r\n\r\n            exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index--\r\n    \r\n                if (loaded_exercise_index < 0) {\r\n                    loaded_exercise_index++;\r\n                } if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n    \r\n                }\r\n    \r\n            });\r\n    \r\n            exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\r\n    \r\n                loaded_exercise_index++;\r\n    \r\n                if (loaded_exercise_index > quizesList.length - 1) {\r\n                    loaded_exercise_index--;\r\n                }\r\n                if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n    \r\n                }\r\n    \r\n            });\r\n    \r\n            exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\r\n    \r\n                if (exercise_quizdisplay.getIsCorrect()) {\r\n    \r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n    \r\n                    DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\r\n                    //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\r\n                    DataCapture.getQuizByID(currentQuiz).isCompleted = true;\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n                    QuizTimer.reset();\r\n    \r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n    \r\n                    }else{\r\n                        exercise_quizdisplay.correctPanel.show();\r\n                    }\r\n    \r\n    \r\n    \r\n                } else {\r\n    \r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n    \r\n                    DataCapture.addTotalError(currentQuiz);\r\n                    DataCapture.addQuizErrorByID(currentQuiz);\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n    \r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n    \r\n                    }else{\r\n                        exercise_quizdisplay.incorrectPanel.show();\r\n                    }\r\n    \r\n                }\r\n            });\r\n\r\n            exercise_control.button2.onPointerUpObservable.add(function () {\r\n\r\n                resource_manager.Reset();\r\n                QuizTimer.reset();\r\n\r\n            });\r\n\r\n             \r\n            if(!OnscreenTimer.isRunning()){\r\n                OnscreenTimer.start();\r\n                }\r\n        \r\n                function isCompleted_Question_number() {\r\n        \r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n        \r\n                    if (DataCapture.getQuizByID(currentQuiz).isCompleted) {\r\n                        return \" (Completada)\"\r\n                    } else {\r\n                        return \"\"\r\n                    }\r\n        \r\n                }\r\n                function Check_Errors_number() {\r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n        \r\n                    return DataCapture.getQuizByID(currentQuiz).errors;\r\n                }\r\n                function Check_Timer_number() {\r\n        \r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        OnscreenTimer.pause();\r\n                        return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds) + \"\\n\" + \"Sección de preguntas finalizada!\"\r\n                    } else {\r\n                        return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds)\r\n                    }\r\n                }\r\n                function formatTime(time) {\r\n                    if (time <= 9) {\r\n                        return \"0\" + time;\r\n                    } else {\r\n                        return time;\r\n                    }\r\n                }\r\n        \r\n                var timer_errors_numbers = scene.onBeforeRenderObservable.add(() => {\r\n        \r\n        \r\n                    exercise_quizdisplay.time_number.text = \"Tiempo: \" + Check_Timer_number();\r\n                    exercise_quizdisplay.error_number.text = \"Errores: \" + Check_Errors_number();\r\n                    exercise_quizdisplay.question_number.text = \"Pregunta: \" + (loaded_exercise_index + 1) + \"/\" + (quizesList.length) + isCompleted_Question_number();\r\n                });\r\n\r\n\r\n\r\n\r\n\r\n            // Excercise Manager constructor function\r\n\r\n\r\n            function manageStuff() {\r\n\r\n\r\n\r\n                function addExercise(exercise) {\r\n                    exercise_list.push(exercise)\r\n                    quizesList.push(exercise.quiz);\r\n                }\r\n\r\n                function LoadQuiz(number) {\r\n                    exercise_quizdisplay.loadquiz(quizesList[number])\r\n                }\r\n\r\n                function Start(number) {\r\n                    loaded_exercise_index = number;\r\n                    exercise_list[number].Load_Models().then(function (meshes) {\r\n                        ClearStuff();\r\n                        loaded_meshes = meshes;\r\n\r\n                        if (exercise_list[number].Load_Logic) {\r\n\r\n                            exercise_list[number].Load_Logic();\r\n                            LoadQuiz(number);\r\n                            QuizTimer.reset();\r\n                        }\r\n\r\n\r\n\r\n\r\n                    });\r\n                }\r\n\r\n                function Reset() {\r\n\r\n                    Start(loaded_exercise_index);\r\n                   \r\n                }\r\n\r\n                exercise_control.button2.onPointerUpObservable.add(function () {\r\n                    Reset();\r\n                });\r\n\r\n                function ClearStuff() {\r\n\r\n                    exercise_control.clearObservers();\r\n                    exercise_control.clearItems();\r\n                    exercise_datadisplay.clearViewData();\r\n\r\n\r\n                    console.log(\"reseteando\");\r\n                    if (loaded_onBeforeRenderObservables != undefined) {\r\n\r\n                        loaded_onBeforeRenderObservables.forEach(value => {\r\n\r\n                            scene.onBeforeRenderObservable.remove(value);\r\n                        });\r\n\r\n                    }\r\n                    if (loaded_meshes != undefined) {\r\n\r\n                        loaded_meshes.forEach(value => {\r\n\r\n                            if (Array.isArray(value)) {\r\n                                value.forEach(value => value.dispose());\r\n                            } else { value.dispose(); }\r\n                        });\r\n\r\n                        // addSceneModels();\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                var manager = {\r\n                    addExercise,\r\n                    LoadQuiz,\r\n                    Start,\r\n                    Reset,\r\n                    ClearStuff,\r\n                }\r\n\r\n                return manager;\r\n\r\n            }\r\n\r\n\r\n\r\n            var resource_manager = manageStuff();\r\n\r\n\r\n\r\n            var quiz1box = new Exercise.exercise(\r\n                \"1.- Calcula el módulo de la aceleración que adquiere esta caja cuando se le aplica una fuerza de 12 N\",\r\n                [\"A) 2 m/s^2\", \"B) 1.5 m/s^2\", \"C) 8 m/s^2\", \"D) 0.5 m/s^2\"],\r\n                1,\r\n                [\"NOTA: Recuerda que, aceleración es igual a (fuerza resultante / masa)\"]);\r\n\r\n            var quiz2box = new Exercise.exercise(\r\n                \"2.- ¿Cuales de la siguientes suma de fuerzas le da a la caja una aceleracion de 0.35m/s^2?\",\r\n                [\"A) -8N, +10N\", \"B) -2N, +14N\", \"C) -5N, 12N\", \"D) -1N, +11N\"],\r\n                2,\r\n                [\"NOTA: recuerda que necesitas sumar todas las fuerzas.\"]);\r\n\r\n            var quiz3box = new Exercise.exercise(\r\n                \"3.- ¿cual sera la aceleración del la caja aplicarle una fuerza negativa de 12 N y 2 fuerzas positivas de 10 N y 14 N?\",\r\n                [\"A) 0.5 m/s^2\", \"B) 1 m/s^2\", \"C) 4 m/s^2\", \"D) 0.40 m/s^2\"],\r\n                3,\r\n                [\"NOTA: recuerda que necesitas sumar todas las fuerzas.\"]);\r\n\r\n            var quiz4box = new Exercise.exercise(\r\n                \"4.- ¿Cuales de la siguientes suma de fuerzas le da a las 2 cajas una aceleracion de 0.5m/s^2?\",\r\n                [\"A) -4N, +12N +7N\", \"B) -5N, +13N +5N\", \"C) -10N, +12N +12N\", \"D) -2N, +4N +6N\"],\r\n                0,\r\n                [\"NOTA: recuerda que necesitas sumar todas las fuerzas.\"]);\r\n\r\n            var quiz1 = new Exercise.exercise(\r\n                \"5.- Determina el modulo de aceleración del auto de juguete mostrado\",\r\n                [\"A) 0.5 m/s^2\", \"B) 1 m/s^2\", \"C) 5 m/s^2\", \"D) 0.40 m/s^2\"],\r\n                0,\r\n                [\"NOTA: Recuerda que, aceleración es igual a (fuerza resultante / masa)\"]);\r\n\r\n\r\n            var quiz2 = new Exercise.exercise(\"6.- Determina el modulo de aceleración del auto de juguete mostrado\",\r\n                [\"A) 0.4 m/s^2\", \"B) -0.4 m/s^2\", \"C) 0.5 m/s^2\", \"D) 1 m/s^2\"],\r\n                1,\r\n                [\"Igualmente, aqui necesitas calcular la aceleración\"]);\r\n\r\n\r\n\r\n\r\n            async function loadBlueCarModel() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 25 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"bluecar.glb\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.1);\r\n                carmesh[0].position.set(-.5, .33, 0);\r\n\r\n\r\n                //busmeshes[0].rotationQuaternion=null;\r\n                //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n                //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n                //busmeshes[7].showBoundingBox = true;            \r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh);\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider);\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function loadRedCardModel() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 25 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"redcar.gltf\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.1);\r\n                carmesh[0].position.set(-1.5, .33, 0);\r\n\r\n\r\n                //busmeshes[0].rotationQuaternion=null;\r\n                //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n                //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n                //busmeshes[7].showBoundingBox = true;            \r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox2\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh);\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider);\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function createWoodBox() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"wood_box\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, 0);\r\n                box.material = materialWood;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n                defaultmeshes.push(box);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n              \r\n\r\n                return defaultmeshes;\r\n            }\r\n\r\n            async function createMetalBox() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var materialMetal = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                materialMetal.diffuseTexture = new BABYLON.Texture(\"../textures/metal_crate.png\", scene);\r\n                materialMetal.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"metal_box\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, 0);\r\n                box.material = materialMetal;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n\r\n                defaultmeshes.push(box);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n                \r\n                return defaultmeshes;\r\n            }\r\n\r\n            async function create2Boxes() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var materialMetal = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                materialMetal.diffuseTexture = new BABYLON.Texture(\"../textures/metal_crate.png\", scene);\r\n                materialMetal.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"metal_box\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-.5, 0, -0.5);\r\n                box.material = materialMetal;\r\n\r\n                box.XRPickable = true;\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box2 = BABYLON.Mesh.CreateBox(\"wood_box\", 1, scene);\r\n                //box2.scaling=new BABYLON.Vector3(0.4,0.4,0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box2.position = new BABYLON.Vector3(0, 0, 2.3);\r\n                box2.material = materialWood;\r\n\r\n                //var cyl = BABYLON.Mesh.CreateCylinder(\"cylinder\", 1, 1, 1, 16, 1, scene);\r\n                //var url = \"https://upload.wikimedia.org/wikipedia/commons/e/e8/Woven_green_rope.jpg\";\r\n                //cyl.material = new BABYLON.StandardMaterial(\"mat\", scene);\r\n                //cyl.material.diffuseTexture = new BABYLON.Texture(url, scene);\r\n                //cyl.setPivotMatrix(BABYLON.Matrix.Translation(0, -.5, 0));\r\n                //cyl.scaling= new BABYLON.Vector3(0.1,0.1,0.1);\r\n                //cyl.scaling.y =1\r\n                //cyl.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(1, 0, 0), (90*(Math.PI/180)) );\r\n\r\n\r\n                //box2.XRPickable=true;\r\n\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                //box2.physicsImpostor= new BABYLON.PhysicsImpostor(box2,BABYLON.PhysicsImpostor.BoxImpostor,{mass:5},scene);\r\n\r\n                box2.parent = box;\r\n\r\n\r\n                var tube = new BABYLON.MeshBuilder.CreateTube(\"tube\", { path: [new BABYLON.Vector3(0, 0, 0), new BABYLON.Vector3(0, 0, 2.3)], radius: .05 }, scene);\r\n\r\n                tube.material = new BABYLON.StandardMaterial(\"mat\", scene);\r\n                tube.material.diffuseTexture = new BABYLON.Texture(\"../textures/rope_texture.jpg\", scene);\r\n                tube.parent = box;\r\n\r\n\r\n                //var distanceJoint = new BABYLON.DistanceJoint({ maxDistance: 10 });\r\n                //box.physicsImpostor.addJoint(box2.physicsImpostor, distanceJoint); \r\n\r\n                //var joint1 = new BABYLON.PhysicsJoint(BABYLON.PhysicsJoint.LockJoint, {});             \r\n                //box2.physicsImpostor.addJoint(box.physicsImpostor, joint1); \r\n\r\n                defaultmeshes.push(box);\r\n                defaultmeshes.push(box2);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n                section_infodisplay.logicManager.AddDisposableStuff(box2);\r\n\r\n                return defaultmeshes;\r\n            }\r\n\r\n\r\n\r\n            function logicbox1() {\r\n                var box = scene.getMeshByName(\"wood_box\");\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, -0.5);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n                var impulseMagnitude = 5;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                //arrowdata();\r\n\r\n                var obj_force1 = 1;\r\n\r\n                var obj_mass = 8;\r\n\r\n                var obj_totalforce = (obj_force1);\r\n\r\n                var obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", box, obj_force1);\r\n\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", box, obj_mass);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                function ExecuteButton() {\r\n\r\n\r\n                    onDisplay_accel = (obj_accel).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_totalforce).toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n                    obj_totalforce = obj_force1;\r\n                    onDisplay_force = obj_totalforce;\r\n                    obj_accel = getAccel(obj_totalforce, obj_mass);\r\n                    firstarrow.editForce(obj_force1);\r\n                    firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n                var rotateGroup = new GUI.SliderGroup(\"Control de fuerza\", \"S\");\r\n                rotateGroup.addSlider(\"Fuerza\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(rotateGroup);\r\n                exercise_control.controlPanel.heightInPixels = 100;\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                // OTHER IMPORTANT FUNCTIONS \r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            function logicbox2() {\r\n                var box = scene.getMeshByName(\"metal_box\");\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, -0.5);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var secondArrowStart = new BABYLON.Vector3(0, 0, 0.5);\r\n                var secondArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                var obj_force1 = 1;\r\n                var obj_force2 = 2;\r\n\r\n                var obj_mass = 20;\r\n\r\n                var obj_totalforce = (obj_force1 - obj_force2);\r\n\r\n                function getTotalForce() {\r\n\r\n                    obj_totalforce = (obj_force1 - obj_force2);\r\n\r\n                    return obj_totalforce;\r\n                }\r\n\r\n                getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", box, obj_force1);\r\n                var secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2, + obj_force2 + \" N\", box, obj_force2);\r\n\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", box, obj_mass);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n\r\n                function ExecuteButton() {\r\n\r\n\r\n                    onDisplay_accel = getAccel(getTotalForce(), obj_mass).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = getTotalForce().toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n                    secondarrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    firstarrow.editForce(obj_force1);\r\n                    firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var changeForce2 = function (force) {\r\n\r\n                    obj_force2 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    secondarrow.editForce(obj_force2);\r\n                    secondarrow.button.textBlock.text = obj_force2 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var forceGroup = new GUI.SliderGroup(\"Suma de fuerzas\", \"S\");\r\n                forceGroup.addSlider(\"Fuerza positiva\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n                forceGroup.addSlider(\"Fuerza negativa\", changeForce2, \"N\", 0, 20, obj_force2, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(forceGroup);\r\n                exercise_control.controlPanel.heightInPixels = 160;\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                // OTHER IMPORTANT FUNCTIONS \r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            function logicbox3() {\r\n                var box = scene.getMeshByName(\"metal_box\");\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0 - .25, -0.5);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var secondArrowStart = new BABYLON.Vector3(0, 0, 0.5);\r\n                var secondArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                var thirdArrowStart = new BABYLON.Vector3(0, 0.25, -0.5);\r\n                var thirdArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var obj_force1 = 1;\r\n                var obj_force2 = 2;\r\n                var obj_force3 = 10;\r\n\r\n                var obj_mass = 30;\r\n\r\n                var obj_totalforce = (obj_force1 - obj_force2 + obj_force3);\r\n\r\n                function getTotalForce() {\r\n\r\n                    obj_totalforce = (obj_force1 - obj_force2 + obj_force3);\r\n\r\n                    return obj_totalforce;\r\n                }\r\n\r\n                getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", box, obj_force1);\r\n                var secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2, + obj_force2 + \" N\", box, obj_force2);\r\n                var thirdarrow = arrowForce(thirdArrowStart, thirdArrowDirection, 0.02, 2, + obj_force3 + \" N\", box, obj_force3);\r\n\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", box, obj_mass);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n\r\n                function ExecuteButton() {\r\n\r\n\r\n                    onDisplay_accel = getAccel(getTotalForce(), obj_mass).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = getTotalForce().toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n                    secondarrow.activate();\r\n                    thirdarrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                thirdarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force3, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force3).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    firstarrow.editForce(obj_force1);\r\n                    firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var changeForce2 = function (force) {\r\n\r\n                    obj_force2 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    secondarrow.editForce(obj_force2);\r\n                    secondarrow.button.textBlock.text = obj_force2 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var forceGroup = new GUI.SliderGroup(\"Suma de fuerzas\", \"S\");\r\n                forceGroup.addSlider(\"Fuerza positiva\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n                forceGroup.addSlider(\"Fuerza negativa\", changeForce2, \"N\", 0, 20, obj_force2, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(forceGroup);\r\n                exercise_control.controlPanel.heightInPixels = 160;\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                // OTHER IMPORTANT FUNCTIONS \r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            function logicbox4() {\r\n                var box = scene.getMeshByName(\"metal_box\");\r\n\r\n                var box2 = scene.getMeshByName(\"wood_box\");\r\n\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0 - .25, -0.5);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var secondArrowStart = new BABYLON.Vector3(0, 0, 2.5);\r\n                var secondArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                var thirdArrowStart = new BABYLON.Vector3(0, 0.25, -0.5);\r\n                var thirdArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                var obj_force1 = 1;\r\n                var obj_force2 = 3;\r\n                var obj_force3 = 2;\r\n\r\n                var obj_mass = 30;\r\n\r\n\r\n\r\n                var obj_totalforce = (obj_force1 - obj_force2 + obj_force3);\r\n\r\n                function getTotalForce() {\r\n\r\n                    obj_totalforce = (obj_force1 - obj_force2 + obj_force3);\r\n\r\n                    return obj_totalforce;\r\n                }\r\n\r\n                getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", box, obj_force1);\r\n                var secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 2, + obj_force2 + \" N\", box, obj_force2);\r\n                var thirdarrow = arrowForce(thirdArrowStart, thirdArrowDirection, 0.02, 2, + obj_force3 + \" N\", box, obj_force3);\r\n\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, 20 + \" Kg\", box, obj_mass);\r\n                var setMass2 = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.4, 10 + \" Kg\", box2, null);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(-1, 0, 0), 0.10, \"?\", box, null)\r\n\r\n\r\n                function ExecuteButton() {\r\n\r\n\r\n                    onDisplay_accel = getAccel(getTotalForce(), obj_mass).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = getTotalForce().toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n                    secondarrow.activate();\r\n                    thirdarrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                thirdarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force3, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force3).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    firstarrow.editForce(obj_force1);\r\n                    firstarrow.button.textBlock.text = obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var changeForce2 = function (force) {\r\n\r\n                    obj_force2 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    secondarrow.editForce(obj_force2);\r\n                    secondarrow.button.textBlock.text = obj_force2 + \" N\"\r\n\r\n                };\r\n\r\n                var changeForce3 = function (force) {\r\n\r\n                    obj_force3 = Math.floor(force);\r\n                    obj_totalforce = getTotalForce();\r\n                    onDisplay_force = obj_totalforce;\r\n                    getAccel(obj_totalforce, obj_mass);\r\n                    thirdarrow.editForce(obj_force3);\r\n                    thirdarrow.button.textBlock.text = obj_force3 + \" N\"\r\n\r\n                };\r\n\r\n\r\n                var forceGroup = new GUI.SliderGroup(\"Control de fuerzas\", \"S\");\r\n                forceGroup.addSlider(\"Fuerza positiva 1\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n                forceGroup.addSlider(\"Fuerza positiva 2\", changeForce3, \"N\", 0, 20, obj_force3, displayMValue)\r\n                forceGroup.addSlider(\"Fuerza negativa 1\", changeForce2, \"N\", 0, 20, obj_force2, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(forceGroup);\r\n                exercise_control.controlPanel.heightInPixels = 220;\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                // OTHER IMPORTANT FUNCTIONS \r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            function quiz1logic() {\r\n\r\n                var car = scene.getMeshByName(\"carBox1\");\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, 0.5);\r\n                var secondArrowStart = new BABYLON.Vector3(0, 0, -0.5);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n                var secondArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n                var impulseMagnitude = 5;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                //arrowdata();\r\n\r\n                var obj_force1 = 50;\r\n                var obj_force2 = 10;\r\n                var obj_mass = 80;\r\n\r\n                var obj_totalforce = (obj_force1 - obj_force2);\r\n\r\n                var obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", car, obj_force1);\r\n                var secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 1.3, + obj_force2 + \" N\", car, obj_force2);\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", car, obj_mass);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(1, 0, 0), 0.10, \"?\", car, null)\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                function ExecuteButton() {\r\n\r\n                    function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                        var tick = 0;\r\n                        var refreshsteps = Math.round((time / refreshRate))\r\n                        var actualstep = 0;\r\n\r\n\r\n\r\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= refreshRate) {\r\n                                actualstep++\r\n\r\n\r\n                                if (actualstep <= refreshsteps) {\r\n\r\n                                    //code to refresh here\r\n\r\n                                    tick = 0;\r\n                                    onDisplay_accel = (obj_accel * (actualstep / refreshsteps)).toFixed(3).toString();\r\n                                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                                    onDisplay_force = (obj_totalforce * (actualstep / refreshsteps)).toFixed(3).toString();\r\n\r\n\r\n\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n                                    actualstep = 0;\r\n                                    tick = 0;\r\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n\r\n                    onDisplay_accel = (obj_accel).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_totalforce).toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n                    secondarrow.activate();\r\n\r\n                }\r\n\r\n\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                //FUNCTIONS FOR DINAMIC EXERCISES.\r\n\r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                var impulse = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n                }\r\n\r\n                var impulsewTransform = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n                }\r\n\r\n                var datarefresh = 0;\r\n\r\n                function refreshInfo() {\r\n\r\n                    datarefresh += (scene.deltaTime);\r\n\r\n                    if (datarefresh >= 100) {\r\n\r\n                        //getMaxAccel(accel);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                var max_accel = 0;\r\n\r\n                function getMaxAccel(accel) {\r\n\r\n                    if (accel > max_accel) {\r\n                        max_accel = accel\r\n                    }\r\n\r\n                    return max_accel;\r\n                }\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n                function getForce(mass, accel) {\r\n\r\n                    if (accel == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var force = (mass * accel)\r\n\r\n                        return force\r\n                    }\r\n\r\n                }\r\n\r\n                function getMass(force, accel) {\r\n\r\n                    if (accel == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var mass = (force / accel)\r\n\r\n                        return mass\r\n                    }\r\n\r\n                }\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n            }\r\n\r\n            function quiz2logic() {\r\n\r\n                var car = scene.getMeshByName(\"carBox2\");\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, 1.5);\r\n                var secondArrowStart = new BABYLON.Vector3(0, 0, -1);\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, -1);\r\n                var secondArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = new BABYLON.Vector3(0, 0, 1);\r\n                var impulseMagnitude = 5;\r\n                var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                //arrowdata();\r\n\r\n                var obj_force1 = 70;\r\n                var obj_force2 = 30;\r\n                var obj_mass = 100;\r\n\r\n                var obj_totalforce = (-obj_force1 + obj_force2);\r\n\r\n                var obj_accel = getAccel(obj_totalforce, obj_mass);\r\n\r\n                var onDisplay_accel = \"?\"\r\n                var onDisplay_force = \"?\"\r\n                var onDisplay_mass = obj_mass;\r\n\r\n                var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.02, 2, + obj_force1 + \" N\", car, obj_force1);\r\n                var secondarrow = arrowForce(secondArrowStart, secondArrowDirection, 0.02, 1.3, + obj_force2 + \" N\", car, obj_force2);\r\n\r\n                var setMass = displayMass(new BABYLON.Vector3(0, 1.1, 0), 0.15, obj_mass + \" Kg\", car, obj_mass);\r\n                var setAccel = displayAcceleration(new BABYLON.Vector3(1, 0, 0), 0.10, \"?\", car, null)\r\n\r\n                setAccel.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = \"?\"\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n\r\n\r\n                });\r\n\r\n                firstarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force1, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force1).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                secondarrow.button.onPointerUpObservable.add(function () {\r\n\r\n                    onDisplay_accel = (getAccel(obj_force2, obj_mass)).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_force2).toFixed(3).toString();\r\n\r\n\r\n                })\r\n\r\n                function ExecuteButton() {\r\n\r\n                    function RefreshDataInMilisecs(time, refreshRate) {\r\n\r\n                        var tick = 0;\r\n                        var refreshsteps = Math.round((time / refreshRate))\r\n                        var actualstep = 0;\r\n\r\n\r\n\r\n                        var temporalObs = scene.onBeforeRenderObservable.add(() => {\r\n                            tick += (scene.deltaTime);\r\n\r\n                            if (tick >= refreshRate) {\r\n                                actualstep++\r\n\r\n\r\n                                if (actualstep <= refreshsteps) {\r\n\r\n                                    //code to refresh here\r\n\r\n                                    tick = 0;\r\n                                    onDisplay_accel = (obj_accel * (actualstep / refreshsteps)).toFixed(3).toString();\r\n                                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                                    onDisplay_force = (obj_totalforce * (actualstep / refreshsteps)).toFixed(3).toString();\r\n\r\n\r\n\r\n\r\n                                    //\r\n\r\n                                } else {\r\n\r\n                                    actualstep = 0;\r\n                                    tick = 0;\r\n                                    scene.onBeforeRenderObservable.remove(temporalObs);\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n\r\n                    onDisplay_accel = (obj_accel).toFixed(3).toString();\r\n                    setAccel.textBlock.text = onDisplay_accel + \" m/s^2\";\r\n\r\n                    onDisplay_force = (obj_totalforce).toFixed(3).toString();\r\n\r\n                    //RefreshDataInMilisecs(200,25)\r\n\r\n                    firstarrow.activate();\r\n                    secondarrow.activate();\r\n\r\n                }\r\n\r\n\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n                    ExecuteButton();\r\n\r\n                });\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n\r\n\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3,\r\n                            height: 3\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                        button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        button1.width = 3;\r\n                        button1.height = 3;\r\n                        button1.color = \"white\";\r\n                        button1.fontSize = 400;\r\n                        button1.background = \"green\";\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n                            // alert(\"you did it!\");\r\n                            impulsewTransform(mesh);\r\n\r\n                        });\r\n                        advancedTexture.addControl(button1);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n                function displayMass(position, scale, data, mesh, objmass) {\r\n\r\n                    if (objmass == null) {\r\n\r\n                    } else {\r\n                        mesh.physicsImpostor.mass = objmass;\r\n\r\n                    }\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        // alert(\"you did it!\");\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n                function displayAcceleration(position, scale, data, mesh, objaccel) {\r\n\r\n\r\n                    // GUI\r\n\r\n                    var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 1,\r\n                        height: 1\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                    plane.parent = mesh;\r\n                    //plane.scalingDeterminant=scale;\r\n                    plane.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n\r\n                    //plane.position=middlepoint;\r\n                    plane.position = position; //NEW BABYLON.VECTOR3\r\n\r\n                    var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(plane);\r\n\r\n                    var button1 = GUI.Button.CreateSimpleButton(\"but1\", data + \" m/s^2\");\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.color = \"white\";\r\n                    button1.fontSize = 300;\r\n                    button1.background = \"green\";\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n                        //alert(\"you did it!\");\r\n                        //button1.textBlock.text=data+\" m/s^2\";\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(button1);\r\n                    //\r\n                    return button1;\r\n                }\r\n\r\n                //FUNCTIONS FOR DINAMIC EXERCISES.\r\n\r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n                var impulse = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n                }\r\n\r\n                var impulsewTransform = function (mesh) {\r\n\r\n                    mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n                }\r\n\r\n                var datarefresh = 0;\r\n\r\n                function refreshInfo() {\r\n\r\n                    datarefresh += (scene.deltaTime);\r\n\r\n                    if (datarefresh >= 100) {\r\n\r\n                        //getMaxAccel(accel);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                var max_accel = 0;\r\n\r\n                function getMaxAccel(accel) {\r\n\r\n                    if (accel > max_accel) {\r\n                        max_accel = accel\r\n                    }\r\n\r\n                    return max_accel;\r\n                }\r\n\r\n                function getAccel(force, mass) {\r\n\r\n                    if (mass == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var accel = (force / mass)\r\n\r\n                        return accel\r\n                    }\r\n\r\n                }\r\n\r\n                function getForce(mass, accel) {\r\n\r\n                    if (accel == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var force = (mass * accel)\r\n\r\n                        return force\r\n                    }\r\n\r\n                }\r\n\r\n                function getMass(force, accel) {\r\n\r\n                    if (accel == 0) {\r\n\r\n                        return 0;\r\n\r\n                    } else {\r\n\r\n                        var mass = (force / accel)\r\n\r\n                        return mass\r\n                    }\r\n\r\n                }\r\n\r\n                //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\r\n                var tick = 0\r\n                var obs = scene.onBeforeRenderObservable.add(function () {\r\n\r\n                    if (scene.deltaTime) {\r\n                        tick += (scene.deltaTime);\r\n                    }\r\n\r\n\r\n                    if (tick >= 100) {\r\n\r\n                        exercise_datadisplay.setViewData\r\n                            (\r\n                                \"a: \" + onDisplay_accel + \" m/s^2\" + \"\\n\" +\r\n                                \"FR: \" + onDisplay_force + \" N\" + \"\\n\" +\r\n                                \"m: \" + onDisplay_mass + \" Kg\"\r\n                            )\r\n\r\n\r\n                        tick = 0;\r\n                    }\r\n\r\n                });\r\n\r\n                loaded_onBeforeRenderObservables.push(obs);\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            quiz1box.addModels(createWoodBox)\r\n            quiz1box.addLogic(logicbox1)\r\n\r\n            quiz2box.addModels(createMetalBox)\r\n            quiz2box.addLogic(logicbox2)\r\n\r\n            quiz3box.addModels(createMetalBox)\r\n            quiz3box.addLogic(logicbox3)\r\n\r\n            quiz4box.addModels(create2Boxes)\r\n            quiz4box.addLogic(logicbox4);\r\n\r\n            quiz1.addModels(loadBlueCarModel)\r\n            quiz1.addLogic(quiz1logic)\r\n\r\n\r\n        \r\n\r\n\r\n\r\n\r\n            resource_manager.addExercise(quiz1box);\r\n            resource_manager.addExercise(quiz2box);\r\n            resource_manager.addExercise(quiz3box);\r\n            resource_manager.addExercise(quiz4box);\r\n            resource_manager.addExercise(quiz1);\r\n\r\n\r\n            resource_manager.Start(loaded_exercise_index)\r\n\r\n        }\r\n\r\n        var loader = new BABYLON.AssetsManager(scene);\r\n\r\n        loader.onFinish = function () {\r\n    \r\n            engine.runRenderLoop(() => {\r\n                if (scene) {\r\n                    window.document.title = engine.getFps().toFixed() + \" fps\";\r\n                    scene.render();\r\n    \r\n                }\r\n            });\r\n        };\r\n    \r\n        scene.executeWhenReady(function () {\r\n    \r\n            engine.hideLoadingUI();\r\n    \r\n            if (document.getElementById(\"xr-button\")) {\r\n                let XRbutton = document.getElementById(\"xr-button\");\r\n    \r\n                XRbutton.addEventListener(\"click\", async function () {\r\n    \r\n                    if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\r\n    \r\n                        xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\r\n                        xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\r\n                        await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\r\n    \r\n                    } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\r\n                        await xr.baseExperience.exitXRAsync()\r\n                    }\r\n                });\r\n    \r\n            }\r\n    \r\n    \r\n            if (document.getElementById(\"fullscreen-button\")) {\r\n                let button = document.getElementById(\"fullscreen-button\")\r\n    \r\n                button.addEventListener(\"click\", async function () {\r\n                    //engine.enterFullScreen(true);\r\n    \r\n                    engine.switchFullscreen(false);\r\n                })\r\n            }\r\n    \r\n        });\r\n    \r\n    \r\n        loader.load();\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth='xl'>\r\n\r\n                {/*<WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />*/}\r\n\r\n\r\n                <Box width=\"100%\" p={1} my={0.5}>\r\n                    <BabylonScene onSceneMount={onSceneMount} />\r\n                </Box>\r\n\r\n\r\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\r\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\r\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\r\n                    </Button>\r\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\r\n                        <Typography variant=\"h6\">pantalla completa</Typography>\r\n                    </Button>\r\n                </Container>\r\n\r\n\r\n\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ExercisePage","export default __webpack_public_path__ + \"static/media/card1.389eed7d.PNG\";","export default __webpack_public_path__ + \"static/media/alert2.2455318f.png\";","import React, { Component, useRef } from 'react'\r\nimport Main from '../../WebLayout/Main';\r\nimport * as BABYLON from 'babylonjs';\r\nimport BabylonScene from '../../BabylonScene'; // import the component above linking to file we just created.\r\nimport * as GUI from 'babylonjs-gui';\r\nimport 'babylonjs-loaders';\r\n\r\n\r\nimport { Timer } from \"easytimer.js\";\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box'\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Button } from '@material-ui/core';\r\n\r\n\r\nimport { useAuth } from '../../Contexts/AuthContext'\r\n\r\n\r\nimport * as Ground from '../../BabylonScene/components/Ground'\r\n\r\nimport * as Exercise from '../../BabylonScene/components/exercise'\r\n\r\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\r\n\r\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\r\n\r\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\r\n\r\n//import WebCam from '../../EmotionRecognition_Components/WebCam'\r\n//import * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\r\n\r\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\r\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\r\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\r\n\r\n\r\nimport card1 from '../exercise_2_4/resources/card1.PNG'\r\nimport cardboard from '../exercise_1_1/resources/cardboard.png'\r\nimport alert2 from '../exercise_2_4/resources/alert2.png'\r\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\r\n\r\nclass ExercisePage extends Component {\r\n    render() {\r\n        return (\r\n            <Main data={GetMainContent} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imagebox: {\r\n        //backgroundImage: 'url(' + drawerImage + ')',   \r\n        height: '100%',\r\n        width: '60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    card: {\r\n        height: '100%',\r\n\r\n        flexDirection: 'column',\r\n    },\r\n    media: {\r\n        height: 400,\r\n\r\n    },\r\n    babylonbuttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n\r\n    },\r\n    image: {\r\n        paddingTop: '10px',\r\n        paddingBottom: '20px'\r\n    }\r\n}));\r\n\r\nfunction GetMainContent() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { currentUser } = useAuth();\r\n\r\n    //const webcam = useRef({});\r\n\r\n    var exerciseData = {\r\n        id: 'exercise_2_4',\r\n        generalTime: '00:00',\r\n        totalErrors: 0,\r\n        isCompleted: false,\r\n        quizes: {\r\n            quiz_1: {\r\n                id: 'quiz_1',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_2: {\r\n                id: 'quiz_2',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n            quiz_3: {\r\n                id: 'quiz_3',\r\n                time: '00:00',\r\n                errors: 0,\r\n                isCompleted: false\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n\r\n    DataCapture.setCurrentUser(currentUser);\r\n\r\n    DataCapture.setExerciseData(exerciseData);\r\n\r\n    DataCapture.checkUserExerciseData(exerciseData.id);\r\n\r\n    DataCapture.globalTimer.start();\r\n\r\n    //EmotionsAPI.setCurrentUser(currentUser);\r\n\r\n    //EmotionsAPI.loadModels();\r\n\r\n    /*async function takeCapture() {\r\n        webcam.current.takeCapture();\r\n    }\r\n    async function stopCamera() {\r\n        webcam.current.stopCamera();\r\n    }\r\n\r\n    async function startCamera() {\r\n        webcam.current.startCamera();\r\n    }*/\r\n\r\n\r\n    var onSceneMount = (e: SceneEventArgs) => {\r\n        const { canvas, scene, engine } = e;\r\n\r\n        engine.displayLoadingUI();\r\n\r\n        const QuizTimer = new Timer();\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(-5, 3, 0), scene);\r\n\r\n        const camera_initialPos = new BABYLON.Vector3(-5, 1.5, 0);\r\n        const camera_initialTarget = new BABYLON.Vector3(0, 0, 0);\r\n        const camera_speed = 0.7;\r\n        const camera_angularSensibility = 1200;\r\n\r\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(camera_initialTarget);\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, false);\r\n\r\n        camera.speed = camera_speed;\r\n        camera.angularSensibility = camera_angularSensibility;\r\n        camera.inertia = .5;\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        light.intensity = 0.7;\r\n\r\n        // Light\r\n        //const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\r\n        //light.intensity = 0.9;\r\n\r\n        // Skybox\r\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\r\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\r\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n\r\n        // physics\r\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\r\n\r\n        var physicsEngine = scene.getPhysicsEngine();\r\n        //physicsEngine.setSubTimeStep(1);\r\n\r\n        // Enable Collisions\r\n        scene.collisionsEnabled = true;\r\n\r\n        //Then apply collisions and gravity to the active camera\r\n        camera.checkCollisions = true;\r\n        camera.applyGravity = true;\r\n\r\n        //Set the ellipsoid around the camera (e.g. your player's size)\r\n        camera.ellipsoid = new BABYLON.Vector3(1, .8, 1);\r\n\r\n        var ground = Ground.createPlayGroundGigant(scene);\r\n        //var ground= Ground.createPlayGroundLarge(scene);\r\n        ground.checkCollisions = true;\r\n\r\n\r\n        //addSceneModels();\r\n        var xr = {};\r\n\r\n\r\n\r\n        async function XRmode() {\r\n\r\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\r\n\r\n            xr = await scene.createDefaultXRExperienceAsync({\r\n\r\n\r\n                disableDefaultUI: true,\r\n                //floorMeshes: [ground],\r\n                uiOptions: {\r\n\r\n                    sessionMode: \"immersive-ar\"\r\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\r\n                    , referenceSpaceType: \"local-floor\"\r\n                },\r\n                inputOptions: { doNotLoadControllerMeshes: false }\r\n            });\r\n\r\n\r\n\r\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\r\n                    // floor is at y === 2\r\n                    camera.y = 2;\r\n                \r\n                });*/\r\n\r\n\r\n\r\n          \r\n\r\n            xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\r\n                    ground.visibility = 0;\r\n                    skybox.isVisible = false;\r\n                    //GUI_controller.createXRGui();\r\n                    //stopCamera();\r\n                    //EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\r\n                    ground.visibility = 1;\r\n                    skybox.isVisible = true;\r\n                    //GUI_controller.createNormalGui();\r\n                    //startCamera();\r\n                    //EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n        }\r\n\r\n        XRmode();\r\n\r\n      \r\n\r\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\r\n        gizmoManager.selectMode(0);\r\n\r\n\r\n        var pickedMesh = null;\r\n        var attachedMesh = null;\r\n        var pressed = null\r\n\r\n        //observables generales globales para picking meshes\r\n\r\n        scene.onPointerObservable.addOnce(pointerinfo => {\r\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\r\n                QuizTimer.start();\r\n            }\r\n        })\r\n\r\n        scene.onPointerObservable.add((pointerInfo) => {\r\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n\r\n            //if (pointerInfo.type === 4) {\r\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\r\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\r\n            // }\r\n            //}\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n\r\n                    scene.constantlyUpdateMeshUnderPointer = true;\r\n\r\n                    pressed = true;\r\n\r\n                    attachedMesh = pickedMesh;\r\n\r\n                    gizmoManager.attachToMesh(attachedMesh);\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                }\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                    attachedMesh = null;\r\n                    gizmoManager.attachToMesh(null);\r\n                }\r\n\r\n            }\r\n\r\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\r\n\r\n                scene.constantlyUpdateMeshUnderPointer = false;\r\n\r\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n\r\n                    // pickedMesh.physicsImpostor.wakeUp();\r\n                    pressed = false;\r\n                    //pickedMesh.physicsImpostor.dispose();\r\n                    //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\r\n\r\n                    pickedMesh = null;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scene.onBeforePhysicsObservable.add(() => {\r\n\r\n            if (pressed && pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\r\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\r\n            }\r\n\r\n\r\n        });\r\n\r\n        scene.registerBeforeRender(() => {\r\n\r\n            /* if(xr) {\r\n                 if(xr.input.controllers.length) {\r\n         \r\n                     const c = xr.input.controllers[0];\r\n                     \r\n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\r\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\r\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\r\n                     laserPointer.position.copyFrom(c.pointer.position);\r\n                    \r\n                     laserPointer.parent = xr.baseExperience.container;\r\n                 }\r\n             }*/\r\n        })\r\n\r\n\r\n        //edit code from here...\r\n        var info_card1 = new ImageInfoCard(\"card1\", card1)\r\n        var alert_card = new ImageInfoCard('alert', alert2);\r\n        var info_card2 = new ImageInfoCard(\"card2\", cardboard)\r\n\r\n\r\n\r\n        info_card1.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            card1logic();\r\n        })\r\n\r\n        alert_card.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n\r\n        })\r\n\r\n        info_card2.addLogic(() => {\r\n            section_infodisplay.logicManager.ClearAll();\r\n            exercisesLogic();\r\n\r\n        })\r\n\r\n\r\n        //DATA DISPLAY COMPONENTS\r\n\r\n        var section_infodisplay = InfoDisplay(scene, 2);\r\n\r\n        section_infodisplay.addCard(info_card1);\r\n        section_infodisplay.addCard(alert_card);\r\n        section_infodisplay.addCard(info_card2);\r\n\r\n\r\n        section_infodisplay.Start(0);\r\n\r\n        //\r\n\r\n        //declarate initial values \r\n\r\n        function card1logic() {\r\n\r\n\r\n            var largebox = BABYLON.MeshBuilder.CreateBox(\"groundbox\", { width: 3, height: 0.2, depth: 3 }, scene)\r\n            largebox.physicsImpostor = new BABYLON.PhysicsImpostor(largebox, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: .7 }, scene)\r\n            section_infodisplay.logicManager.AddDisposableStuff(largebox);\r\n\r\n            var ground_mat = new BABYLON.StandardMaterial(\"ground_mat\", scene);\r\n            ground_mat.diffuseTexture = new BABYLON.Texture(\"../textures/cannon_tex.jpg\", scene);\r\n            ground_mat.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n            largebox.material = ground_mat;\r\n\r\n\r\n\r\n            var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 8, diameter: .4 }, scene)\r\n            ball.position.y = 5\r\n            ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 5, restitution: 1 }, scene);\r\n            ball.XRPickable = true;\r\n\r\n\r\n            var mmat = new BABYLON.StandardMaterial(\"bastetball_mat\", scene);\r\n            mmat.diffuseTexture = new BABYLON.Texture(\"../textures/basketball.png\", scene);\r\n            mmat.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n            ball.material = mmat;\r\n\r\n\r\n            section_infodisplay.logicManager.AddDisposableStuff(ball);\r\n\r\n\r\n            var gotdata = false;\r\n\r\n            var fisrtArrowStart = new BABYLON.Vector3(0, 0, -1.5);\r\n            var firstArrowDirection = new BABYLON.Vector3(0, 1, 0);\r\n            var obj_force1 = 1\r\n\r\n\r\n            var firstarrow = arrowForce(fisrtArrowStart, firstArrowDirection, 0.06, .75, \"Reacción\", largebox, obj_force1);\r\n            firstarrow.arrow.isVisible = false;\r\n            firstarrow.plane.isVisible = false;\r\n\r\n            function colide(collider, against) {\r\n\r\n                collider.onCollide = function (e) {\r\n\r\n                    if (!gotdata) {\r\n\r\n                        firstarrow.arrow.isVisible = true;\r\n                        firstarrow.plane.isVisible = true;\r\n\r\n                        gotdata = true;\r\n                    }\r\n                    //var firstarrow = arrowForce(e.point, firstArrowDirection, 0.06, .75, \"Reacción\", largebox, obj_force1);\r\n                    firstarrow.arrow.position = e.point;\r\n\r\n                    //ball.physicsImpostor.unregisterOnPhysicsCollide(ground.physicsImpostor, colide) // <= SUPER IMPORTANT\r\n\r\n                    //\r\n\r\n                }\r\n            }\r\n\r\n\r\n            ball.physicsImpostor.registerOnPhysicsCollide(ground.physicsImpostor, colide)\r\n\r\n\r\n            // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n            function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                //Shape profile in XY plane\r\n                const myShape = [];\r\n                const arrowRadius = 0.5;\r\n                var n = 30;\r\n                var deltaAngle = 2 * Math.PI / n\r\n                for (let i = 0; i <= n; i++) {\r\n                    myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                }\r\n                myShape.push(myShape[0]);  //close profile\r\n\r\n                const arrowHeadLength = 1.5;\r\n                const arrowHeadMaxSize = 1.5;\r\n                const arrowLength = 10;\r\n                const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                arrowDirection.normalize();\r\n\r\n                const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                const myPath = [];\r\n                myPath.push(arrowStart);\r\n                myPath.push(arrowBodyEnd);\r\n                myPath.push(arrowBodyEnd)\r\n                myPath.push(arrowHeadEnd);\r\n\r\n                const scaling = (index, distance) => {\r\n                    switch (index) {\r\n                        case 0:\r\n                        case 1:\r\n                            return 1\r\n                            break\r\n                        case 2:\r\n                            return arrowHeadMaxSize / arrowRadius\r\n                            break\r\n                        case 3:\r\n                            return 0\r\n                            break\r\n                    }\r\n                };\r\n\r\n                let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                //arrow.scalingDeterminant=0.2\r\n\r\n                var material = new BABYLON.StandardMaterial(\"mat\");\r\n                material.diffuseColor = new BABYLON.Color3.Red();\r\n                arrow.material = material;\r\n                arrow.material.alpha = 0.60;\r\n\r\n                var button1 = {}\r\n                var plane = {};\r\n\r\n                const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                    const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                    const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    const arrowStart = path[0];\r\n\r\n                    let arrowDirection = path[1].subtract(path[0]);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    path[1] = arrowBodyEnd;\r\n                    path[2] = arrowBodyEnd;\r\n                    path[3] = arrowHeadEnd;\r\n\r\n                    BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                    var middlepoint = arrowBodyEnd;\r\n                    middlepoint.x = (middlepoint.x / 2)\r\n                    middlepoint.y = (middlepoint.y / 2)\r\n                    middlepoint.z = (middlepoint.z / 2)\r\n\r\n                    // GUI\r\n\r\n                    plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                        width: 6,\r\n                        height: 4\r\n                    }, scene);\r\n\r\n                    plane.nonXREditable = true;\r\n\r\n                    //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                    //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                    //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                    //plane.position = local_pos; //position sphere relative to world\r\n                    //plane.rotation.y= (90*(Math.PI/180))  \r\n\r\n\r\n                    plane.parent = arrow;\r\n                    plane.scalingDeterminant = length;\r\n\r\n                    plane.position = arrowHeadEnd;\r\n\r\n                    plane.position.y += 2;\r\n                    plane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n\r\n                    var advancedTexture = new GUI.AdvancedDynamicTexture.CreateForMesh(plane, 300, 200);\r\n\r\n                    var container = new GUI.Container(\"container\")\r\n\r\n                    var rectangle = new GUI.Rectangle(\"rectangle\");\r\n                    rectangle.background = \"black\"\r\n                    rectangle.alpha = 0.35\r\n                    container.addControl(rectangle);\r\n\r\n                    button1 = new GUI.Button.CreateSimpleButton(\"but1\", data);\r\n\r\n\r\n                    button1.width = 1;\r\n                    button1.height = 1;\r\n                    button1.textBlock.fontStyle = \"bold\"\r\n                    button1.textBlock.fontSize = 68\r\n                    button1.textBlock.color = \"white\"\r\n\r\n                    button1.color = \"transparent\";\r\n\r\n                    button1.onPointerUpObservable.add(function () {\r\n\r\n\r\n\r\n                    });\r\n                    advancedTexture.addControl(container);\r\n                    container.addControl(button1);\r\n\r\n\r\n                }\r\n\r\n                //Impulse Settings\r\n                var impulseDirection = arrowDirection;\r\n                var impulseMagnitude = force;\r\n                var contactLocalRefPoint = arrowStart;\r\n\r\n                var CoT = new BABYLON.TransformNode(\"root\");\r\n                CoT.parent = mesh;\r\n                CoT.position = contactLocalRefPoint;\r\n\r\n                var transformForce = function (mesh, vec) {\r\n                    var mymatrix = new BABYLON.Matrix();\r\n                    mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n\r\n                    return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                };\r\n\r\n\r\n                var editForce = function (force) {\r\n                    impulseMagnitude = force;\r\n                }\r\n\r\n\r\n\r\n\r\n                arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                if (mesh) {\r\n\r\n                    //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                    //arrow.parent =mesh;\r\n                    //CoT.parent =mesh;\r\n\r\n                    //arrow.parent= CoT;\r\n                    //CoT.scalingDeterminant=0.2;\r\n\r\n                    arrow.parent = mesh;\r\n                    arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                    arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                function activate() {\r\n\r\n                    //impulsewTransform(mesh);\r\n                }\r\n\r\n                var returnee = {\r\n                    activate: activate,\r\n                    button: button1,\r\n                    editForce: editForce,\r\n                    arrow,\r\n                    plane\r\n\r\n                }\r\n\r\n\r\n                return returnee;\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        var loaded_exercise_index = 0;\r\n\r\n        var OnscreenTimer = new Timer();\r\n        function exercisesLogic() {\r\n\r\n            var quizesList = [];\r\n            var exercise_list = [];\r\n            var loaded_meshes = [];\r\n            var loaded_onBeforeRenderObservables = [];\r\n\r\n\r\n\r\n            var exercise_quizdisplay = XRQuizDisplay(scene, 1, true);\r\n            exercise_quizdisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_quizdisplay.displayPlane.position.x -= 0.3\r\n            exercise_quizdisplay.displayPlane.position.y += 0.5\r\n\r\n            //PROBANDO CONTAINERS SOBRE EL CARD MANAGER\r\n\r\n            //var exercise_quizdisplay = NormalQuizdisplay(scene);\r\n\r\n            //var temp = section_infodisplay.getCurrentCard();\r\n            //temp.info_image_container.addControl(exercise_quizdisplay.container)\r\n\r\n            //\r\n\r\n            //TEST TEST TEST TEST\r\n\r\n            var exercise_datadisplay = XRDinamicsDataDisplay(scene, 1, true)\r\n            exercise_datadisplay.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_datadisplay.displayPlane.position.x -= 0.3\r\n            exercise_datadisplay.displayPlane.position.z -= 2.4\r\n            exercise_datadisplay.displayPlane.position.y += 0.4\r\n\r\n\r\n            exercise_datadisplay.addFormulaImage(\"/images/equ2-1.png\")\r\n\r\n\r\n            var exercise_control = XRControlDisplay(scene, 1, true)\r\n            exercise_control.displayPlane.position.copyFrom(section_infodisplay.displayPlane.position)\r\n            exercise_control.displayPlane.position.x -= 0.3\r\n            exercise_control.displayPlane.position.z += 2.4\r\n            exercise_control.displayPlane.position.y += 0.4\r\n\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_quizdisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_datadisplay.displayPlane);\r\n            section_infodisplay.logicManager.AddTemporalGUI(exercise_control.displayPlane);\r\n\r\n\r\n\r\n            exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index--\r\n\r\n                if (loaded_exercise_index < 0) {\r\n                    loaded_exercise_index++;\r\n                } if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n\r\n                }\r\n\r\n            });\r\n\r\n            exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\r\n\r\n                loaded_exercise_index++;\r\n\r\n                if (loaded_exercise_index > quizesList.length - 1) {\r\n                    loaded_exercise_index--;\r\n                }\r\n                if (quizesList[loaded_exercise_index]) {\r\n                    resource_manager.Start(loaded_exercise_index)\r\n\r\n                }\r\n\r\n            });\r\n\r\n            exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\r\n\r\n                if (exercise_quizdisplay.getIsCorrect()) {\r\n\r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                    DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\r\n                    //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\r\n                    DataCapture.getQuizByID(currentQuiz).isCompleted = true;\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n                    QuizTimer.reset();\r\n\r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n\r\n                    } else {\r\n                        exercise_quizdisplay.correctPanel.show();\r\n                    }\r\n\r\n\r\n\r\n                } else {\r\n\r\n                    var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                    DataCapture.addTotalError(currentQuiz);\r\n                    DataCapture.addQuizErrorByID(currentQuiz);\r\n                    DataCapture.updateUserExerciseData(exerciseData.id);\r\n\r\n                    if (DataCapture.getExerciseData().isCompleted) {\r\n                        exercise_quizdisplay.setIscompleted(true);\r\n                        exercise_quizdisplay.allcompletedPanel.show();\r\n\r\n                    } else {\r\n                        exercise_quizdisplay.incorrectPanel.show();\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            exercise_control.button2.onPointerUpObservable.add(function () {\r\n\r\n                resource_manager.Reset();\r\n                QuizTimer.reset();\r\n\r\n            });\r\n\r\n\r\n\r\n            if (!OnscreenTimer.isRunning()) {\r\n                OnscreenTimer.start();\r\n            }\r\n\r\n            function isCompleted_Question_number() {\r\n\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                if (DataCapture.getQuizByID(currentQuiz).isCompleted) {\r\n                    return \" (Completada)\"\r\n                } else {\r\n                    return \"\"\r\n                }\r\n\r\n            }\r\n            function Check_Errors_number() {\r\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\r\n\r\n                return DataCapture.getQuizByID(currentQuiz).errors;\r\n            }\r\n            function Check_Timer_number() {\r\n\r\n                if (DataCapture.getExerciseData().isCompleted) {\r\n                    OnscreenTimer.pause();\r\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds) + \"\\n\" + \"Sección de preguntas finalizada!\"\r\n                } else {\r\n                    return formatTime(OnscreenTimer.getTimeValues().minutes) + \":\" + formatTime(OnscreenTimer.getTimeValues().seconds)\r\n                }\r\n            }\r\n            function formatTime(time) {\r\n                if (time <= 9) {\r\n                    return \"0\" + time;\r\n                } else {\r\n                    return time;\r\n                }\r\n            }\r\n\r\n            var timer_errors_numbers = scene.onBeforeRenderObservable.add(() => {\r\n\r\n\r\n                exercise_quizdisplay.time_number.text = \"Tiempo: \" + Check_Timer_number();\r\n                exercise_quizdisplay.error_number.text = \"Errores: \" + Check_Errors_number();\r\n                exercise_quizdisplay.question_number.text = \"Pregunta: \" + (loaded_exercise_index + 1) + \"/\" + (quizesList.length) + isCompleted_Question_number();\r\n            });\r\n\r\n\r\n            // Excercise Manager constructor function\r\n\r\n\r\n            function manageStuff() {\r\n\r\n\r\n\r\n                function addExercise(exercise) {\r\n                    exercise_list.push(exercise)\r\n                    quizesList.push(exercise.quiz);\r\n                }\r\n\r\n                function LoadQuiz(number) {\r\n                    exercise_quizdisplay.loadquiz(quizesList[number])\r\n                }\r\n\r\n                function Start(number) {\r\n                    loaded_exercise_index = number;\r\n                    exercise_list[number].Load_Models().then(function (meshes) {\r\n                        ClearStuff();\r\n                        loaded_meshes = meshes;\r\n\r\n                        if (exercise_list[number].Load_Logic) {\r\n\r\n                            exercise_list[number].Load_Logic();\r\n                            LoadQuiz(number);\r\n                            QuizTimer.reset();\r\n                        }\r\n\r\n\r\n\r\n\r\n                    });\r\n                }\r\n\r\n                function Reset() {\r\n\r\n                    Start(loaded_exercise_index);\r\n\r\n                }\r\n\r\n                exercise_control.button2.onPointerUpObservable.add(function () {\r\n                    Reset();\r\n                });\r\n\r\n                function ClearStuff() {\r\n\r\n                    exercise_control.clearObservers();\r\n                    exercise_control.clearItems();\r\n                    exercise_datadisplay.clearViewData();\r\n\r\n\r\n                    console.log(\"reseteando\");\r\n                    if (loaded_onBeforeRenderObservables != undefined) {\r\n\r\n                        loaded_onBeforeRenderObservables.forEach(value => {\r\n\r\n                            scene.onBeforeRenderObservable.remove(value);\r\n                        });\r\n\r\n                    }\r\n                    if (loaded_meshes != undefined) {\r\n\r\n                        loaded_meshes.forEach(value => {\r\n\r\n                            if (Array.isArray(value)) {\r\n                                value.forEach(value => value.dispose());\r\n                            } else { value.dispose(); }\r\n                        });\r\n\r\n                        // addSceneModels();\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                var manager = {\r\n                    addExercise,\r\n                    LoadQuiz,\r\n                    Start,\r\n                    Reset,\r\n                    ClearStuff,\r\n                }\r\n\r\n                return manager;\r\n\r\n            }\r\n\r\n\r\n\r\n            var resource_manager = manageStuff();\r\n\r\n\r\n            var quiz1 = new Exercise.exercise(\r\n                \"1.- Determina la reacción del auto de juguete mostrado a 12N\",\r\n                [\"A) 6 N\", \"B) 12 m/s^2\", \"C) 15 N\", \"D) 10 N\"],\r\n                1,\r\n                [\"\"]);\r\n\r\n\r\n            var quiz2 = new Exercise.exercise(\r\n                \"2.- Determina la reacción del auto de juguete mostrado a 17N\",\r\n                [\"A) 17 N\", \"B) 8 N\", \"C) 15 N\", \"D) 10 N\"],\r\n                0,\r\n                [\"\"]);\r\n\r\n\r\n            var quiz3test = new Exercise.exercise(\r\n                \"3.- Determina la reacción del auto de juguete mostrado a 4N\",\r\n                [\"A) 10 N\", \"B) 8 N\", \"C) 12 N\", \"D) 4 N\"],\r\n                3,\r\n                [\"\"]);\r\n\r\n\r\n\r\n\r\n            async function loadBlueCarModel() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 2.5 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"bluecar.glb\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.2);\r\n                carmesh[0].position.set(-0.5, .33, 0);\r\n\r\n\r\n                //busmeshes[0].rotationQuaternion=null;\r\n                //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n                //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n                //busmeshes[7].showBoundingBox = true;            \r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );  \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh);\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider);\r\n\r\n\r\n                var wall = BABYLON.MeshBuilder.CreateBox(\"collide\", { width: 4, height: 3.3, depth: .4 }, scene)\r\n                wall.position.set(-.5, 0, -3)\r\n                wall.physicsImpostor = new BABYLON.PhysicsImpostor(wall, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: .7 }, scene)\r\n\r\n                var materialwall = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                materialwall.diffuseTexture = new BABYLON.Texture(\"../textures/walltext.jpg\", scene);\r\n                materialwall.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n                wall.material = materialwall;\r\n\r\n                defaultmeshes.push(wall);\r\n                section_infodisplay.logicManager.AddDisposableStuff(wall);\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function loadRedCardModel() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\r\n\r\n                    var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\r\n                    var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\r\n                    var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\r\n\r\n                    collider.scaling.copyFrom(bounds);\r\n                    collider.XRPickable = true;\r\n                    collider.visibility = 0;\r\n\r\n                    collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 2.5 }, scene);\r\n\r\n                    collider.position = geometricCenter;\r\n\r\n                    modelMeshes[rootMesh].setParent(collider);\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"redcar.gltf\", scene));\r\n\r\n                var carmesh = carmodel.meshes;\r\n\r\n                carmesh[0].scaling.scaleInPlace(0.2);\r\n                carmesh[0].position.set(-0.5, .33, 0);\r\n\r\n\r\n                //busmeshes[0].rotationQuaternion=null;\r\n                //busmeshes[0].rotation.y=(45*(Math.PI/180))                \r\n                //busmeshes[0].rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), 0 );                \r\n                //busmeshes[7].showBoundingBox = true;            \r\n\r\n                var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox2\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\r\n\r\n                attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\r\n\r\n                //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\r\n\r\n                rotatewithgrades(carcollider, 180);\r\n\r\n                //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \r\n\r\n\r\n                defaultmeshes.push(carmesh);\r\n                defaultmeshes.push(carcollider);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(carmesh);\r\n                section_infodisplay.logicManager.AddDisposableStuff(carcollider);\r\n\r\n\r\n                var wall = BABYLON.MeshBuilder.CreateBox(\"collide2\", { width: 4, height: 3.3, depth: .4 }, scene)\r\n                wall.position.set(-.5, 0, -3)\r\n                wall.physicsImpostor = new BABYLON.PhysicsImpostor(wall, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: .7 }, scene)\r\n\r\n                var materialwall = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                materialwall.diffuseTexture = new BABYLON.Texture(\"../textures/walltext.jpg\", scene);\r\n                materialwall.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n                wall.material = materialwall;\r\n\r\n                defaultmeshes.push(wall);\r\n                section_infodisplay.logicManager.AddDisposableStuff(wall);\r\n\r\n\r\n\r\n                return defaultmeshes;\r\n\r\n            }\r\n\r\n            async function createWoodBox() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n                materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n                materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"wood_box\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-1.5, 0, 0);\r\n                box.material = materialWood;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n                defaultmeshes.push(box);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n\r\n\r\n                return defaultmeshes;\r\n            }\r\n\r\n            async function createMetalBox() {\r\n\r\n                function rotatewithgrades(mesh, grades) {\r\n\r\n                    mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\r\n                }\r\n\r\n\r\n                var defaultmeshes = [];\r\n\r\n\r\n                var materialMetal = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                materialMetal.diffuseTexture = new BABYLON.Texture(\"../textures/metal_crate.png\", scene);\r\n                materialMetal.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n\r\n                var box = BABYLON.Mesh.CreateBox(\"metal_box\", 1, scene);\r\n                box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n                //box.position.set(-1.5,.33,0);\r\n                box.position = new BABYLON.Vector3(-0.5, 0, 0);\r\n                box.material = materialMetal;\r\n                box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 2.5 }, scene);\r\n                box.XRPickable = true;\r\n\r\n                rotatewithgrades(box, 180);\r\n\r\n                defaultmeshes.push(box);\r\n\r\n                section_infodisplay.logicManager.AddDisposableStuff(box);\r\n\r\n\r\n                var wall = BABYLON.MeshBuilder.CreateBox(\"collide3\", { width: 4, height: 3.3, depth: .4 }, scene)\r\n                wall.position.set(-.5, 0, -3)\r\n                wall.physicsImpostor = new BABYLON.PhysicsImpostor(wall, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 0, restitution: .7 }, scene)\r\n\r\n                var materialwall = new BABYLON.StandardMaterial(\"metal\", scene);\r\n                materialwall.diffuseTexture = new BABYLON.Texture(\"../textures/walltext.jpg\", scene);\r\n                materialwall.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n                wall.material = materialwall;\r\n\r\n                defaultmeshes.push(wall);\r\n                section_infodisplay.logicManager.AddDisposableStuff(wall);\r\n\r\n                return defaultmeshes;\r\n            }\r\n\r\n\r\n\r\n            function test() {\r\n\r\n                var car = scene.getMeshByName(\"carBox1\")\r\n\r\n                var wall = scene.getMeshByName(\"collide\")\r\n\r\n                var obj_force1 = 15\r\n                var cararrow = arrowForce(new BABYLON.Vector3(0, 0, 0), new BABYLON.Vector3(0, 0, 1), 0.04, 2, \"Acción: \" + \"\\n\" + +obj_force1 + \" N\", car, obj_force1);\r\n\r\n                var firstarrow;\r\n\r\n\r\n\r\n                //var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 8, diameter: 1 }, scene)\r\n                //ball.position.y = 5\r\n                //ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 5, restitution: 1 }, scene);\r\n                //ball.XRPickable = true;\r\n                //section_infodisplay.logicManager.AddDisposableStuff(ball);\r\n\r\n\r\n                function activate() {\r\n\r\n                    /*if(firstarrow){\r\n                        firstarrow.arrow.dispose();\r\n                    }*/\r\n\r\n                    car.physicsImpostor.registerOnPhysicsCollide(wall.physicsImpostor, colide);\r\n                    cararrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n\r\n                    activate();\r\n\r\n                });\r\n\r\n                var copy_e;\r\n\r\n                function colide(collider, against) {\r\n\r\n                    collider.onCollide = function (e) {\r\n                        copy_e = JSON.parse(JSON.stringify(e));\r\n\r\n\r\n                        firstarrow = arrowForceParentless(copy_e.point, firstArrowDirection, 0.08, 1, \"Reacción: \" + obj_force1 + \" N\", wall, obj_force1);\r\n                        section_infodisplay.logicManager.AddDisposableStuff(firstarrow.arrow);\r\n                        loaded_meshes.push(firstarrow.arrow)\r\n\r\n                        car.physicsImpostor.unregisterOnPhysicsCollide(wall.physicsImpostor, colide) // <= SUPER IMPORTANT\r\n\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n\r\n                    cararrow.editForce(obj_force1);\r\n                    cararrow.button.textBlock.text = \"Accion: \" + \"\\n\" + obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n                var rotateGroup = new GUI.SliderGroup(\"Control de fuerza\", \"S\");\r\n                rotateGroup.addSlider(\"Fuerza\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(rotateGroup);\r\n                exercise_control.controlPanel.heightInPixels = 100;\r\n\r\n                var gotdata = false;\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, 0)\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForceParentless(basestart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var arrowStart = new BABYLON.Vector3(0, 0, 0).addInPlace(basestart)\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n\r\n                    var material = new BABYLON.StandardMaterial(\"mat\");\r\n                    material.diffuseColor = new BABYLON.Color3.Red();\r\n                    arrow.material = material;\r\n                    arrow.material.alpha = 0.60;\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3.5,\r\n                            height: 2\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = arrowHeadEnd;\r\n\r\n                        plane.position.y += 3;\r\n                        plane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n\r\n                        var advancedTexture = new GUI.AdvancedDynamicTexture.CreateForMesh(plane, 300, 200);\r\n\r\n                        var container = new GUI.Container(\"container\")\r\n\r\n                        var rectangle = new GUI.Rectangle(\"rectangle\");\r\n                        rectangle.background = \"black\"\r\n                        rectangle.alpha = 0.35\r\n                        container.addControl(rectangle);\r\n\r\n                        var button1 = new GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        container.addControl(button1);\r\n\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.textBlock.fontStyle = \"bold\"\r\n                        button1.textBlock.fontSize = 55\r\n                        button1.textBlock.color = \"white\"\r\n\r\n                        button1.color = \"transparent\";\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(container);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = arrowStart;\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n                    //CoT.parent = mesh;\r\n                    CoT.position = contactLocalRefPoint;\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n\r\n\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        //impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n                        arrow\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 4,\r\n                            height: 3.5\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = new GUI.AdvancedDynamicTexture.CreateForMesh(plane, 300, 200);\r\n\r\n                        var container = new GUI.Container(\"container\")\r\n\r\n                        var rectangle = new GUI.Rectangle(\"rectangle\");\r\n                        rectangle.background = \"black\"\r\n                        rectangle.alpha = 0.35\r\n                        container.addControl(rectangle);\r\n\r\n                        button1 = new GUI.Button.CreateSimpleButton(\"but1\", data);\r\n\r\n\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.textBlock.fontStyle = \"bold\"\r\n                        button1.textBlock.fontSize = 50\r\n                        button1.textBlock.color = \"white\"\r\n\r\n                        button1.color = \"transparent\";\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(container);\r\n                        container.addControl(button1);\r\n                        //\r\n\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n\r\n\r\n            }\r\n\r\n            function test2() {\r\n\r\n                var car = scene.getMeshByName(\"carBox2\")\r\n\r\n                var wall = scene.getMeshByName(\"collide2\")\r\n\r\n                var obj_force1 = 15\r\n                var cararrow = arrowForce(new BABYLON.Vector3(0, 0, 0), new BABYLON.Vector3(0, 0, 1), 0.04, 2, \"Acción: \" + \"\\n\" + +obj_force1 + \" N\", car, obj_force1);\r\n\r\n                var firstarrow;\r\n\r\n\r\n\r\n                //var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 8, diameter: 1 }, scene)\r\n                //ball.position.y = 5\r\n                //ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 5, restitution: 1 }, scene);\r\n                //ball.XRPickable = true;\r\n                //section_infodisplay.logicManager.AddDisposableStuff(ball);\r\n\r\n\r\n                function activate() {\r\n\r\n                    /*if(firstarrow){\r\n                        firstarrow.arrow.dispose();\r\n                    }*/\r\n\r\n                    car.physicsImpostor.registerOnPhysicsCollide(wall.physicsImpostor, colide);\r\n                    cararrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n\r\n                    activate();\r\n\r\n                });\r\n\r\n                var copy_e;\r\n\r\n                function colide(collider, against) {\r\n\r\n                    collider.onCollide = function (e) {\r\n                        copy_e = JSON.parse(JSON.stringify(e));\r\n\r\n\r\n                        firstarrow = arrowForceParentless(copy_e.point, firstArrowDirection, 0.08, 1, \"Reacción: \" + obj_force1 + \" N\", wall, obj_force1);\r\n                        section_infodisplay.logicManager.AddDisposableStuff(firstarrow.arrow);\r\n                        loaded_meshes.push(firstarrow.arrow)\r\n\r\n                        car.physicsImpostor.unregisterOnPhysicsCollide(wall.physicsImpostor, colide) // <= SUPER IMPORTANT\r\n\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n\r\n                    cararrow.editForce(obj_force1);\r\n                    cararrow.button.textBlock.text = \"Accion: \" + \"\\n\" + obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n                var rotateGroup = new GUI.SliderGroup(\"Control de fuerza\", \"S\");\r\n                rotateGroup.addSlider(\"Fuerza\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(rotateGroup);\r\n                exercise_control.controlPanel.heightInPixels = 100;\r\n\r\n                var gotdata = false;\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, 0)\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForceParentless(basestart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var arrowStart = new BABYLON.Vector3(0, 0, 0).addInPlace(basestart)\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n\r\n                    var material = new BABYLON.StandardMaterial(\"mat\");\r\n                    material.diffuseColor = new BABYLON.Color3.Red();\r\n                    arrow.material = material;\r\n                    arrow.material.alpha = 0.60;\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3.5,\r\n                            height: 2\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = arrowHeadEnd;\r\n\r\n                        plane.position.y += 3;\r\n                        plane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n\r\n                        var advancedTexture = new GUI.AdvancedDynamicTexture.CreateForMesh(plane, 300, 200);\r\n\r\n                        var container = new GUI.Container(\"container\")\r\n\r\n                        var rectangle = new GUI.Rectangle(\"rectangle\");\r\n                        rectangle.background = \"black\"\r\n                        rectangle.alpha = 0.35\r\n                        container.addControl(rectangle);\r\n\r\n                        var button1 = new GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        container.addControl(button1);\r\n\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.textBlock.fontStyle = \"bold\"\r\n                        button1.textBlock.fontSize = 55\r\n                        button1.textBlock.color = \"white\"\r\n\r\n                        button1.color = \"transparent\";\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(container);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = arrowStart;\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n                    //CoT.parent = mesh;\r\n                    CoT.position = contactLocalRefPoint;\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n\r\n\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        //impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n                        arrow\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 4,\r\n                            height: 3.5\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = new GUI.AdvancedDynamicTexture.CreateForMesh(plane, 300, 200);\r\n\r\n                        var container = new GUI.Container(\"container\")\r\n\r\n                        var rectangle = new GUI.Rectangle(\"rectangle\");\r\n                        rectangle.background = \"black\"\r\n                        rectangle.alpha = 0.35\r\n                        container.addControl(rectangle);\r\n\r\n                        button1 = new GUI.Button.CreateSimpleButton(\"but1\", data);\r\n\r\n\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.textBlock.fontStyle = \"bold\"\r\n                        button1.textBlock.fontSize = 50\r\n                        button1.textBlock.color = \"white\"\r\n\r\n                        button1.color = \"transparent\";\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(container);\r\n                        container.addControl(button1);\r\n                        //\r\n\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n\r\n\r\n            }\r\n\r\n            function test3() {\r\n\r\n                var box = scene.getMeshByName(\"metal_box\")\r\n\r\n                var wall = scene.getMeshByName(\"collide3\")\r\n\r\n                var obj_force1 = 15\r\n                var cararrow = arrowForce(new BABYLON.Vector3(0, 0, 0), new BABYLON.Vector3(0, 0, 1), 0.04, 2, \"Acción: \" + \"\\n\" + +obj_force1 + \" N\", box, obj_force1);\r\n\r\n                var firstarrow;\r\n\r\n\r\n\r\n                //var ball = BABYLON.MeshBuilder.CreateSphere(\"ball\", { segments: 8, diameter: 1 }, scene)\r\n                //ball.position.y = 5\r\n                //ball.physicsImpostor = new BABYLON.PhysicsImpostor(ball, BABYLON.PhysicsImpostor.SphereImpostor, { mass: 5, restitution: 1 }, scene);\r\n                //ball.XRPickable = true;\r\n                //section_infodisplay.logicManager.AddDisposableStuff(ball);\r\n\r\n\r\n                function activate() {\r\n\r\n                    /*if(firstarrow){\r\n                        firstarrow.arrow.dispose();\r\n                    }*/\r\n\r\n                    box.physicsImpostor.registerOnPhysicsCollide(wall.physicsImpostor, colide);\r\n                    cararrow.activate();\r\n\r\n                }\r\n\r\n                var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\r\n\r\n                    activate();\r\n\r\n                });\r\n\r\n                var copy_e;\r\n\r\n                function colide(collider, against) {\r\n\r\n                    collider.onCollide = function (e) {\r\n                        copy_e = JSON.parse(JSON.stringify(e));\r\n\r\n\r\n                        firstarrow = arrowForceParentless(copy_e.point, firstArrowDirection, 0.08, 1, \"Reacción: \" + obj_force1 + \" N\", wall, obj_force1);\r\n                        section_infodisplay.logicManager.AddDisposableStuff(firstarrow.arrow);\r\n                        loaded_meshes.push(firstarrow.arrow)\r\n\r\n                        box.physicsImpostor.unregisterOnPhysicsCollide(wall.physicsImpostor, colide) // <= SUPER IMPORTANT\r\n\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n                exercise_control.addObserver(execute_obs);\r\n\r\n                var changeForce1 = function (force) {\r\n\r\n                    obj_force1 = Math.floor(force);\r\n\r\n                    cararrow.editForce(obj_force1);\r\n                    cararrow.button.textBlock.text = \"Accion: \" + \"\\n\" + obj_force1 + \" N\"\r\n\r\n                };\r\n\r\n                var displayDegreesValue = function (value) {\r\n                    return BABYLON.Tools.ToDegrees(value) | 0;\r\n                }\r\n\r\n                var displayMValue = function (value) {\r\n                    return Math.floor(value);\r\n                }\r\n\r\n\r\n                var rotateGroup = new GUI.SliderGroup(\"Control de fuerza\", \"S\");\r\n                rotateGroup.addSlider(\"Fuerza\", changeForce1, \"N\", 0, 20, obj_force1, displayMValue)\r\n\r\n                exercise_control.controlPanel.addGroup(rotateGroup);\r\n                exercise_control.controlPanel.heightInPixels = 100;\r\n\r\n                var gotdata = false;\r\n\r\n                var fisrtArrowStart = new BABYLON.Vector3(0, 0, 0)\r\n                var firstArrowDirection = new BABYLON.Vector3(0, 0, 1);\r\n\r\n                // FUNCTIONS FOR GUI COMPONENTS CREATION\r\n                function arrowForceParentless(basestart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var arrowStart = new BABYLON.Vector3(0, 0, 0).addInPlace(basestart)\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n\r\n                    var material = new BABYLON.StandardMaterial(\"mat\");\r\n                    material.diffuseColor = new BABYLON.Color3.Red();\r\n                    arrow.material = material;\r\n                    arrow.material.alpha = 0.60;\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 3.5,\r\n                            height: 2\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = arrowHeadEnd;\r\n\r\n                        plane.position.y += 3;\r\n                        plane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\r\n\r\n                        var advancedTexture = new GUI.AdvancedDynamicTexture.CreateForMesh(plane, 300, 200);\r\n\r\n                        var container = new GUI.Container(\"container\")\r\n\r\n                        var rectangle = new GUI.Rectangle(\"rectangle\");\r\n                        rectangle.background = \"black\"\r\n                        rectangle.alpha = 0.35\r\n                        container.addControl(rectangle);\r\n\r\n                        var button1 = new GUI.Button.CreateSimpleButton(\"but1\", data);\r\n                        container.addControl(button1);\r\n\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.textBlock.fontStyle = \"bold\"\r\n                        button1.textBlock.fontSize = 55\r\n                        button1.textBlock.color = \"white\"\r\n\r\n                        button1.color = \"transparent\";\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(container);\r\n                        //\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = arrowStart;\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n                    //CoT.parent = mesh;\r\n                    CoT.position = contactLocalRefPoint;\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n\r\n\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        //impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n                        arrow\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n\r\n                function arrowForce(arrowStart, arrowDirection, scale, length, data, mesh, force) {\r\n\r\n                    var CoT = new BABYLON.TransformNode(\"root\");\r\n\r\n                    //Shape profile in XY plane\r\n                    const myShape = [];\r\n                    const arrowRadius = 0.5;\r\n                    var n = 30;\r\n                    var deltaAngle = 2 * Math.PI / n\r\n                    for (let i = 0; i <= n; i++) {\r\n                        myShape.push(new BABYLON.Vector3(arrowRadius * Math.cos(i * deltaAngle), arrowRadius * Math.sin(i * deltaAngle), 0))\r\n\r\n                    }\r\n                    myShape.push(myShape[0]);  //close profile\r\n\r\n                    const arrowHeadLength = 1.5;\r\n                    const arrowHeadMaxSize = 1.5;\r\n                    const arrowLength = 10;\r\n                    const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                    //var arrowStart = new BABYLON.Vector3(0, 0, 0);\r\n                    //var arrowDirection = new BABYLON.Vector3(1, 0, 0);\r\n                    arrowDirection.normalize();\r\n\r\n                    const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                    const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                    const myPath = [];\r\n                    myPath.push(arrowStart);\r\n                    myPath.push(arrowBodyEnd);\r\n                    myPath.push(arrowBodyEnd)\r\n                    myPath.push(arrowHeadEnd);\r\n\r\n                    const scaling = (index, distance) => {\r\n                        switch (index) {\r\n                            case 0:\r\n                            case 1:\r\n                                return 1\r\n                                break\r\n                            case 2:\r\n                                return arrowHeadMaxSize / arrowRadius\r\n                                break\r\n                            case 3:\r\n                                return 0\r\n                                break\r\n                        }\r\n                    };\r\n\r\n                    let arrow = BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: myShape, path: myPath, updatable: true, scaleFunction: scaling, sideOrientation: BABYLON.Mesh.DOUBLESIDE });\r\n\r\n                    //arrow.scalingDeterminant=0.2\r\n\r\n                    var button1 = {}\r\n\r\n                    const arrowLengthbyScale = (arrow, shape, path, length) => {\r\n                        const arrowHeadLength = path[3].subtract(path[2]).length();\r\n                        const arrowLength = path[3].subtract(path[0]).length() * length;\r\n                        const arrowBodyLength = arrowLength - arrowHeadLength;\r\n                        const arrowStart = path[0];\r\n\r\n                        let arrowDirection = path[1].subtract(path[0]);\r\n                        arrowDirection.normalize();\r\n\r\n                        const arrowBodyEnd = arrowStart.add(arrowDirection.scale(arrowBodyLength));\r\n                        const arrowHeadEnd = arrowBodyEnd.add(arrowDirection.scale(arrowHeadLength))\r\n\r\n                        path[1] = arrowBodyEnd;\r\n                        path[2] = arrowBodyEnd;\r\n                        path[3] = arrowHeadEnd;\r\n\r\n                        BABYLON.MeshBuilder.ExtrudeShapeCustom(\"arrow\", { shape: shape, path: path, scaleFunction: scaling, instance: arrow });\r\n\r\n                        var middlepoint = arrowBodyEnd;\r\n                        middlepoint.x = (middlepoint.x / 2)\r\n                        middlepoint.y = (middlepoint.y / 2)\r\n                        middlepoint.z = (middlepoint.z / 2)\r\n\r\n                        // GUI\r\n\r\n                        var plane = BABYLON.MeshBuilder.CreatePlane(\"planearrow\", {\r\n                            width: 4,\r\n                            height: 3.5\r\n                        }, scene);\r\n\r\n                        plane.nonXREditable = true;\r\n\r\n                        //var matrix = mesh.computeWorldMatrix(true);  // force calculation of world matrix\r\n                        //var local_pos = new BABYLON.Vector3(-0.1, 1.2, 0); //top middle of box relative to box\r\n                        //var global_pos = BABYLON.Vector3.TransformCoordinates(local_pos, matrix); //calculate world position\r\n                        //plane.position = local_pos; //position sphere relative to world\r\n                        plane.rotation.y = (270 * (Math.PI / 180))\r\n\r\n\r\n                        plane.parent = arrow;\r\n                        plane.scalingDeterminant = length;\r\n\r\n                        plane.position = middlepoint;\r\n                        plane.position.y = 2 * length;\r\n\r\n                        var advancedTexture = new GUI.AdvancedDynamicTexture.CreateForMesh(plane, 300, 200);\r\n\r\n                        var container = new GUI.Container(\"container\")\r\n\r\n                        var rectangle = new GUI.Rectangle(\"rectangle\");\r\n                        rectangle.background = \"black\"\r\n                        rectangle.alpha = 0.35\r\n                        container.addControl(rectangle);\r\n\r\n                        button1 = new GUI.Button.CreateSimpleButton(\"but1\", data);\r\n\r\n\r\n                        button1.width = 1;\r\n                        button1.height = 1;\r\n                        button1.textBlock.fontStyle = \"bold\"\r\n                        button1.textBlock.fontSize = 50\r\n                        button1.textBlock.color = \"white\"\r\n\r\n                        button1.color = \"transparent\";\r\n\r\n                        button1.onPointerUpObservable.add(function () {\r\n\r\n\r\n\r\n                        });\r\n                        advancedTexture.addControl(container);\r\n                        container.addControl(button1);\r\n                        //\r\n\r\n\r\n\r\n                    }\r\n\r\n                    //Impulse Settings\r\n                    var impulseDirection = arrowDirection;\r\n                    var impulseMagnitude = force;\r\n                    var contactLocalRefPoint = BABYLON.Vector3.Zero();\r\n\r\n                    var transformForce = function (mesh, vec) {\r\n                        var mymatrix = new BABYLON.Matrix();\r\n                        mesh.rotationQuaternion.toRotationMatrix(mymatrix);\r\n                        return BABYLON.Vector3.TransformNormal(vec, mymatrix);\r\n                    };\r\n\r\n                    var editForce = function (force) {\r\n                        impulseMagnitude = force;\r\n                    }\r\n\r\n                    var impulse = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    var impulsewTransform = function (mesh) {\r\n\r\n                        mesh.physicsImpostor.applyImpulse(transformForce(mesh, impulseDirection).scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\r\n\r\n\r\n                    }\r\n\r\n                    arrowLengthbyScale(arrow, myShape, myPath, length);\r\n\r\n\r\n                    if (mesh) {\r\n\r\n                        //arrow.scalingDeterminant=0.2 //NO FUNCA\r\n\r\n                        //arrow.parent =mesh;\r\n                        //CoT.parent =mesh;\r\n\r\n                        //arrow.parent= CoT;\r\n                        //CoT.scalingDeterminant=0.2;\r\n\r\n                        arrow.parent = mesh;\r\n                        arrow.scaling = new BABYLON.Vector3(scale / mesh.scaling.x, scale / mesh.scaling.y, scale / mesh.scaling.z);\r\n                        arrow.position = arrowStart;\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    function activate() {\r\n\r\n                        impulsewTransform(mesh);\r\n                    }\r\n\r\n                    var returnee = {\r\n                        activate: activate,\r\n                        button: button1,\r\n                        editForce: editForce,\r\n\r\n                    }\r\n\r\n\r\n                    return returnee;\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            quiz1.addModels(loadBlueCarModel)\r\n            quiz1.addLogic(test)\r\n\r\n\r\n            quiz2.addModels(loadRedCardModel)\r\n            quiz2.addLogic(test2)\r\n\r\n\r\n            quiz3test.addModels(createMetalBox)\r\n            quiz3test.addLogic(test3)\r\n\r\n            resource_manager.addExercise(quiz1);\r\n            resource_manager.addExercise(quiz2);\r\n            resource_manager.addExercise(quiz3test);\r\n\r\n\r\n            resource_manager.Start(loaded_exercise_index)\r\n\r\n        }\r\n\r\n\r\n        var loader = new BABYLON.AssetsManager(scene);\r\n\r\n        loader.onFinish = function () {\r\n    \r\n            engine.runRenderLoop(() => {\r\n                if (scene) {\r\n                    window.document.title = engine.getFps().toFixed() + \" fps\";\r\n                    scene.render();\r\n    \r\n                }\r\n            });\r\n        };\r\n    \r\n        scene.executeWhenReady(function () {\r\n    \r\n            engine.hideLoadingUI();\r\n    \r\n            if (document.getElementById(\"xr-button\")) {\r\n                let XRbutton = document.getElementById(\"xr-button\");\r\n    \r\n                XRbutton.addEventListener(\"click\", async function () {\r\n    \r\n                    if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\r\n    \r\n                        xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\r\n                        xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\r\n                        await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\r\n    \r\n                    } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\r\n                        await xr.baseExperience.exitXRAsync()\r\n                    }\r\n                });\r\n    \r\n            }\r\n    \r\n    \r\n            if (document.getElementById(\"fullscreen-button\")) {\r\n                let button = document.getElementById(\"fullscreen-button\")\r\n    \r\n                button.addEventListener(\"click\", async function () {\r\n                    //engine.enterFullScreen(true);\r\n    \r\n                    engine.switchFullscreen(false);\r\n                })\r\n            }\r\n    \r\n        });\r\n    \r\n    \r\n        loader.load();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Container maxWidth='xl'>\r\n\r\n                {/*<WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />*/}\r\n\r\n\r\n                <Box width=\"100%\" p={1} my={0.5}>\r\n                    <BabylonScene onSceneMount={onSceneMount} />\r\n                </Box>\r\n\r\n\r\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\r\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\r\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\r\n                    </Button>\r\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\r\n                        <Typography variant=\"h6\">pantalla completa</Typography>\r\n                    </Button>\r\n                </Container>\r\n\r\n\r\n            </Container>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default ExercisePage","import React, { Component, useRef } from 'react'\r\nimport Main from '../../WebLayout/Main';\r\nimport * as BABYLON from 'babylonjs';\r\nimport BabylonScene from '../../BabylonScene/'; // import the component above linking to file we just created.\r\nimport * as GUI from 'babylonjs-gui';\r\nimport 'babylonjs-loaders';\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Container, Button } from '@material-ui/core';\r\n\r\nimport { useAuth } from '../../Contexts/AuthContext'\r\n\r\nimport * as Ground from '../../BabylonScene/components/Ground'\r\n\r\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\r\n\r\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\r\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\r\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\r\n\r\nimport XRDisplayPlane from '../../FisicARtivo_Components/XRDisplayPlane';\r\n\r\nimport { ImageInfoCard } from '../../FisicARtivo_Components/InfoCards';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    imagebox: {\r\n        //backgroundImage: 'url(' + drawerImage + ')',   \r\n        height: '100%',\r\n        width: '60%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    card: {\r\n        height: '100%',\r\n\r\n        flexDirection: 'column',\r\n    },\r\n    media: {\r\n        height: 400,\r\n\r\n    },\r\n    babylonbuttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction GetMainContent() {\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    var onSceneMount = (e: SceneEventArgs) => {\r\n        const { canvas, scene, engine } = e;\r\n\r\n        engine.displayLoadingUI();\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\r\n        const camera_initialPos = new BABYLON.Vector3(-4, .82, 0);\r\n        const camera_initialTarget = new BABYLON.Vector3(0, 1, 0);\r\n        const camera_speed = 0.7;\r\n        const camera_angularSensibility = 1200;\r\n\r\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(camera_initialTarget);\r\n        // This attaches the camera to the canvas\r\n        //camera.attachControl(canvas, false);\r\n\r\n        camera.speed = camera_speed;\r\n        camera.angularSensibility = camera_angularSensibility;\r\n        camera.inertia = .5;\r\n\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        // const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        // light.intensity = 0.7;\r\n\r\n\r\n        // Light\r\n        const light = new BABYLON.PointLight(\"point\", new BABYLON.Vector3(20, 20, 10), scene);\r\n        light.intensity = 0.9;\r\n\r\n        // Skybox\r\n        var skybox = BABYLON.MeshBuilder.CreateBox(\"SkyBox\", { size: 1000.0 }, scene);\r\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = new BABYLON.HDRCubeTexture(\"textures/lilienstein_4k.hdr\", scene, 512);\r\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n        skybox.material = skyboxMaterial;\r\n\r\n\r\n        // physics\r\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \r\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\r\n\r\n        //var physicsEngine = scene.getPhysicsEngine();\r\n        //physicsEngine.setSubTimeStep(1);\r\n\r\n\r\n        // Enable Collisions\r\n        scene.collisionsEnabled = true;\r\n\r\n        //Then apply collisions and gravity to the active camera\r\n        camera.checkCollisions = true;\r\n        //camera.applyGravity = true;\r\n\r\n        //Set the ellipsoid around the camera (e.g. your player's size)\r\n        camera.ellipsoid = new BABYLON.Vector3(.5, .8, .5);\r\n\r\n        var ground = Ground.createPlayGroundGigant(scene);\r\n\r\n\r\n        //var ground= Ground.createPlayGroundLarge(scene);\r\n\r\n        //finally, say which mesh will be collisionable\r\n        ground.checkCollisions = true;\r\n\r\n\r\n        async function createScene() {\r\n\r\n\r\n            // AR availability check and GUI in non-AR mode\r\n            let arAvailable = await BABYLON.WebXRSessionManager.IsSessionSupportedAsync('immersive-ar')\r\n\r\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\r\n\r\n            var xr = await scene.createDefaultXRExperienceAsync({\r\n\r\n                disableDefaultUI: true,\r\n                //floorMeshes: [ground],\r\n                uiOptions: {\r\n\r\n                    sessionMode: \"immersive-ar\"\r\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\r\n                    , referenceSpaceType: \"local-floor\"\r\n                },\r\n                inputOptions: { doNotLoadControllerMeshes: true },\r\n                //optionalFeatures: true\r\n            });\r\n\r\n\r\n\r\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\r\n                    // floor is at y === 2\r\n                    camera.y = 2;\r\n                \r\n                });*/\r\n\r\n            // Get the Feature Manager and from it the HitTesting fearture \r\n            //const fm = xr.baseExperience.featuresManager;\r\n\r\n            // Get XR Camera Created by Basic Experience Helper \r\n            //const xrCamera = xr.baseExperience.camera\r\n\r\n\r\n\r\n\r\n            var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\r\n            gizmoManager.selectMode(0);\r\n\r\n\r\n            var pickedMesh = null;\r\n            var attachedMesh = null;\r\n            var pressed = false;\r\n\r\n            //observables generales globales para picking meshes\r\n\r\n\r\n            scene.onPointerObservable.add((pointerInfo) => {\r\n                pickedMesh = pointerInfo.pickInfo.pickedMesh;\r\n\r\n                //if (pointerInfo.type === 4) {\r\n                // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n                //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\r\n                //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\r\n                // }\r\n                //}\r\n\r\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\r\n\r\n                    if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\r\n\r\n                         scene.constantlyUpdateMeshUnderPointer = true;\r\n\r\n                        pressed = true;\r\n\r\n                        attachedMesh = pickedMesh;\r\n\r\n                        gizmoManager.attachToMesh(attachedMesh);\r\n\r\n                    }\r\n\r\n                    if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                    }\r\n\r\n                    if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\r\n\r\n                        attachedMesh = null;\r\n                        gizmoManager.attachToMesh(null);\r\n                    }\r\n\r\n                }\r\n\r\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\r\n\r\n                    scene.constantlyUpdateMeshUnderPointer = false;\r\n\r\n                    if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n\r\n                        // pickedMesh.physicsImpostor.wakeUp();\r\n                        pressed = false;\r\n                        //pickedMesh.physicsImpostor.dispose();\r\n                        //pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\r\n\r\n                        pickedMesh = null;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n\r\n            scene.onBeforePhysicsObservable.add(() => {\r\n\r\n                if (pressed && pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\r\n\r\n                    pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\r\n                    pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n            const normalGUI = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"fullscreenGUI\");\r\n            //normalGUI.scaleTo();\r\n\r\n            var intro_info = new GUI.Rectangle(\"intro_info\")\r\n            intro_info.background = \"black\"\r\n            intro_info.color = \"blue\"\r\n            intro_info.width = \"80%\";\r\n            intro_info.height = \"50%\";\r\n\r\n            const text_bad = new GUI.TextBlock(\"text_bad\");\r\n            text_bad.fontFamily = \"Helvetica\";\r\n            text_bad.textWrapping = true;\r\n            text_bad.text = \"modo de realidad aumentada (modo XR) no esta disponible para este dispositivo, por favor, asegurate de usar Chrome como navegador web y un dispositivo Android\";\r\n            text_bad.color = \"white\";\r\n            text_bad.fontSize = \"5%\";\r\n            text_bad.height = \"400px\"\r\n            text_bad.paddingLeft = \"10px\"\r\n            text_bad.paddingRight = \"10px\"\r\n\r\n            const text_good = new GUI.TextBlock(\"text_good\");\r\n            text_good.fontFamily = \"Helvetica\";\r\n            text_good.textWrapping = true;\r\n            text_good.text = 'Compatibilidad con realidad aumentada detectada: porfavor, ingresa al modo de realidad aumentada con el boton \"ENTRAR A MODO XR\" en la parte inferior de esta pagina. Al activar el modo RA, aparecerá un mensaje de exito';\r\n            text_good.color = \"white\";\r\n            text_good.fontSize = \"5%\";\r\n            text_good.height = \"400px\"\r\n            text_good.paddingLeft = \"10px\"\r\n            text_good.paddingRight = \"10px\"\r\n\r\n            var noXRPanel = new GUI.StackPanel();\r\n            intro_info.addControl(noXRPanel);\r\n\r\n            normalGUI.addControl(intro_info)\r\n\r\n\r\n            if (!arAvailable) {\r\n                noXRPanel.addControl(text_bad);\r\n            } else {\r\n                noXRPanel.addControl(text_good);\r\n            }\r\n\r\n\r\n            //OBJECTS INSIDE XR MODE (RENDER WHEN THE XR MODE IS ACTIVATED)\r\n\r\n\r\n            var xr_info = new GUI.Rectangle(\"intro_info\")\r\n            xr_info.background = \"black\"\r\n            xr_info.color = \"blue\"\r\n            xr_info.width = \"100%\";\r\n            xr_info.height = \"100%\";\r\n\r\n            const text1 = new GUI.TextBlock(\"text1\");\r\n            text1.fontFamily = \"Helvetica\";\r\n            text1.textWrapping = true;\r\n            text1.text = \"Si puedes ver esto, significa que tu dispositivo es compatible con AR de FisicARtivo!\";\r\n            text1.color = \"white\";\r\n            text1.fontSize = \"36px\";\r\n            text1.height = \"400px\"\r\n            text1.paddingLeft = \"10px\"\r\n            text1.paddingRight = \"10px\"\r\n\r\n            var XRPanel = new GUI.StackPanel();\r\n            xr_info.addControl(XRPanel);\r\n            XRPanel.addControl(text1);\r\n\r\n\r\n            var displayPlane = new BABYLON.MeshBuilder.CreatePlane(\"displayPlaneinfo\", {\r\n                width: 1.6,\r\n                height: .9\r\n            }, scene);\r\n\r\n            displayPlane.nonXREditable = true;\r\n            displayPlane.XRPickable = true;\r\n\r\n            //displayPlane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL       \r\n\r\n            var container_texture = new GUI.AdvancedDynamicTexture.CreateForMesh(displayPlane);\r\n            container_texture.scaleTo(800, 450)\r\n\r\n\r\n            var local_pos = new BABYLON.Vector3(1, 1.5, 0);\r\n            displayPlane.position = local_pos; //position sphere relative to world\r\n            displayPlane.rotation.y = (90 * (Math.PI / 180))\r\n\r\n\r\n            var container = new GUI.Rectangle(\"container\")\r\n            //container.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n            //container.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\r\n            container.width = 1;\r\n            container.height = 1;\r\n            //container.cornerRadius = 20;\r\n            //container.color = \"Orange\";\r\n            container.thickness = 0;\r\n            container.background = \"white\";\r\n            container.alpha = 0.05;\r\n            //container.paddingTopInPixels = 15;\r\n            //container.paddingLeftInPixels = 15;\r\n            container.zIndex = -1;\r\n\r\n\r\n            container_texture.addControl(container);\r\n            container_texture.addControl(xr_info);\r\n\r\n\r\n            var materialWood = new BABYLON.StandardMaterial(\"wood\", scene);\r\n            materialWood.diffuseTexture = new BABYLON.Texture(\"../textures/crate.png\", scene);\r\n            materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);\r\n\r\n            var box = BABYLON.Mesh.CreateBox(\"wood_box\", 1, scene);\r\n            box.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4)\r\n            //box.position.set(-1.5,.33,0);\r\n            box.position = new BABYLON.Vector3(1, 0, 0);\r\n            box.material = materialWood;\r\n            box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, { mass: 5 }, scene);\r\n            box.XRPickable = true;\r\n\r\n            box.isVisible = false;\r\n            displayPlane.isVisible = false;\r\n\r\n\r\n\r\n            //Hide GUI in AR mode\r\n            xr.baseExperience.sessionManager.onXRSessionInit.add(() => {\r\n                intro_info.isVisible = false;\r\n                box.isVisible = true;\r\n                displayPlane.isVisible = true;\r\n\r\n                ground.visibility = 0;\r\n                skybox.isVisible = false;\r\n\r\n\r\n\r\n            })\r\n            xr.baseExperience.sessionManager.onXRSessionEnded.add(() => {\r\n                intro_info.isVisible = true;\r\n                box.isVisible = false;\r\n                displayPlane.isVisible = false;\r\n\r\n                ground.visibility = 1;\r\n                skybox.isVisible = true;\r\n            })\r\n\r\n\r\n            var loader = new BABYLON.AssetsManager(scene);\r\n\r\n            loader.onFinish = function () {\r\n\r\n                engine.runRenderLoop(() => {\r\n                    if (scene) {\r\n                        window.document.title = engine.getFps().toFixed() + \" fps\";\r\n                        scene.render();\r\n\r\n                    }\r\n                });\r\n            };\r\n\r\n            scene.executeWhenReady(function () {\r\n\r\n                engine.hideLoadingUI();\r\n\r\n                if (document.getElementById(\"xr-button\")) {\r\n                    let XRbutton = document.getElementById(\"xr-button\");\r\n\r\n                    XRbutton.addEventListener(\"click\", async function () {\r\n\r\n                        if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\r\n\r\n                            xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\r\n                            xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\r\n                            await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\r\n\r\n                        } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\r\n                            await xr.baseExperience.exitXRAsync()\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n\r\n                if (document.getElementById(\"fullscreen-button\")) {\r\n                    let button = document.getElementById(\"fullscreen-button\")\r\n\r\n                    button.addEventListener(\"click\", async function () {\r\n                        //engine.enterFullScreen(true);\r\n\r\n                        engine.switchFullscreen(false);\r\n                    })\r\n                }\r\n\r\n            });\r\n\r\n\r\n            loader.load();\r\n\r\n        }\r\n\r\n        createScene();\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth='xl'>\r\n\r\n                <Typography align='center' variant=\"h6\">Gira esta pantalla en horizontal (panoramico) para alargar contenido </Typography>\r\n\r\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\r\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\r\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\r\n                    </Button>\r\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\r\n                        <Typography variant=\"h6\">pantalla completa</Typography>\r\n                    </Button>\r\n                </Container>\r\n\r\n\r\n\r\n                <Container align='center'>\r\n\r\n                    <Box width=\"85%\" p={1} my={0.5}>\r\n                        <BabylonScene onSceneMount={onSceneMount} />\r\n                    </Box>\r\n                </Container>\r\n\r\n\r\n\r\n\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GetMainContent","export default __webpack_public_path__ + \"static/media/cap1.c3a0aca3.PNG\";","export default __webpack_public_path__ + \"static/media/expresion.c229c43e.PNG\";","import React, { Component } from 'react';\r\n\r\n\r\nexport default class WebCam extends Component {\r\n\r\n    constructor(props){\r\n        super(props)    \r\n\r\n        this.image = null;\r\n        this.state = {\r\n            imageURL: '',\r\n        }\r\n        this.videoEle = React.createRef();\r\n        this.canvasEle = React.createRef();\r\n        this.imageEle = React.createRef();\r\n      \r\n        \r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        this.startCamera();\r\n    }\r\n\r\n    startCamera = async () => {\r\n        \r\n    const constraints = {\r\n        video: { width: { exact: 640 },\r\n                 height: { exact: 480 },\r\n                 facingMode:\"user\",\r\n                },\r\n        audio: false\r\n      };\r\n\r\n\r\n        try {\r\n            const stream =  await navigator.mediaDevices.getUserMedia(constraints);\r\n\r\n            this.videoEle.current.srcObject = stream;\r\n            \r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n    takeCapture = async () => {\r\n        // Get the exact size of the video element.\r\n        const width = this.videoEle.current.videoWidth;\r\n        const height = this.videoEle.current.videoHeight;\r\n\r\n        // get the context object of hidden canvas\r\n        const ctx = this.canvasEle.current.getContext('2d');\r\n\r\n        // Set the canvas to the same dimensions as the video.\r\n        this.canvasEle.current.width = width;\r\n        this.canvasEle.current.height = height;\r\n\r\n        // Draw the current frame from the video on the canvas.\r\n        ctx.drawImage(this.videoEle.current, 0, 0, width, height);\r\n\r\n        // Get an image dataURL from the canvas.\r\n        const imageDataURL = this.canvasEle.current.toDataURL('image/png');\r\n        //this.stopCam();\r\n\r\n        this.props.landmarkPicture(imageDataURL);\r\n\r\n        \r\n\r\n        this.setState({\r\n            imageURL: imageDataURL\r\n        })\r\n    }\r\n\r\n   // capture= () =>{\r\n   //     this.props.landmarkPicture(this.canvasEle.current);\r\n   // }\r\n\r\n    stopCamera = () => {\r\n        const stream = this.videoEle.current.srcObject;\r\n        const tracks = stream.getTracks();\r\n        \r\n        tracks.forEach(track => {\r\n          track.stop();\r\n        });\r\n    }\r\n\r\n    backToCam = () => {\r\n        this.setState({\r\n            imageURL: ''\r\n        }, () => {\r\n            this.startCamera();\r\n        })\r\n    }\r\n\r\n  \r\n    \r\n\r\n    render() {\r\n        return (\r\n            \r\n          <div className=\"selfie\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n\r\n            <div className=\"cam\">\r\n            <video  style={{display:'none'}}  width=\"100%\" height=\"100%\" className=\"video-player\" autoPlay={true} ref={this.videoEle}></video>               \r\n            </div>\r\n\r\n            <canvas ref={this.canvasEle} style={{display:'none'}}  ></canvas>\r\n           \r\n\r\n           \r\n          </div>\r\n        );\r\n      }\r\n\r\n}","\r\nimport * as faceapi from 'face-api.js'\r\n\r\nimport { firestore } from '../firebase'\r\n\r\n\r\nconst MODEL_URL = '/models'\r\n\r\nvar currentUser = {};\r\n\r\nvar fullFaceDescriptions = {};\r\n\r\nvar image = new Image();\r\n\r\nvar isloaded = false;\r\n\r\n\r\nexport function setCurrentUser(user) {\r\n    currentUser = user;\r\n}\r\n\r\nexport function getData() {\r\n    return fullFaceDescriptions;\r\n}\r\n\r\nexport function getImage() {\r\n    return image;\r\n}\r\n\r\nexport function isLoaded() {\r\n    return isloaded;\r\n}\r\n\r\n\r\nexport async function loadModels() {\r\n    //await faceapi.loadModels(MODEL_URL)\r\n    await faceapi.loadFaceDetectionModel(MODEL_URL)\r\n    await faceapi.loadFaceLandmarkModel(MODEL_URL)\r\n    await faceapi.loadFaceRecognitionModel(MODEL_URL)\r\n    await faceapi.loadFaceExpressionModel(MODEL_URL)\r\n\r\n    await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL).then(() => {\r\n        isloaded = true;\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\nexport function drawHTMLImage(canvas, image, width, height) {\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n}\r\n\r\n\r\nexport async function getFullFaceDescription(canvas) {\r\n    //this.fullFaceDescriptions = await faceapi.allFaces(canvas, minConfidence);\r\n    return fullFaceDescriptions = await faceapi.detectAllFaces(canvas,\r\n        new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\r\n\r\n}\r\n\r\nexport function forEachdrawDescription(canvas) {\r\n    fullFaceDescriptions.forEach((fd, i) => {\r\n        //faceapi.drawLandmarks(canvas, fd.landmarks, { drawLines: false })\r\n    })\r\n}\r\n\r\nexport function drawDescription(canvas) {\r\n    //const resizedDetections = faceapi.resizeResults(detections,displaysize)\r\n    faceapi.draw.drawDetections(canvas, fullFaceDescriptions)\r\n    faceapi.draw.drawFaceExpressions(canvas, fullFaceDescriptions)\r\n\r\n}\r\n\r\n\r\nexport function DoProcess(picture) {\r\n\r\n    image.src = picture;\r\n}\r\n\r\n\r\n\r\nexport function setEmotionData(emotiondata, tag) {\r\n\r\n\r\n    if (currentUser && emotiondata != undefined) {\r\n\r\n        var tempData = JSON.parse(JSON.stringify(emotiondata));\r\n\r\n        var dateObj = new Date();\r\n        var month = dateObj.getUTCMonth() + 1; //months from 1-12\r\n        var day = dateObj.getUTCDate();\r\n        var year = dateObj.getUTCFullYear();\r\n        var hours = dateObj.getUTCHours();\r\n        var minutes = dateObj.getUTCMinutes();\r\n\r\n        var addtag = (tag+ \" - \" + year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes).toString();\r\n        firestore.collection('users').doc(currentUser.uid).collection('emotion_capture').doc(addtag).set(tempData);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function actionButton(takeCapture) {\r\n    takeCapture().then(() => {\r\n        var image = getImage();\r\n        if (isLoaded) {\r\n            getFullFaceDescription(image).then((result) => {\r\n                try {\r\n                    setEmotionData(result[0].expressions, \"test\")\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n\r\n    })\r\n}\r\n\r\nexport function TakeEmotionByTime(takeCapture, timeout, tagname) {\r\n    setTimeout(() => {\r\n        takeCapture().then(() => {\r\n            var image = getImage();\r\n            if (isLoaded) {\r\n                getFullFaceDescription(image).then((result) => {\r\n                    try {\r\n                        setEmotionData(result[0].expressions, tagname)\r\n                    } catch (error) {\r\n                        console.log(error)\r\n                    }\r\n\r\n                })\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }, timeout);\r\n\r\n}\r\n\r\nexport function TakeEmotion(takeCapture, tagname) {\r\n    takeCapture().then(() => {\r\n        var image = getImage();\r\n        if (isLoaded) {\r\n            getFullFaceDescription(image).then((result) => {\r\n                try {\r\n                    setEmotionData(result[0].expressions, tagname)\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n\r\n    })\r\n}\r\n\r\n//ORDEN \r\n\r\n\r\n\r\n","import React, { Component, useRef } from 'react'\nimport Main from '../../WebLayout/Main';\nimport * as BABYLON from 'babylonjs';\nimport BabylonScene from '../../BabylonScene'; // import the component above linking to file we just created.\nimport * as GUI from 'babylonjs-gui';\nimport 'babylonjs-loaders';\n\nimport { Timer } from \"easytimer.js\";\n\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Button } from '@material-ui/core';\n\n\nimport drawerImage from \"./resources/cap1.PNG\";\nimport expresion1 from \"./resources/expresion.PNG\"\n\n\nimport { useAuth } from '../../Contexts/AuthContext'\n\n\nimport * as Ground from '../../BabylonScene/components/Ground'\n\nimport * as Exercise from '../../BabylonScene/components/exercise'\n\nimport * as GizmoManager from '../../BabylonScene/components/XRGizmoManager'\n\nimport * as DataCapture from '../../FisicARtivo_Components/DataCapture'\n\nimport GUIcontroller from '../../FisicARtivo_Components/GUIController'\n\nimport DinamicsDataDisplay from '../../FisicARtivo_Components/DinamicsDataDisplay';\n\nimport ControlDisplay from '../../FisicARtivo_Components/ControlDisplay';\n\nimport QuizDisplay from '../../FisicARtivo_Components/QuizDisplay';\n\nimport InfoDisplay from '../../FisicARtivo_Components/InformationCardsManager'\n\n\nimport WebCam from '../../EmotionRecognition_Components/WebCam'\nimport * as EmotionsAPI from '../../EmotionRecognition_Components/EmotionsAPI'\n\n\nimport XRQuizDisplay from '../../FisicARtivo_Components/XRQuizDisplay';\nimport XRDinamicsDataDisplay from '../../FisicARtivo_Components/XRDinamicsDataDisplay';\nimport XRControlDisplay from '../../FisicARtivo_Components/XRControlDisplay';\n\n\n\n\nclass ExercisePage extends Component {\n    render() {\n        return (\n\n\n            <Main data={GetMainContent} />\n\n        )\n    }\n}\n\n\nconst useStyles = makeStyles(theme => ({\n    imagebox: {\n        //backgroundImage: 'url(' + drawerImage + ')',   \n        height: '100%',\n        width: '60%',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    card: {\n        height: '100%',\n\n        flexDirection: 'column',\n    },\n    media: {\n        height: 400,\n\n    },\n    babylonbuttons: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n\n    },\n    image: {\n        paddingTop: '10px',\n        paddingBottom: '20px'\n    }\n}));\n\n\n//<FaceAPI myRef={faceAPI}></FaceAPI>\n\nfunction GetMainContent() {\n\n    const classes = useStyles();\n\n    const { currentUser } = useAuth();\n\n    const webcam = useRef({});\n\n    var exerciseData = {\n        id: 'exercise_test',\n        generalTime: '00:00',\n        totalErrors: 0,\n        isCompleted: false,\n        quizes: {\n            quiz_1: {\n                id: 'quiz_1',\n                time: '00:00',\n                errors: 0,\n                isCompleted: false\n            },\n            quiz_2: {\n                id: 'quiz_2',\n                time: '00:00',\n                errors: 0,\n                isCompleted: false\n            },\n            quiz_3: {\n                id: 'quiz_3',\n                time: '00:00',\n                errors: 0,\n                isCompleted: false\n            },\n\n        }\n    }\n\n    DataCapture.setCurrentUser(currentUser);\n\n    DataCapture.setExerciseData(exerciseData);\n\n    DataCapture.checkUserExerciseData(exerciseData.id);\n\n    DataCapture.globalTimer.start();\n\n    EmotionsAPI.setCurrentUser(currentUser);\n\n    EmotionsAPI.loadModels();\n\n    async function takeCapture() {\n        webcam.current.takeCapture();\n    }\n    async function stopCamera() {\n        webcam.current.stopCamera();\n    }\n\n    async function startCamera() {\n        webcam.current.startCamera();\n    }\n\n    var onSceneMount = (e: SceneEventArgs) => {\n        const { canvas, scene, engine } = e;\n\n        const QuizTimer = new Timer();\n\n        // This creates and positions a free camera (non-mesh)\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n        // const camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(-5, 3, 0), scene);\n\n        const camera_initialPos = new BABYLON.Vector3(-5, 3, 0);\n        const camera_initialTarget = new BABYLON.Vector3(0, 0, 0);\n        const camera_speed = 0.4;\n        const camera_angularSensibility = 1200;\n\n        var camera = new BABYLON.UniversalCamera(\"camera1\", camera_initialPos, scene);\n        // This targets the camera to scene origin\n        camera.setTarget(camera_initialTarget);\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, false);\n\n        camera.speed = camera_speed;\n        camera.angularSensibility = camera_angularSensibility;\n        //camera.inertia=.5;\n\n\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), scene);\n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.7;\n\n        // physics\n        scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.AmmoJSPlugin());\n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.OimoJSPlugin()) \n        //scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), new BABYLON.CannonJSPlugin());\n\n        var physicsEngine = scene.getPhysicsEngine();\n        //physicsEngine.setSubTimeStep(1);\n\n        // Enable Collisions\n        scene.collisionsEnabled = true;\n\n        //Then apply collisions and gravity to the active camera\n        camera.checkCollisions = true;\n        //camera.applyGravity = true;\n\n        //Set the ellipsoid around the camera (e.g. your player's size)\n        camera.ellipsoid = new BABYLON.Vector3(1, .8, 1);\n\n        var ground = Ground.createPlayGroundGigant(scene);\n        //var ground= Ground.createPlayGroundLarge(scene);\n        ground.checkCollisions = true;\n\n\n        //addSceneModels();\n        var xr = {};\n\n        async function XRmode() {\n\n            //ACTIVACION DE MODO XR (REVISAR SOPORTE, BOTON MODO XR, ETC)\n\n            xr = await scene.createDefaultXRExperienceAsync({\n\n\n                disableDefaultUI: true,\n                //floorMeshes: [ground],\n                uiOptions: {\n\n                    sessionMode: \"immersive-ar\"\n                    //, referenceSpaceType: ar_supported ? 'unbounded' : 'local-floor'\n                    , referenceSpaceType: \"local-floor\"\n                },\n                inputOptions: { doNotLoadControllerMeshes: false }\n            });\n\n\n\n            /*   xr.baseExperience.onInitialXRPoseSetObservable.add((xrCamera) => {\n                    // floor is at y === 2\n                    camera.y = 2;\n                \n                });*/\n\n\n\n            if (document.getElementById(\"xr-button\")) {\n                let XRbutton = document.getElementById(\"xr-button\");\n\n                XRbutton.addEventListener(\"click\", async function () {\n\n                    if (xr.baseExperience.state === BABYLON.WebXRState.NOT_IN_XR) {\n\n                        xr.input.xrCamera.position = new BABYLON.Vector3(-3, 1, 0)\n                        xr.input.xrCamera.setTarget(BABYLON.Vector3.Zero());\n                        await xr.baseExperience.enterXRAsync(\"immersive-ar\", \"local-floor\")\n\n                    } else if (xr.baseExperience.state === BABYLON.WebXRState.IN_XR) {\n                        await xr.baseExperience.exitXRAsync()\n                    }\n                });\n\n            }\n\n            xr.baseExperience.onStateChangedObservable.add((state) => {\n                if (state == BABYLON.WebXRState.ENTERING_XR) {\n\n                    //GUI_controller.createXRGui();\n                    stopCamera();\n                    EmotionsAPI.TakeEmotion(takeCapture, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\n\n                } if (state == BABYLON.WebXRState.NOT_IN_XR) {\n\n                    //GUI_controller.createNormalGui();\n                    startCamera();\n                    EmotionsAPI.TakeEmotionByTime(takeCapture, 3000, exerciseData.id + \" \" + \"quiz_\" + loaded_exercise_index + \" \")\n\n\n\n\n                }\n\n\n            })\n\n\n        }\n\n        XRmode();\n\n        if (document.getElementById(\"fullscreen-button\")) {\n            let button = document.getElementById(\"fullscreen-button\")\n\n            button.addEventListener(\"click\", async function () {\n                //engine.enterFullScreen(true);\n                engine.switchFullscreen(false);\n\n            })\n        }\n\n        var gizmoManager = GizmoManager.addXRGizmoManager(BABYLON, scene);\n        gizmoManager.selectMode(0);\n\n\n        var pickedMesh = null;\n        var attachedMesh = null;\n\n        //observables generales globales para picking meshes\n\n        scene.onPointerObservable.addOnce(pointerinfo => {\n            if (pointerinfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {\n                QuizTimer.start();\n            }\n        })\n\n        scene.onPointerObservable.add((pointerInfo) => {\n            pickedMesh = pointerInfo.pickInfo.pickedMesh;\n\n            //if (pointerInfo.type === 4) {\n            // if (pointerInfo.pickInfo.pickedMesh.XRPickable) {\n            //      pointerInfo.pickInfo.pickedMesh.material = pointerInfo.pickInfo.pickedMesh.material || new BABYLON.StandardMaterial(\"mat\", scene);\n            //      pointerInfo.pickInfo.pickedMesh.material.diffuseColor = BABYLON.Color3.Random();\n            // }\n            //}\n\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {\n\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable) {\n\n\n\n                    attachedMesh = pickedMesh;\n\n\n\n                    gizmoManager.attachToMesh(attachedMesh);\n\n                }\n\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.nonXREditable) {\n\n                }\n\n                if (pointerInfo.pickInfo.pickedMesh && !pointerInfo.pickInfo.pickedMesh.XRPickable && !pointerInfo.pickInfo.pickedMesh.nonXREditable) {\n\n                    attachedMesh = null;\n                    gizmoManager.attachToMesh(null);\n                }\n\n            }\n\n            if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {\n\n                if (pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\n\n                    // pickedMesh.physicsImpostor.wakeUp();\n\n                    pickedMesh.physicsImpostor.dispose();\n                    pickedMesh.physicsImpostor = new BABYLON.PhysicsImpostor(pickedMesh, pickedMesh.physicsImpostor.type, { mass: pickedMesh.physicsImpostor.mass, restitution: pickedMesh.physicsImpostor.restitution }, scene);\n                    pickedMesh = null;\n\n\n                }\n\n            }\n\n        });\n\n        scene.onBeforePhysicsObservable.add(() => {\n\n            if (pickedMesh && pickedMesh.XRPickable && pickedMesh.physicsImpostor) {\n\n                pickedMesh.physicsImpostor._physicsBody.setLinearVelocity(0, 0, 0);\n                pickedMesh.physicsImpostor._physicsBody.setAngularVelocity(0, 0, 0);\n            }\n\n\n        });\n\n        scene.constantlyUpdateMeshUnderPointer = true;\n\n        /*scene.registerBeforeRender(() => {\n\n            if(xr) {\n                if(xr.input.controllers.length) {\n         \n                     const c = xr.input.controllers[0];\n                     \n                     laserPointer.rotationQuaternion.copyFrom(c.pointer.rotationQuaternion);\n                     laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2);\n                     //laserPointer.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.LOCAL)\n                     laserPointer.position.copyFrom(c.pointer.position);\n                    \n                     laserPointer.parent = xr.baseExperience.container;\n                }\n            }\n        })*/\n\n\n        //edit code from here...\n\n\n        var defaultmeshes = [];\n\n\n        //var GUI_controller = GUIcontroller(scene, 1);\n\n        //DATA DISPLAY COMPONENTS\n\n        //var exercise_control = ControlDisplay(scene);\n        //var exercise_datadisplay = DinamicsDataDisplay(scene);\n        //var exercise_quizdisplay = QuizDisplay(scene);\n\n        var section_infodisplay = InfoDisplay(scene, 2);\n       \n        var exercise_quizdisplay =  XRQuizDisplay(scene,1,true);\n        var exercise_datadisplay = XRDinamicsDataDisplay(scene,1,true)\n        var exercise_control= XRControlDisplay(scene,1,true)\n       \n\n        //declarate initial values \n\n        var itemList = [];\n        var quizesList = [];\n        var exercise_list = [];\n\n        var loaded_exercise_index = 0;\n        var loaded_meshes = [];\n        var loaded_onBeforeRenderObservables = [];\n\n        // Excercise Manager constructor function\n\n\n        function manageStuff() {\n\n\n            function addExercise(exercise) {\n                exercise_list.push(exercise)\n                quizesList.push(exercise.quiz);\n            }\n\n            function LoadQuiz(number) {\n                exercise_quizdisplay.loadquiz(quizesList[number])\n            }\n\n            function Start(number) {\n                loaded_exercise_index = number;\n                exercise_list[number].Load_Models().then(function (meshes) {\n                    ClearStuff();\n                    loaded_meshes = meshes;\n\n                    if (exercise_list[number].Load_Logic) {\n\n                        exercise_list[number].Load_Logic();\n                        LoadQuiz(number);\n\n                    }\n\n\n                });\n            }\n\n            function Reset() {\n                Start(loaded_exercise_index);\n\n            }\n\n\n            function ClearStuff() {\n\n                exercise_control.clearObservers();\n                exercise_control.clearItems();\n                exercise_datadisplay.clearViewData();\n\n\n                console.log(\"reseteando\");\n                if (loaded_onBeforeRenderObservables != undefined) {\n\n                    loaded_onBeforeRenderObservables.forEach(value => {\n\n                        scene.onBeforeRenderObservable.remove(value);\n                    });\n\n                }\n                if (loaded_meshes != undefined) {\n\n                    loaded_meshes.forEach(value => {\n\n                        if (Array.isArray(value)) {\n                            value.forEach(value => value.dispose());\n                        } else { value.dispose(); }\n                    });\n\n                    // addSceneModels();\n\n                }\n\n            }\n\n            var manager = {\n                addExercise,\n                Start,\n                Reset,\n                ClearStuff,\n            }\n\n            return manager;\n\n        }\n\n\n        //GUI_controller.addGUIelement(exercise_control);\n        //GUI_controller.addGUIelement(exercise_datadisplay);\n        //GUI_controller.addGUIelement(exercise_quizdisplay);\n        //GUI_controller.addGUIelement(exercise_infodisplay)\n\n        //GUI_controller.createXRGui();\n\n        var resource_manager = manageStuff();\n\n\n        var quiz1 = new Exercise.exercise(\n            \"1. En el transcurso de 3 segundos un auto de juguete viajó a una rapidez de 3m/s. ¿Que distancia recorrió?\",\n            [\"A) 9.0 metros\", \"B) 3.0 metros\", \"C) 4.7 metros\", \"D) 3.5 metros\"],\n            0,\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\n\n\n        var quiz2 = new Exercise.exercise(\n            \"2. Un auto de juguete se movio 7 metros durante 3.5 segundos. ¿que velocidad obtuvo?\",\n            [\"A) 0.5 m/s\", \"B) 4.0 m/s\", \"C) 2.0 m/2\", \"D) 3.0 m/2\"],\n            2,\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\n\n\n        var quiz3 = new Exercise.exercise(\n            \"3. Un auto de juguete Recorrió 6.5 metros a una velocidad de 1.5 m/s. ¿cuanto tiempo duró su movimiento?\",\n            [\"A) 2.5 segs\", \"B) 4.3 segs\", \"C) 3.3 segs\", \"D) 6.5 segs\"],\n            1,\n            [\"Tiempo = 3 Segundos\", \"velocidad = 3m/s\", \"Distancia recorrida: ?\"]);\n\n\n\n        async function quiz1_models() {\n\n            function rotatewithgrades(mesh, grades) {\n\n                mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\n            }\n\n\n            function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\n\n                var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\n                var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\n                var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\n\n                collider.scaling.copyFrom(bounds);\n                collider.XRPickable = true;\n                collider.visibility = 0;\n\n                collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\n\n                collider.position = geometricCenter;\n\n                modelMeshes[rootMesh].setParent(collider);\n\n\n\n\n            }\n\n            var defaultmeshes = [];\n\n\n            var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"bluecar.glb\", scene));\n\n            var carmesh = carmodel.meshes;\n\n            carmesh[0].scaling.scaleInPlace(0.15);\n            carmesh[0].position.set(-1.5, .33, 0);\n\n\n\n\n            var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\n\n            attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\n\n            //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\n\n            rotatewithgrades(carcollider, 180);\n\n            //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \n\n\n            defaultmeshes.push(carmesh);\n            defaultmeshes.push(carcollider);\n\n\n            return defaultmeshes;\n\n        }\n\n        async function quiz2_models() {\n\n            function rotatewithgrades(mesh, grades) {\n\n                mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\n            }\n\n\n            function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\n\n                var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\n                var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\n                var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\n\n                collider.scaling.copyFrom(bounds);\n                collider.XRPickable = true;\n                collider.visibility = 0;\n\n                collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\n\n                collider.position = geometricCenter;\n\n                modelMeshes[rootMesh].setParent(collider);\n\n\n\n\n            }\n\n            var defaultmeshes = [];\n\n\n            var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"redcar.gltf\", scene));\n\n            var carmesh = carmodel.meshes;\n\n            carmesh[0].scaling.scaleInPlace(0.15);\n            carmesh[0].position.set(-1.5, .33, 0);\n\n\n\n\n            var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\n\n            attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\n\n            //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\n\n            rotatewithgrades(carcollider, 180);\n\n            //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \n\n\n            defaultmeshes.push(carmesh);\n            defaultmeshes.push(carcollider);\n\n\n            return defaultmeshes;\n\n        }\n\n        async function quiz3_models() {\n\n            function rotatewithgrades(mesh, grades) {\n\n                mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (grades * (Math.PI / 180)));\n            }\n\n\n            function attachToCollider(modelMeshes, rootMesh, collider, BABYLON_Impostor_Type) {\n\n                var boundingMinMax = modelMeshes[rootMesh].getHierarchyBoundingVectors();\n                var bounds = boundingMinMax.max.subtract(boundingMinMax.min);\n                var geometricCenter = boundingMinMax.max.add(boundingMinMax.min).scale(0.5);\n\n                collider.scaling.copyFrom(bounds);\n                collider.XRPickable = true;\n                collider.visibility = 0;\n\n                collider.physicsImpostor = new BABYLON.PhysicsImpostor(collider, BABYLON_Impostor_Type, { mass: 3 }, scene);\n\n                collider.position = geometricCenter;\n\n                modelMeshes[rootMesh].setParent(collider);\n\n\n\n\n            }\n\n            var defaultmeshes = [];\n\n\n            var carmodel = (await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"../3DModels/\", \"greencar.glb\", scene));\n\n            var carmesh = carmodel.meshes;\n\n            carmesh[0].scaling.scaleInPlace(0.15);\n            carmesh[0].position.set(-1.5, .33, 0);\n\n\n\n\n            var carcollider = BABYLON.MeshBuilder.CreateBox(\"carBox1\", { height: carmesh[1].height, width: carmesh[1].width, depth: carmesh[1].depth }, scene);\n\n            attachToCollider(carmesh, 0, carcollider, BABYLON.PhysicsImpostor.BoxImpostor);\n\n            //GIRA CON CUARTERNION NO CON .ROTACION (FUNCIONES EULER)\n\n            rotatewithgrades(carcollider, 180);\n\n            //buscollider.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(new BABYLON.Vector3(0, 1, 0), (90*(Math.PI/180)) );                \n\n\n            defaultmeshes.push(carmesh);\n            defaultmeshes.push(carcollider);\n\n\n            return defaultmeshes;\n\n        }\n\n        function exercise1Logic() {\n\n            var car = scene.getMeshByName(\"carBox1\");\n\n            class PinPointMeasure {\n                constructor(pick1, scene) {\n                    this.sphere1 = BABYLON.Mesh.CreateSphere(\"measure_sphere1\", 8, .05, scene);\n\n                    this.sphere1.parent = pick1;\n\n                    this.sphere1.position = new BABYLON.Vector3(0, 0, 0);\n\n\n                    this.buttonpress = false;\n                    this.expandmeasurement = false;\n                }\n\n\n\n                createMeasure(pick2, scene) {\n                    this.sphere2 = BABYLON.Mesh.CreateSphere(\"measure_sphere2\", 8, .05, scene);\n\n                    //this.sphere2.parent=pick2.pickedMesh;\n\n                    this.sphere2.position = pick2.position;\n\n\n\n                    this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n                    var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                    var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                    var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                    var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n\n                    this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n                    //this.tube = new BABYLON.MeshBuilder.CreateTube(\"tube\",{path: [this.sphere1.getAbsolutePosition(),this.sphere2.getAbsolutePosition(),],radius: .01},scene);\n                    this.line = new BABYLON.Mesh.CreateLines(\"line\", [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], scene, true);\n\n\n                    var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                    var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                    var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n\n\n\n                }\n\n                disposeMeasurement(scene) {\n                    this.buttonpress = true;\n                    //this.container.dispose();\n                    this.sphere1.dispose();\n                    this.sphere2.dispose();\n                    this.line.dispose();\n\n                    //this.line1.dispose();\n                    //this.line2.dispose();\n\n                    scene.onBeforeRenderObservable.remove(this.measureObs)\n\n                }\n\n                calculateMeasurement(scene) {\n\n                    var count = 0;\n\n                    this.measureObs = scene.onBeforeRenderObservable.add(() => {\n\n                        count += (scene.deltaTime);\n\n                        if (this.sphere1 && this.sphere2) {\n\n                            this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n\n                            var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                            var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                            var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                            var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n                            this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n\n                            var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                            var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                            var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n                            this.line = new BABYLON.Mesh.CreateLines(null, [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], null, null, this.line);\n\n\n\n                        }\n\n\n                    });\n                }\n\n                getMeasurementData() {\n\n                    return this.distances;\n                }\n\n\n            }\n\n\n            var measurement1 = new PinPointMeasure(car);\n\n            measurement1.createMeasure(car, scene);\n\n\n            function disposeMeasure() {\n                measurement1.disposeMeasurement(scene)\n            }\n\n            var disposable = {\n                dispose: disposeMeasure\n            }\n\n            loaded_meshes.push(disposable)\n\n\n\n            measurement1.calculateMeasurement(scene);\n\n\n            //Impulse Settings\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\n            var impulseMagnitude = 5;\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\n\n            var count = 0;\n            var tick = 0;\n            var segundero = 0.0;\n\n            var obj_Distance = 1;\n            var obj_Time = 1;\n            var obj_Velocity = 1;\n\n            var display_Distance = 0;\n            var display_Time = 0;\n            var display_Velocity = 0;\n\n            function toFixedNumber(num, digits, base) {\n                var pow = Math.pow(base || 10, digits);\n                return Math.round(num * pow) / pow;\n            }\n\n            var impulse = function (mesh) {\n\n                mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n\n\n            }\n\n            var transformForce = function (mesh, vec) {\n                var mymatrix = new BABYLON.Matrix();\n                mesh.rotationQuaternion.toRotationMatrix(mymatrix);\n                return BABYLON.Vector3.TransformNormal(vec, mymatrix);\n            };\n\n            var translate = function (mesh, direction, power) {\n                mesh.physicsImpostor.setLinearVelocity(\n                    mesh.physicsImpostor.getLinearVelocity().add(\n                        transformForce(mesh, direction.scale(power))\n                    )\n                );\n            }\n\n            var impulser = function (mesh, impulseDirection, impulseMagnitude) {\n                mesh.physicsImpostor.applyImpulse(\n\n                    impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n            }\n\n            function activate() {\n\n                if (measurement1) {\n\n                    measurement1.disposeMeasurement(scene);\n                }\n\n                measurement1 = new PinPointMeasure(car);\n\n                measurement1.createMeasure(car, scene);\n                //let _measurement1 = measurement1;\n\n                measurement1.calculateMeasurement(scene)\n\n\n\n                limitTime(car);\n                //limitDistance(car);\n                //limitedeTiempo(car);\n                //limitedeDistancia(car);\n            }\n\n\n            function limitDistance(mesh) {\n\n\n\n                var tempObservable = scene.onBeforeRenderObservable.add(() => {\n                    count += (scene.deltaTime);\n                    tick += (scene.deltaTime);\n\n                    if (tick = 50) {\n\n                        var data = measurement1.getMeasurementData();\n                        console.log(data[0])\n                        console.log(\"vel: \" + obj_Velocity + \" dist: \" + data[0] + \" tiempo: \" + obj_Time)\n                        if (data[0] >= obj_Distance) {\n                            console.log(\"stop!!!\")\n                            mesh.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());\n\n                            scene.onBeforeRenderObservable.remove(tempObservable);\n                        } else {\n                            //this.plane.parent.physicsImpostor.applyImpulse(transformForce(this.plane.parent, impulseDirection.scale(impulseMagnitude)), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                            //attachedMesh.physicsImpostor.setLinearVelocity(attachedMesh.physicsImpostor.getLinearVelocity().add(transformForce(attachedMesh, impulseDirection.scale(impulseMagnitude))));\n                            //this.plane.parent.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                            //this.plane.parent.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 1));\n                            mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                        }\n\n\n                        tick = 0\n                    }\n\n                });\n\n\n                loaded_onBeforeRenderObservables.push(tempObservable);\n\n            }\n\n\n\n            function limitTime(mesh) {\n\n\n                function RefreshDataInMilisecs(time, refreshRate) {\n\n                    var tick = 0;\n                    var refreshsteps = Math.round((time / refreshRate))\n                    var actualstep = 0;\n\n\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\n                        tick += (scene.deltaTime);\n\n                        if (tick >= refreshRate * 1000) {\n                            actualstep++\n\n\n                            if (actualstep <= refreshsteps) {\n\n                                //code to refresh here\n\n                                tick = 0;\n\n                                display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                display_Velocity = obj_Velocity;\n\n                                exercise_datadisplay.setViewData\n                                    (\n                                        \"∆r: \" + display_Distance + \" metros (m)\" + \"\\n\" +\n                                        \"∆t: \" + display_Time + \" segs\" + \"\\n\" +\n                                        \"v: \" + display_Velocity + \" m/s\"\n                                    )\n\n                                if (mesh.physicsImpostor) {\n                                    mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                                }\n\n\n\n                                //\n\n                            } else {\n\n                                actualstep = 0;\n                                tick = 0;\n                                if (mesh.physicsImpostor) {\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\n                                }\n                                scene.onBeforeRenderObservable.remove(temporalObs);\n                            }\n\n                        }\n\n                    });\n\n                    loaded_onBeforeRenderObservables.push(temporalObs);\n\n                }\n\n                RefreshDataInMilisecs(obj_Time, 0.25)\n\n\n\n            }\n\n\n\n            //var distancia = (velocidad*tiempo)\n            //var tiempo = (distancia/velocidad)\n            //var velocidad= (distancia/tiempo)\n            function calculateTime() {\n                obj_Time = (obj_Distance / obj_Velocity).toFixed(2);\n            }\n\n            function calculateDistance() {\n                obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\n\n            }\n\n            function calculateVelocity() {\n                obj_Velocity = (obj_Distance / obj_Time).toFixed(2);\n            }\n\n            var desplazamiento = function (value) {\n\n                obj_Distance = value.toFixed(2);\n                //calculateVelocity(); \n                //calculateTime();\n\n            }\n\n            var tiempo = function (value) {\n                obj_Time = Math.floor(value * 10) / 10\n\n                calculateDistance();\n\n\n            }\n\n            var velocidad = function (value) {\n\n                obj_Velocity = Math.floor(value * 10) / 10\n                calculateDistance();\n                //calculateTime();\n\n\n\n            }\n\n\n            var displayDValue = function (value) {\n                return Math.floor(value * 100) / 100;\n            }\n\n            var displayMValue = function (value) {\n                return Math.floor(value);\n            }\n\n            var displayFValue = function (value) {\n\n                return Math.floor(value * 10) / 10;\n\n            }\n\n\n            var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\n            //controlSlider.addSlider(\"Desplazamiento\", desplazamiento, \"metros\", 1, 10, 1, displayFValue);\n            controlSlider.addSlider(\"tiempo\", tiempo, \"segundos\", 1, 10, 1, displayFValue);\n            controlSlider.addSlider(\"Velocidad\", velocidad, \"m/s\", 1, 10, 1, displayFValue);\n\n            exercise_control.controlPanel.addGroup(controlSlider);\n            exercise_control.controlPanel.heightInPixels = 150;\n\n\n            //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\n\n            var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\n                activate();\n\n            });\n\n            exercise_control.addObserver(execute_obs);\n\n\n\n\n        }\n\n        function exercise2Logic() {\n\n            var car = scene.getMeshByName(\"carBox1\");\n\n            class PinPointMeasure {\n                constructor(pick1, scene) {\n                    this.sphere1 = BABYLON.Mesh.CreateSphere(\"measure_sphere1\", 8, .05, scene);\n\n                    this.sphere1.parent = pick1;\n\n                    this.sphere1.position = new BABYLON.Vector3(0, 0, 0);\n\n\n                    this.buttonpress = false;\n                    this.expandmeasurement = false;\n                }\n\n\n\n                createMeasure(pick2, scene) {\n                    this.sphere2 = BABYLON.Mesh.CreateSphere(\"measure_sphere2\", 8, .05, scene);\n\n                    //this.sphere2.parent=pick2.pickedMesh;\n\n                    this.sphere2.position = pick2.position;\n\n\n\n                    this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n                    var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                    var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                    var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                    var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n\n                    this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n                    //this.tube = new BABYLON.MeshBuilder.CreateTube(\"tube\",{path: [this.sphere1.getAbsolutePosition(),this.sphere2.getAbsolutePosition(),],radius: .01},scene);\n                    this.line = new BABYLON.Mesh.CreateLines(\"line\", [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], scene, true);\n\n\n                    var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                    var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                    var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n\n\n\n                }\n\n                disposeMeasurement(scene) {\n                    this.buttonpress = true;\n                    //this.container.dispose();\n                    this.sphere1.dispose();\n                    this.sphere2.dispose();\n                    this.line.dispose();\n\n                    //this.line1.dispose();\n                    //this.line2.dispose();\n\n                    scene.onBeforeRenderObservable.remove(this.measureObs)\n\n                }\n\n                calculateMeasurement(scene) {\n\n                    var count = 0;\n\n                    this.measureObs = scene.onBeforeRenderObservable.add(() => {\n\n                        count += (scene.deltaTime);\n\n                        if (this.sphere1 && this.sphere2) {\n\n                            this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n\n                            var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                            var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                            var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                            var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n                            this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n\n                            var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                            var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                            var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n                            this.line = new BABYLON.Mesh.CreateLines(null, [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], null, null, this.line);\n\n\n\n                        }\n\n\n                    });\n                }\n\n                getMeasurementData() {\n\n                    return this.distances;\n                }\n\n\n            }\n\n\n            var measurement1 = new PinPointMeasure(car);\n\n            measurement1.createMeasure(car, scene);\n\n\n            function disposeMeasure() {\n                measurement1.disposeMeasurement(scene)\n            }\n\n            var disposable = {\n                dispose: disposeMeasure\n            }\n\n            loaded_meshes.push(disposable)\n\n\n\n            measurement1.calculateMeasurement(scene);\n\n\n            //Impulse Settings\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\n            var impulseMagnitude = 5;\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\n\n            var count = 0;\n            var tick = 0;\n            var segundero = 0.0;\n\n            var obj_Distance = 1;\n            var obj_Time = 1;\n            var obj_Velocity = 1;\n\n            var display_Distance = 0;\n            var display_Time = 0;\n            var display_Velocity = 0;\n\n            function toFixedNumber(num, digits, base) {\n                var pow = Math.pow(base || 10, digits);\n                return Math.round(num * pow) / pow;\n            }\n\n            var impulse = function (mesh) {\n\n                mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n\n\n            }\n\n            var transformForce = function (mesh, vec) {\n                var mymatrix = new BABYLON.Matrix();\n                mesh.rotationQuaternion.toRotationMatrix(mymatrix);\n                return BABYLON.Vector3.TransformNormal(vec, mymatrix);\n            };\n\n            var translate = function (mesh, direction, power) {\n                mesh.physicsImpostor.setLinearVelocity(\n                    mesh.physicsImpostor.getLinearVelocity().add(\n                        transformForce(mesh, direction.scale(power))\n                    )\n                );\n            }\n\n            var impulser = function (mesh, impulseDirection, impulseMagnitude) {\n                mesh.physicsImpostor.applyImpulse(\n\n                    impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n            }\n\n            function activate() {\n\n                if (measurement1) {\n\n                    measurement1.disposeMeasurement(scene);\n                }\n\n                measurement1 = new PinPointMeasure(car);\n\n                measurement1.createMeasure(car, scene);\n                //let _measurement1 = measurement1;\n\n                measurement1.calculateMeasurement(scene)\n\n\n\n                limitTime(car);\n                //limitDistance(car);\n                //limitedeTiempo(car);\n                //limitedeDistancia(car);\n            }\n\n\n            function limitDistance(mesh) {\n\n\n\n                var tempObservable = scene.onBeforeRenderObservable.add(() => {\n                    count += (scene.deltaTime);\n                    tick += (scene.deltaTime);\n\n                    if (tick = 50) {\n\n                        var data = measurement1.getMeasurementData();\n                        console.log(data[0])\n                        console.log(\"vel: \" + obj_Velocity + \" dist: \" + data[0] + \" tiempo: \" + obj_Time)\n                        if (data[0] >= obj_Distance) {\n                            console.log(\"stop!!!\")\n                            mesh.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());\n\n                            scene.onBeforeRenderObservable.remove(tempObservable);\n                        } else {\n                            //this.plane.parent.physicsImpostor.applyImpulse(transformForce(this.plane.parent, impulseDirection.scale(impulseMagnitude)), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                            //attachedMesh.physicsImpostor.setLinearVelocity(attachedMesh.physicsImpostor.getLinearVelocity().add(transformForce(attachedMesh, impulseDirection.scale(impulseMagnitude))));\n                            //this.plane.parent.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                            //this.plane.parent.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 1));\n                            mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                        }\n\n\n                        tick = 0\n                    }\n\n                });\n\n            }\n\n\n\n            function limitTime(mesh) {\n\n\n                function RefreshDataInMilisecs(time, refreshRate) {\n\n                    var tick = 0;\n                    var refreshsteps = Math.round((time / refreshRate))\n                    var actualstep = 0;\n\n\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\n                        tick += (scene.deltaTime);\n\n                        if (tick >= refreshRate * 1000) {\n                            actualstep++\n\n\n                            if (actualstep <= refreshsteps) {\n\n                                //code to refresh here\n\n                                tick = 0;\n\n                                display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                display_Velocity = obj_Velocity;\n\n                                exercise_datadisplay.setViewData\n                                    (\n                                        \"r: \" + display_Distance + \" metros (m)\" + \"\\n\" +\n                                        \"t: \" + display_Time + \" segs\" + \"\\n\" +\n                                        \"v: \" + display_Velocity + \" m/s\"\n                                    )\n\n                                if (mesh.physicsImpostor) {\n                                    mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                                }\n\n\n\n                                //\n\n                            } else {\n\n                                actualstep = 0;\n                                tick = 0;\n                                if (mesh.physicsImpostor) {\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\n                                }\n                                scene.onBeforeRenderObservable.remove(temporalObs);\n                            }\n\n                        }\n\n                    });\n\n                    loaded_onBeforeRenderObservables.push(temporalObs);\n\n                }\n\n                RefreshDataInMilisecs(obj_Time, 0.25)\n\n\n\n            }\n\n\n\n            //var distancia = (velocidad*tiempo)\n            //var tiempo = (distancia/velocidad)\n            //var velocidad= (distancia/tiempo)\n            function calculateTime() {\n                obj_Time = (obj_Distance / obj_Velocity).toFixed(2);\n            }\n\n            function calculateDistance() {\n                obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\n\n            }\n\n            function calculateVelocity() {\n                obj_Velocity = (obj_Distance / obj_Time).toFixed(2);\n            }\n\n            var desplazamiento = function (value) {\n\n                obj_Distance = Math.floor(value * 10) / 10;\n                calculateVelocity();\n                //calculateTime();\n\n            }\n\n            var tiempo = function (value) {\n                obj_Time = Math.floor(value * 10) / 10\n\n                //calculateDistance();\n                calculateVelocity();\n\n\n            }\n\n            var velocidad = function (value) {\n\n                obj_Velocity = Math.floor(value * 10) / 10\n                calculateDistance();\n                //calculateTime();\n\n\n\n            }\n\n\n            var displayDValue = function (value) {\n                return Math.floor(value * 100) / 100;\n            }\n\n            var displayMValue = function (value) {\n                return Math.floor(value);\n            }\n\n            var displayFValue = function (value) {\n\n                return Math.floor(value * 10) / 10;\n\n            }\n\n\n            var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\n            controlSlider.addSlider(\"Desplazamiento\", desplazamiento, \"metros\", 1, 10, 1, displayFValue);\n            controlSlider.addSlider(\"tiempo\", tiempo, \"segundos\", 1, 10, 1, displayFValue);\n            //controlSlider.addSlider(\"Velocidad\", velocidad, \"m/s\", 1, 10, 1, displayFValue); \n\n            exercise_control.controlPanel.addGroup(controlSlider);\n            exercise_control.controlPanel.heightInPixels = 150;\n\n\n            //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\n\n            var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\n                activate();\n\n            });\n\n            exercise_control.addObserver(execute_obs);\n\n\n\n\n        }\n\n        function exercise3Logic() {\n\n            var car = scene.getMeshByName(\"carBox1\");\n\n            class PinPointMeasure {\n                constructor(pick1, scene) {\n                    this.sphere1 = BABYLON.Mesh.CreateSphere(\"measure_sphere1\", 8, .05, scene);\n\n                    this.sphere1.parent = pick1;\n\n                    this.sphere1.position = new BABYLON.Vector3(0, 0, 0);\n\n\n                    this.buttonpress = false;\n                    this.expandmeasurement = false;\n                }\n\n\n\n                createMeasure(pick2, scene) {\n                    this.sphere2 = BABYLON.Mesh.CreateSphere(\"measure_sphere2\", 8, .05, scene);\n\n                    //this.sphere2.parent=pick2.pickedMesh;\n\n                    this.sphere2.position = pick2.position;\n\n\n\n                    this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n                    var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                    var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                    var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                    var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n\n                    this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n                    //this.tube = new BABYLON.MeshBuilder.CreateTube(\"tube\",{path: [this.sphere1.getAbsolutePosition(),this.sphere2.getAbsolutePosition(),],radius: .01},scene);\n                    this.line = new BABYLON.Mesh.CreateLines(\"line\", [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], scene, true);\n\n\n                    var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                    var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                    var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n\n\n\n                }\n\n                disposeMeasurement(scene) {\n                    this.buttonpress = true;\n                    //this.container.dispose();\n                    this.sphere1.dispose();\n                    this.sphere2.dispose();\n                    this.line.dispose();\n\n                    //this.line1.dispose();\n                    //this.line2.dispose();\n\n                    scene.onBeforeRenderObservable.remove(this.measureObs)\n\n                }\n\n                calculateMeasurement(scene) {\n\n                    var count = 0;\n\n                    this.measureObs = scene.onBeforeRenderObservable.add(() => {\n\n                        count += (scene.deltaTime);\n\n                        if (this.sphere1 && this.sphere2) {\n\n                            this.distance = BABYLON.Vector3.Distance(this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition());\n\n                            var distx = Math.abs(this.sphere1.getAbsolutePosition().x - this.sphere2.getAbsolutePosition().x);\n                            var disty = Math.abs(this.sphere1.getAbsolutePosition().y - this.sphere2.getAbsolutePosition().y);\n                            var distz = Math.abs(this.sphere1.getAbsolutePosition().z - this.sphere2.getAbsolutePosition().z);\n                            var distxz = Math.sqrt(distx ** 2 + distz ** 2);\n                            this.distances = [this.distance.toFixed(2), distx.toFixed(2), disty.toFixed(2), distz.toFixed(2), distxz.toFixed(2)]\n\n                            var midx = this.sphere1.getAbsolutePosition().x + this.sphere2.getAbsolutePosition().x;\n                            var midy = this.sphere1.getAbsolutePosition().y + this.sphere2.getAbsolutePosition().y;\n                            var midz = this.sphere1.getAbsolutePosition().z + this.sphere2.getAbsolutePosition().z;\n\n                            this.line = new BABYLON.Mesh.CreateLines(null, [this.sphere1.getAbsolutePosition(), this.sphere2.getAbsolutePosition()], null, null, this.line);\n\n\n\n                        }\n\n\n                    });\n                }\n\n                getMeasurementData() {\n\n                    return this.distances;\n                }\n\n\n            }\n\n\n            var measurement1 = new PinPointMeasure(car);\n\n            measurement1.createMeasure(car, scene);\n\n\n            function disposeMeasure() {\n                measurement1.disposeMeasurement(scene)\n            }\n\n            var disposable = {\n                dispose: disposeMeasure\n            }\n\n            loaded_meshes.push(disposable)\n\n\n\n            measurement1.calculateMeasurement(scene);\n\n\n            //Impulse Settings\n            var impulseDirection = new BABYLON.Vector3(0, 0, 1);\n            var impulseMagnitude = 5;\n            var contactLocalRefPoint = BABYLON.Vector3.Zero();\n\n            var count = 0;\n            var tick = 0;\n            var segundero = 0.0;\n\n            var obj_Distance = 1;\n            var obj_Time = 1;\n            var obj_Velocity = 1;\n\n            var display_Distance = 0;\n            var display_Time = 0;\n            var display_Velocity = 0;\n\n            function toFixedNumber(num, digits, base) {\n                var pow = Math.pow(base || 10, digits);\n                return Math.round(num * pow) / pow;\n            }\n\n            var impulse = function (mesh) {\n\n                mesh.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n\n\n            }\n\n            var transformForce = function (mesh, vec) {\n                var mymatrix = new BABYLON.Matrix();\n                mesh.rotationQuaternion.toRotationMatrix(mymatrix);\n                return BABYLON.Vector3.TransformNormal(vec, mymatrix);\n            };\n\n            var translate = function (mesh, direction, power) {\n                mesh.physicsImpostor.setLinearVelocity(\n                    mesh.physicsImpostor.getLinearVelocity().add(\n                        transformForce(mesh, direction.scale(power))\n                    )\n                );\n            }\n\n            var impulser = function (mesh, impulseDirection, impulseMagnitude) {\n                mesh.physicsImpostor.applyImpulse(\n\n                    impulseDirection.scale(impulseMagnitude), mesh.getAbsolutePosition().add(contactLocalRefPoint));\n            }\n\n            function activate() {\n\n                if (measurement1) {\n\n                    measurement1.disposeMeasurement(scene);\n                }\n\n                measurement1 = new PinPointMeasure(car);\n\n                measurement1.createMeasure(car, scene);\n                //let _measurement1 = measurement1;\n\n                measurement1.calculateMeasurement(scene)\n\n\n\n                limitTime(car);\n                //limitDistance(car);\n                //limitedeTiempo(car);\n                //limitedeDistancia(car);\n            }\n\n\n            function limitDistance(mesh) {\n\n\n\n                var tempObservable = scene.onBeforeRenderObservable.add(() => {\n                    count += (scene.deltaTime);\n                    tick += (scene.deltaTime);\n\n                    if (tick = 50) {\n\n                        var data = measurement1.getMeasurementData();\n                        console.log(data[0])\n                        console.log(\"vel: \" + obj_Velocity + \" dist: \" + data[0] + \" tiempo: \" + obj_Time)\n                        if (data[0] >= obj_Distance) {\n                            console.log(\"stop!!!\")\n                            mesh.physicsImpostor.setLinearVelocity(BABYLON.Vector3.Zero());\n\n                            scene.onBeforeRenderObservable.remove(tempObservable);\n                        } else {\n                            //this.plane.parent.physicsImpostor.applyImpulse(transformForce(this.plane.parent, impulseDirection.scale(impulseMagnitude)), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                            //attachedMesh.physicsImpostor.setLinearVelocity(attachedMesh.physicsImpostor.getLinearVelocity().add(transformForce(attachedMesh, impulseDirection.scale(impulseMagnitude))));\n                            //this.plane.parent.physicsImpostor.applyImpulse(impulseDirection.scale(impulseMagnitude), this.plane.parent.getAbsolutePosition().add(contactLocalRefPoint));\n                            //this.plane.parent.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 1));\n                            mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                        }\n\n\n                        tick = 0\n                    }\n\n                });\n\n            }\n\n\n\n            function limitTime(mesh) {\n\n\n                function RefreshDataInMilisecs(time, refreshRate) {\n\n                    var tick = 0;\n                    var refreshsteps = Math.round((time / refreshRate))\n                    var actualstep = 0;\n\n\n                    var temporalObs = scene.onBeforeRenderObservable.add(() => {\n                        tick += (scene.deltaTime);\n\n                        if (tick >= refreshRate * 1000) {\n                            actualstep++\n\n\n                            if (actualstep <= refreshsteps) {\n\n                                //code to refresh here\n\n                                tick = 0;\n\n                                display_Distance = (obj_Distance * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                display_Time = (obj_Time * (actualstep / refreshsteps)).toFixed(2).toString();\n\n                                display_Velocity = obj_Velocity;\n\n                                exercise_datadisplay.setViewData\n                                    (\n                                        \"r: \" + display_Distance + \" metros (m)\" + \"\\n\" +\n                                        \"t: \" + display_Time + \" segs\" + \"\\n\" +\n                                        \"v: \" + display_Velocity + \" m/s\"\n                                    )\n\n                                if (mesh.physicsImpostor) {\n                                    mesh.physicsImpostor.setLinearVelocity((transformForce(mesh, impulseDirection.scale(obj_Velocity))));\n                                }\n\n\n\n                                //\n\n                            } else {\n\n                                actualstep = 0;\n                                tick = 0;\n                                if (mesh.physicsImpostor) {\n                                    mesh.physicsImpostor.setLinearVelocity(new BABYLON.Vector3(0, 0, 0));\n                                }\n                                scene.onBeforeRenderObservable.remove(temporalObs);\n                            }\n\n                        }\n\n                    });\n\n                    loaded_onBeforeRenderObservables.push(temporalObs)\n\n                }\n\n                RefreshDataInMilisecs(obj_Time, 0.25)\n\n\n\n            }\n\n\n\n            //var distancia = (velocidad*tiempo)\n            //var tiempo = (distancia/velocidad)\n            //var velocidad= (distancia/tiempo)\n            function calculateTime() {\n                obj_Time = (obj_Distance / obj_Velocity).toFixed(2);\n            }\n\n            function calculateDistance() {\n                obj_Distance = (obj_Velocity * obj_Time).toFixed(2);\n\n            }\n\n            function calculateVelocity() {\n                obj_Velocity = (obj_Distance / obj_Time).toFixed(2);\n            }\n\n            var desplazamiento = function (value) {\n\n                obj_Distance = Math.floor(value * 10) / 10\n                //calculateVelocity(); \n                calculateTime();\n\n            }\n\n            var tiempo = function (value) {\n                obj_Time = Math.floor(value * 10) / 10\n\n                calculateDistance();\n                //calculateVelocity(); \n\n\n            }\n\n            var velocidad = function (value) {\n\n                obj_Velocity = Math.floor(value * 10) / 10\n                //calculateDistance();\n                calculateTime();\n\n\n\n            }\n\n\n            var displayDValue = function (value) {\n                return Math.floor(value * 100) / 100;\n            }\n\n            var displayMValue = function (value) {\n                return Math.floor(value);\n            }\n\n            var displayFValue = function (value) {\n\n                return Math.floor(value * 10) / 10;\n\n            }\n\n\n            var controlSlider = new GUI.SliderGroup(\"Control de variables\", \"S\");\n            controlSlider.addSlider(\"Desplazamiento\", desplazamiento, \"metros\", 1, 10, 1, displayFValue);\n            //controlSlider.addSlider(\"tiempo\", tiempo, \"segundos\", 1, 10, 1, displayFValue);\n            controlSlider.addSlider(\"Velocidad\", velocidad, \"m/s\", 1, 10, 1, displayFValue);\n\n            exercise_control.controlPanel.addGroup(controlSlider);\n            exercise_control.controlPanel.heightInPixels = 150;\n\n\n            //CALLS TO DISPLAYS AND OTHER GUI COMPONENTS\n\n            var execute_obs = exercise_control.button.onPointerUpObservable.add(function () {\n                activate();\n\n            });\n\n            exercise_control.addObserver(execute_obs);\n\n\n\n\n        }\n\n\n        quiz1.addLogic(exercise1Logic)\n        quiz1.addModels(quiz1_models)\n\n        quiz2.addLogic(exercise2Logic)\n        quiz2.addModels(quiz2_models)\n\n        quiz3.addLogic(exercise3Logic)\n        quiz3.addModels(quiz3_models)\n\n\n\n        resource_manager.addExercise(quiz1);\n\n        resource_manager.addExercise(quiz2);\n\n        resource_manager.addExercise(quiz3);\n\n\n        resource_manager.Start(loaded_exercise_index);\n\n        exercise_quizdisplay.leftarrow.onPointerClickObservable.add(() => {\n\n            loaded_exercise_index--\n\n            if (loaded_exercise_index < 0) {\n                loaded_exercise_index = quizesList.length - 1;\n            } if (quizesList[loaded_exercise_index]) {\n                resource_manager.Start(loaded_exercise_index)\n\n            }\n\n        });\n\n        exercise_quizdisplay.rightarrow.onPointerClickObservable.add(() => {\n\n            loaded_exercise_index++;\n\n            if (loaded_exercise_index > quizesList.length - 1) {\n                loaded_exercise_index = 0;\n            }\n            if (quizesList[loaded_exercise_index]) {\n                resource_manager.Start(loaded_exercise_index)\n\n            }\n\n        });\n\n        exercise_quizdisplay.finalanswerButton.onPointerUpObservable.add(() => {\n\n\n            if (exercise_quizdisplay.getIsCorrect()) {\n\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\n\n                DataCapture.addQuizTimebyID(currentQuiz, QuizTimer.getTimeValues().toString())\n                //getQuizByID(currentQuiz).time=timer.getTimeValues().toString();\n                DataCapture.getQuizByID(currentQuiz).isCompleted = true;\n                DataCapture.updateUserExerciseData(exerciseData.id);\n                QuizTimer.reset();\n            } else {\n\n                var currentQuiz = 'quiz_' + (loaded_exercise_index + 1)\n\n                DataCapture.addTotalError(currentQuiz);\n                DataCapture.addQuizErrorByID(currentQuiz);\n                DataCapture.updateUserExerciseData(exerciseData.id);\n            }\n        });\n\n        exercise_control.button2.onPointerUpObservable.add(function () {\n\n            resource_manager.Reset();\n            camera.position = camera_initialPos//new BABYLON.Vector3(-5,3,0);\n            camera.setTarget(camera_initialTarget);\n            QuizTimer.reset();\n\n        });\n\n\n\n        engine.runRenderLoop(() => {\n            if (scene) {\n                window.document.title = engine.getFps().toFixed() + \" fps\";\n                scene.render();\n\n            }\n        });\n    }\n\n    function temporalSnip(){\n    /*   <WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />\n\n        <Button onClick={() => { EmotionsAPI.actionButton(takeCapture) }} id='result-button' size='medium' variant=\"contained\" color=\"primary\">\n            <Typography variant=\"h6\">captura</Typography>\n        </Button>\n        <Button onClick={() => { }} id='result-button' size='medium' variant=\"contained\" color=\"primary\">\n            <Typography variant=\"h6\">resultado</Typography>\n        </Button>\n        \n    */\n    }\n\n\n    return (\n\n\n        <React.Fragment>\n\n            <Container maxWidth='xl'>\n\n                <Box>\n\n                    <WebCam ref={webcam} landmarkPicture={EmotionsAPI.DoProcess} />\n\n                    <Button onClick={() => { EmotionsAPI.actionButton(takeCapture) }} id='result-button' size='medium' variant=\"contained\" color=\"primary\">\n                        <Typography variant=\"h6\">captura</Typography>\n                    </Button>\n                    <Button onClick={() => { }} id='result-button' size='medium' variant=\"contained\" color=\"primary\">\n                        <Typography variant=\"h6\">resultado</Typography>\n                    </Button>\n\n                </Box>\n\n\n                <Box component=\"span\" display=\"block\" p={1} m={1} bgcolor=\"background.paper\">\n                    <Typography paragraph variant=\"h4\">\n                        Concepto de Velocidad\n                    </Typography>\n                    <Typography paragraph variant=\"body1\">\n                        El concepto de velocidad está asociado al cambio de posición de un cuerpo a lo largo del tiempo.\n                        Cuando necesitamos información sobre la dirección y el sentido del movimiento, así como su rapidez recurrimos a la velocidad.\n                    </Typography>\n                    <Typography paragraph >\n                        Su unidad de medida en el Sistema Internacional (S.I.) es el metro por segundo (m/s), esto quiere decir que cuando por ejemplo afirmamos\n                        que la velocidad (módulo) de un cuerpo es de 5 metros por segundo (m/s), estamos indicando que cada segundo ese mismo cuerpo se desplaza 5 metros.\n                    </Typography>\n                    <p>La <strong> velocidad</strong> puede definirse como la cantidad de espacio recorrido por unidad de tiempo con la que un&nbsp;cuerpo se desplaza<em> en una determinada dirección y sentido</em>. Se trata de un vector cuyo módulo, su valor numérico, se puede calcular mediante la expresión:</p>\n\n                    <Container align='center' maxWidth='xs'>\n\n                        <img src={expresion1} style={{ width: '40%', height: '40%', flex: 1, display: 'flex' }} />\n                    </Container>\n\n                    <p>Donde:</p>\n\n                    <ul>\n                        <li><em>v</em>: <strong>Módulo de la velocidad&nbsp;</strong>del cuerpo. Su unidad de medida en el Sistema Internacional (S.I.) es el metro por segundo (m/s)</li>\n                        <li><em>∆r</em>: <strong>Módulo del&nbsp;desplazamiento</strong>. Su unidad de medida en el Sistema Internacional (S.I.) es el metro (m)</li>\n                        <li><em>∆t: </em><strong>Tiempo</strong> empleado en realizar el movimiento<em>.&nbsp;</em>Su unidad de medida en el Sistema Internacional (S.I.) es el segundo (s)</li>\n                    </ul>\n\n                    <Container align='center' maxWidth='md'>\n\n                        <img src={drawerImage} style={{ width: '100%', height: '100%', flex: 1, display: 'flex' }} />\n                    </Container>\n\n\n                </Box>\n\n            </Container>\n\n\n            <Box width=\"100%\">\n\n                <div align='center'>\n                    <Box width=\"100%\" p={1} my={0.5}>\n                        <BabylonScene onSceneMount={onSceneMount} />\n                    </Box>\n                </div>\n\n\n                <Container align='center' maxWidth='sm' className={classes.babylonbuttons}>\n                    <Button id='xr-button' size='medium' variant=\"contained\" color=\"primary\">\n                        <Typography variant=\"h6\">Entrar a modo XR</Typography>\n                    </Button>\n                    <Button id='fullscreen-button' m={0.5} size='medium' variant=\"contained\" color=\"secondary\">\n                        <Typography variant=\"h6\">pantalla completa</Typography>\n                    </Button>\n                </Container>\n\n\n            </Box>\n\n\n\n        </React.Fragment>\n    )\n}\n\nexport default ExercisePage","import logo from './logo.svg';\nimport './App.css';\n\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport PrivateRoute from './WebComponents/PrivateRoute'\nimport RedirectRoute from './WebComponents/RedirectRoute'\n\nimport { AuthProvider } from './Contexts/AuthContext';\n\nimport Intro from './Webpages/Intro'\nimport Login from './Webpages/Login';\nimport SignUp from './Webpages/SignUp'\nimport ForgotPasword from './Webpages/Forgot-Password'\n\nimport UserProfile from './Webpages/UserProfile'\nimport ExerciseList from './Webpages/ExerciseList';\n\nimport SurveyPage_Teacher from './Webpages/TeachersSurveyPage'\nimport SurveyPage_Student from './Webpages/StudentsSurveyPage'\n\nimport * as exer_1_1 from './ExcercisePage/exercise_1_1/index';\nimport * as exer_1_2 from './ExcercisePage/exercise_1_2/index';\nimport * as exer_1_3 from './ExcercisePage/exercise_1_3/index';\nimport * as exer_1_4 from './ExcercisePage/exercise_1_4/index';\nimport * as exer_2_1 from './ExcercisePage/exercise_2_1/index';\nimport * as exer_2_2 from './ExcercisePage/exercise_2_2/index';\nimport * as exer_2_3 from './ExcercisePage/exercise_2_3/index';\nimport * as exer_2_4 from './ExcercisePage/exercise_2_4/index';\n\nimport * as compatibility_test from './ExcercisePage/test_compatibility/index'\n\nimport * as test_comp_0_0 from './ExcercisePage/test_comp_0_0/index'\n\n\n\n\nfunction App() {\n  return (\n   \n     <Router>\n     <AuthProvider>\n       <Switch>\n          <Route exact path=\"/\" component={Intro}/> \n\n          <RedirectRoute path=\"/login\" component={Login} />\n          <RedirectRoute path=\"/signUp\" component={SignUp} />\n          <RedirectRoute path=\"/forgot-password\" component={ForgotPasword} />\n\n          <PrivateRoute path=\"/excercises\" component={ExerciseList} />  \n          <PrivateRoute exact path=\"/userprofile\" component={UserProfile}></PrivateRoute>\n          <PrivateRoute exact path=\"/survey-teacher\" component={SurveyPage_Teacher}></PrivateRoute>\n          <PrivateRoute exact path=\"/survey-student\" component={SurveyPage_Student}></PrivateRoute>\n\n          <PrivateRoute path=\"/1_1\" component={exer_1_1.default} ></PrivateRoute>  \n          <PrivateRoute path=\"/1_2\" component={exer_1_2.default} ></PrivateRoute> \n          <PrivateRoute path=\"/1_3\" component={exer_1_3.default} ></PrivateRoute>  \n          <PrivateRoute path=\"/1_4\" component={exer_1_4.default} ></PrivateRoute> \n          <PrivateRoute path=\"/2_1\" component={exer_2_1.default} ></PrivateRoute> \n          <PrivateRoute path=\"/2_2\" component={exer_2_2.default} ></PrivateRoute> \n          <PrivateRoute path=\"/2_3\" component={exer_2_3.default} ></PrivateRoute> \n          <PrivateRoute path=\"/2_4\" component={exer_2_4.default} ></PrivateRoute> \n          <PrivateRoute path=\"/test\" component={test_comp_0_0.default} ></PrivateRoute> \n\n          <Route exact path=\"/compatibility_test\" component={compatibility_test.default}/> \n        \n\n       </Switch>\n\n      </AuthProvider>\n     </Router>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}